diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8aadc9af..0bb61919 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,6 +2,20 @@ cmake_minimum_required(VERSION 3.13)

 project(mavlink)

+if (POLICY CMP0094)
+    cmake_policy(SET CMP0094 NEW)  # FindPython should return the first matching Python
+endif ()
+
+# Needed to find the right Python on macOS
+if (NOT DEFINED Python_FIND_FRAMEWORK)
+    set(Python_FIND_FRAMEWORK "LAST")
+endif()
+
+# Needed to find the right Python on Windows
+if (NOT DEFINED Python_FIND_REGISTRY)
+    set(Python_FIND_REGISTRY "LAST")
+endif()
+
 find_package(Python COMPONENTS Interpreter REQUIRED)

 # We automatically install the pip dependencies locally below.
diff --git a/pymavlink/generator/C/include_v2.0/protocol.h b/pymavlink/generator/C/include_v2.0/protocol.h
index 12345678..87654321 100644
--- a/pymavlink/generator/C/include_v2.0/protocol.h
+++ b/pymavlink/generator/C/include_v2.0/protocol.h
@@ -199,7 +199,7 @@ static inline void mav_array_assign_char(char *dest, const char *src, size_t n)
 	if (src == NULL) {
 		memset(dest, 0, n);
 	} else {
-		/* strncpy will zero pad dest array up to n bytes */
-		strncpy(dest, src, n);
+		/* mav_array_memcpy correctly handles binary data */
+		mav_array_memcpy(dest, src, n);
 	}
 }
@@ -223,7 +223,7 @@ static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const ch
 	if (b == NULL) {
 		memset(&buf[wire_offset], 0, array_length);
 	} else {
-		strncpy(&buf[wire_offset], b, array_length);
+		mav_array_memcpy(&buf[wire_offset], b, array_length);
 	}
 }

