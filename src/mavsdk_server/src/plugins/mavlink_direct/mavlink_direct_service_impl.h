// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mavlink_direct/mavlink_direct.proto)

#include "mavlink_direct/mavlink_direct.grpc.pb.h"
#include "plugins/mavlink_direct/mavlink_direct.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <mutex>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<typename MavlinkDirect = MavlinkDirect, typename LazyPlugin = LazyPlugin<MavlinkDirect>>

class MavlinkDirectServiceImpl final : public rpc::mavlink_direct::MavlinkDirectService::Service {
public:
    MavlinkDirectServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::MavlinkDirect::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_mavlink_direct_result = new rpc::mavlink_direct::MavlinkDirectResult();
        rpc_mavlink_direct_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_mavlink_direct_result->set_result_str(ss.str());

        response->set_allocated_mavlink_direct_result(rpc_mavlink_direct_result);
    }

    static std::unique_ptr<rpc::mavlink_direct::MavlinkMessage>
    translateToRpcMavlinkMessage(const mavsdk::MavlinkDirect::MavlinkMessage& mavlink_message)
    {
        auto rpc_obj = std::make_unique<rpc::mavlink_direct::MavlinkMessage>();

        rpc_obj->set_message_name(mavlink_message.message_name);

        rpc_obj->set_system_id(mavlink_message.system_id);

        rpc_obj->set_component_id(mavlink_message.component_id);

        rpc_obj->set_target_system_id(mavlink_message.target_system_id);

        rpc_obj->set_target_component_id(mavlink_message.target_component_id);

        rpc_obj->set_fields_json(mavlink_message.fields_json);

        return rpc_obj;
    }

    static mavsdk::MavlinkDirect::MavlinkMessage
    translateFromRpcMavlinkMessage(const rpc::mavlink_direct::MavlinkMessage& mavlink_message)
    {
        mavsdk::MavlinkDirect::MavlinkMessage obj;

        obj.message_name = mavlink_message.message_name();

        obj.system_id = mavlink_message.system_id();

        obj.component_id = mavlink_message.component_id();

        obj.target_system_id = mavlink_message.target_system_id();

        obj.target_component_id = mavlink_message.target_component_id();

        obj.fields_json = mavlink_message.fields_json();

        return obj;
    }

    static rpc::mavlink_direct::MavlinkDirectResult::Result
    translateToRpcResult(const mavsdk::MavlinkDirect::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::MavlinkDirect::Result::Unknown:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_UNKNOWN;
            case mavsdk::MavlinkDirect::Result::Success:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_SUCCESS;
            case mavsdk::MavlinkDirect::Result::Error:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_ERROR;
            case mavsdk::MavlinkDirect::Result::InvalidMessage:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_INVALID_MESSAGE;
            case mavsdk::MavlinkDirect::Result::InvalidField:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_INVALID_FIELD;
            case mavsdk::MavlinkDirect::Result::ConnectionError:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_CONNECTION_ERROR;
            case mavsdk::MavlinkDirect::Result::NoSystem:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_NO_SYSTEM;
            case mavsdk::MavlinkDirect::Result::Timeout:
                return rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_TIMEOUT;
        }
    }

    static mavsdk::MavlinkDirect::Result
    translateFromRpcResult(const rpc::mavlink_direct::MavlinkDirectResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_UNKNOWN:
                return mavsdk::MavlinkDirect::Result::Unknown;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_SUCCESS:
                return mavsdk::MavlinkDirect::Result::Success;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_ERROR:
                return mavsdk::MavlinkDirect::Result::Error;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_INVALID_MESSAGE:
                return mavsdk::MavlinkDirect::Result::InvalidMessage;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_INVALID_FIELD:
                return mavsdk::MavlinkDirect::Result::InvalidField;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_CONNECTION_ERROR:
                return mavsdk::MavlinkDirect::Result::ConnectionError;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_NO_SYSTEM:
                return mavsdk::MavlinkDirect::Result::NoSystem;
            case rpc::mavlink_direct::MavlinkDirectResult_Result_RESULT_TIMEOUT:
                return mavsdk::MavlinkDirect::Result::Timeout;
        }
    }

    grpc::Status SendMessage(
        grpc::ServerContext* /* context */,
        const rpc::mavlink_direct::SendMessageRequest* request,
        rpc::mavlink_direct::SendMessageResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::MavlinkDirect::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SendMessage sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->send_message(
            translateFromRpcMavlinkMessage(request->message()));

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SubscribeMessage(
        grpc::ServerContext* /* context */,
        const mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* request,
        grpc::ServerWriter<rpc::mavlink_direct::MessageResponse>* writer) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        auto stream_closed_promise = std::make_shared<std::promise<void>>();
        auto stream_closed_future = stream_closed_promise->get_future();
        register_stream_stop_promise(stream_closed_promise);

        auto is_finished = std::make_shared<bool>(false);
        auto subscribe_mutex = std::make_shared<std::mutex>();

        const mavsdk::MavlinkDirect::MessageHandle handle =
            _lazy_plugin.maybe_plugin()->subscribe_message(
                request->message_name(),
                [this, &writer, &stream_closed_promise, is_finished, subscribe_mutex, &handle](
                    const mavsdk::MavlinkDirect::MavlinkMessage message) {
                    rpc::mavlink_direct::MessageResponse rpc_response;

                    rpc_response.set_allocated_message(
                        translateToRpcMavlinkMessage(message).release());

                    std::unique_lock<std::mutex> lock(*subscribe_mutex);
                    if (!*is_finished && !writer->Write(rpc_response)) {
                        _lazy_plugin.maybe_plugin()->unsubscribe_message(handle);

                        *is_finished = true;
                        unregister_stream_stop_promise(stream_closed_promise);
                        stream_closed_promise->set_value();
                    }
                });

        stream_closed_future.wait();
        std::unique_lock<std::mutex> lock(*subscribe_mutex);
        *is_finished = true;

        return grpc::Status::OK;
    }

    grpc::Status LoadCustomXml(
        grpc::ServerContext* /* context */,
        const rpc::mavlink_direct::LoadCustomXmlRequest* request,
        rpc::mavlink_direct::LoadCustomXmlResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::MavlinkDirect::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "LoadCustomXml sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->load_custom_xml(request->xml_content());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        std::lock_guard<std::mutex> lock(_stream_stop_mutex);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            std::lock_guard<std::mutex> lock(_stream_stop_mutex);
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        std::lock_guard<std::mutex> lock(_stream_stop_mutex);
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::mutex _stream_stop_mutex{};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk