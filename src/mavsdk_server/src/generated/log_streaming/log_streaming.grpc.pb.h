// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: log_streaming/log_streaming.proto
#ifndef GRPC_log_5fstreaming_2flog_5fstreaming_2eproto__INCLUDED
#define GRPC_log_5fstreaming_2flog_5fstreaming_2eproto__INCLUDED

#include "log_streaming/log_streaming.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace log_streaming {

// Provide log streaming data.
class LogStreamingService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.log_streaming.LogStreamingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Start streaming logging data.
    virtual ::grpc::Status StartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>> AsyncStartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>>(AsyncStartLogStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>> PrepareAsyncStartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>>(PrepareAsyncStartLogStreamingRaw(context, request, cq));
    }
    // Stop streaming logging data.
    virtual ::grpc::Status StopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>> AsyncStopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>>(AsyncStopLogStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>> PrepareAsyncStopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>>(PrepareAsyncStopLogStreamingRaw(context, request, cq));
    }
    // Subscribe to logging messages
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>> SubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>>(SubscribeLogStreamingRawRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>> AsyncSubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>>(AsyncSubscribeLogStreamingRawRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>> PrepareAsyncSubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>>(PrepareAsyncSubscribeLogStreamingRawRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Start streaming logging data.
      virtual void StartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stop streaming logging data.
      virtual void StopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscribe to logging messages
      virtual void SubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* AsyncStartLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* PrepareAsyncStartLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* AsyncStopLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* PrepareAsyncStopLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* SubscribeLogStreamingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* AsyncSubscribeLogStreamingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* PrepareAsyncSubscribeLogStreamingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>> AsyncStartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>>(AsyncStartLogStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>> PrepareAsyncStartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>>(PrepareAsyncStartLogStreamingRaw(context, request, cq));
    }
    ::grpc::Status StopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>> AsyncStopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>>(AsyncStopLogStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>> PrepareAsyncStopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>>(PrepareAsyncStopLogStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>> SubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>>(SubscribeLogStreamingRawRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>> AsyncSubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>>(AsyncSubscribeLogStreamingRawRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>> PrepareAsyncSubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>>(PrepareAsyncSubscribeLogStreamingRawRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response, std::function<void(::grpc::Status)>) override;
      void StartLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLogStreaming(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* AsyncStartLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* PrepareAsyncStartLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* AsyncStopLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* PrepareAsyncStopLogStreamingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* SubscribeLogStreamingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* AsyncSubscribeLogStreamingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* PrepareAsyncSubscribeLogStreamingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartLogStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_StopLogStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeLogStreamingRaw_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Start streaming logging data.
    virtual ::grpc::Status StartLogStreaming(::grpc::ServerContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response);
    // Stop streaming logging data.
    virtual ::grpc::Status StopLogStreaming(::grpc::ServerContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response);
    // Subscribe to logging messages
    virtual ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartLogStreaming() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartLogStreaming(::grpc::ServerContext* context, ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopLogStreaming() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLogStreaming(::grpc::ServerContext* context, ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeLogStreamingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeLogStreamingRaw() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeLogStreamingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeLogStreamingRaw(::grpc::ServerContext* context, ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartLogStreaming<WithAsyncMethod_StopLogStreaming<WithAsyncMethod_SubscribeLogStreamingRaw<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartLogStreaming() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::log_streaming::StartLogStreamingRequest, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* response) { return this->StartLogStreaming(context, request, response); }));}
    void SetMessageAllocatorFor_StartLogStreaming(
        ::grpc::MessageAllocator< ::mavsdk::rpc::log_streaming::StartLogStreamingRequest, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::log_streaming::StartLogStreamingRequest, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartLogStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopLogStreaming() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::log_streaming::StopLogStreamingRequest, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* request, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* response) { return this->StopLogStreaming(context, request, response); }));}
    void SetMessageAllocatorFor_StopLogStreaming(
        ::grpc::MessageAllocator< ::mavsdk::rpc::log_streaming::StopLogStreamingRequest, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::log_streaming::StopLogStreamingRequest, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopLogStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeLogStreamingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeLogStreamingRaw() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest, ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* request) { return this->SubscribeLogStreamingRaw(context, request); }));
    }
    ~WithCallbackMethod_SubscribeLogStreamingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* SubscribeLogStreamingRaw(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartLogStreaming<WithCallbackMethod_StopLogStreaming<WithCallbackMethod_SubscribeLogStreamingRaw<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartLogStreaming() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopLogStreaming() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeLogStreamingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeLogStreamingRaw() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeLogStreamingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartLogStreaming() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartLogStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopLogStreaming() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLogStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeLogStreamingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeLogStreamingRaw() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeLogStreamingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeLogStreamingRaw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartLogStreaming() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartLogStreaming(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartLogStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopLogStreaming() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopLogStreaming(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopLogStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeLogStreamingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeLogStreamingRaw() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeLogStreamingRaw(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeLogStreamingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeLogStreamingRaw(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartLogStreaming() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::log_streaming::StartLogStreamingRequest, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::log_streaming::StartLogStreamingRequest, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* streamer) {
                       return this->StreamedStartLogStreaming(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StartLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StartLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartLogStreaming(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::log_streaming::StartLogStreamingRequest,::mavsdk::rpc::log_streaming::StartLogStreamingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopLogStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopLogStreaming() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::log_streaming::StopLogStreamingRequest, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::log_streaming::StopLogStreamingRequest, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* streamer) {
                       return this->StreamedStopLogStreaming(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopLogStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopLogStreaming(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::StopLogStreamingRequest* /*request*/, ::mavsdk::rpc::log_streaming::StopLogStreamingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopLogStreaming(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::log_streaming::StopLogStreamingRequest,::mavsdk::rpc::log_streaming::StopLogStreamingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartLogStreaming<WithStreamedUnaryMethod_StopLogStreaming<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeLogStreamingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeLogStreamingRaw() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest, ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest, ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* streamer) {
                       return this->StreamedSubscribeLogStreamingRaw(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeLogStreamingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeLogStreamingRaw(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeLogStreamingRaw(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::log_streaming::SubscribeLogStreamingRawRequest,::mavsdk::rpc::log_streaming::LogStreamingRawResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeLogStreamingRaw<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartLogStreaming<WithStreamedUnaryMethod_StopLogStreaming<WithSplitStreamingMethod_SubscribeLogStreamingRaw<Service > > > StreamedService;
};

}  // namespace log_streaming
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_log_5fstreaming_2flog_5fstreaming_2eproto__INCLUDED
