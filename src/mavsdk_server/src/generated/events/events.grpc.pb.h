// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: events/events.proto
#ifndef GRPC_events_2fevents_2eproto__INCLUDED
#define GRPC_events_2fevents_2eproto__INCLUDED

#include "events/events.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace events {

// Get event notifications, such as takeoff, or arming checks
class EventsService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.events.EventsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Subscribe to event updates.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::events::EventsResponse>> SubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::events::EventsResponse>>(SubscribeEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::EventsResponse>> AsyncSubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::EventsResponse>>(AsyncSubscribeEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::EventsResponse>> PrepareAsyncSubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::EventsResponse>>(PrepareAsyncSubscribeEventsRaw(context, request, cq));
    }
    //
    // Subscribe to arming check updates.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>> SubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>>(SubscribeHealthAndArmingChecksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>> AsyncSubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>>(AsyncSubscribeHealthAndArmingChecksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>> PrepareAsyncSubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>>(PrepareAsyncSubscribeHealthAndArmingChecksRaw(context, request, cq));
    }
    //
    // Get the latest report.
    virtual ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>> AsyncGetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>>(AsyncGetHealthAndArmingChecksReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>> PrepareAsyncGetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>>(PrepareAsyncGetHealthAndArmingChecksReportRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Subscribe to event updates.
      virtual void SubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::events::EventsResponse>* reactor) = 0;
      //
      // Subscribe to arming check updates.
      virtual void SubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* reactor) = 0;
      //
      // Get the latest report.
      virtual void GetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::events::EventsResponse>* SubscribeEventsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::EventsResponse>* AsyncSubscribeEventsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::EventsResponse>* PrepareAsyncSubscribeEventsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* SubscribeHealthAndArmingChecksRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* AsyncSubscribeHealthAndArmingChecksRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* PrepareAsyncSubscribeHealthAndArmingChecksRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* AsyncGetHealthAndArmingChecksReportRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* PrepareAsyncGetHealthAndArmingChecksReportRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::events::EventsResponse>> SubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::events::EventsResponse>>(SubscribeEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::EventsResponse>> AsyncSubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::EventsResponse>>(AsyncSubscribeEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::EventsResponse>> PrepareAsyncSubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::EventsResponse>>(PrepareAsyncSubscribeEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>> SubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>>(SubscribeHealthAndArmingChecksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>> AsyncSubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>>(AsyncSubscribeHealthAndArmingChecksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>> PrepareAsyncSubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>>(PrepareAsyncSubscribeHealthAndArmingChecksRaw(context, request, cq));
    }
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>> AsyncGetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>>(AsyncGetHealthAndArmingChecksReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>> PrepareAsyncGetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>>(PrepareAsyncGetHealthAndArmingChecksReportRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubscribeEvents(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::events::EventsResponse>* reactor) override;
      void SubscribeHealthAndArmingChecks(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* reactor) override;
      void GetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHealthAndArmingChecksReport(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::mavsdk::rpc::events::EventsResponse>* SubscribeEventsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::EventsResponse>* AsyncSubscribeEventsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::EventsResponse>* PrepareAsyncSubscribeEventsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* SubscribeHealthAndArmingChecksRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* AsyncSubscribeHealthAndArmingChecksRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* PrepareAsyncSubscribeHealthAndArmingChecksRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* AsyncGetHealthAndArmingChecksReportRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* PrepareAsyncGetHealthAndArmingChecksReportRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeHealthAndArmingChecks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHealthAndArmingChecksReport_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Subscribe to event updates.
    virtual ::grpc::Status SubscribeEvents(::grpc::ServerContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* writer);
    //
    // Subscribe to arming check updates.
    virtual ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* writer);
    //
    // Get the latest report.
    virtual ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeEvents() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeEvents(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeEvents(::grpc::ServerContext* context, ::mavsdk::rpc::events::SubscribeEventsRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::events::EventsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeHealthAndArmingChecks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeHealthAndArmingChecks() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubscribeHealthAndArmingChecks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeHealthAndArmingChecks(::grpc::ServerContext* context, ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHealthAndArmingChecksReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHealthAndArmingChecksReport() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetHealthAndArmingChecksReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealthAndArmingChecksReport(::grpc::ServerContext* context, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeEvents<WithAsyncMethod_SubscribeHealthAndArmingChecks<WithAsyncMethod_GetHealthAndArmingChecksReport<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubscribeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeEvents() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::events::SubscribeEventsRequest, ::mavsdk::rpc::events::EventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::events::SubscribeEventsRequest* request) { return this->SubscribeEvents(context, request); }));
    }
    ~WithCallbackMethod_SubscribeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeEvents(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::events::EventsResponse>* SubscribeEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeHealthAndArmingChecks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeHealthAndArmingChecks() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest, ::mavsdk::rpc::events::HealthAndArmingChecksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* request) { return this->SubscribeHealthAndArmingChecks(context, request); }));
    }
    ~WithCallbackMethod_SubscribeHealthAndArmingChecks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* SubscribeHealthAndArmingChecks(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHealthAndArmingChecksReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHealthAndArmingChecksReport() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* request, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* response) { return this->GetHealthAndArmingChecksReport(context, request, response); }));}
    void SetMessageAllocatorFor_GetHealthAndArmingChecksReport(
        ::grpc::MessageAllocator< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHealthAndArmingChecksReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealthAndArmingChecksReport(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubscribeEvents<WithCallbackMethod_SubscribeHealthAndArmingChecks<WithCallbackMethod_GetHealthAndArmingChecksReport<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeEvents() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeEvents(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeHealthAndArmingChecks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeHealthAndArmingChecks() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubscribeHealthAndArmingChecks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHealthAndArmingChecksReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHealthAndArmingChecksReport() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetHealthAndArmingChecksReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeEvents() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeEvents(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeHealthAndArmingChecks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeHealthAndArmingChecks() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubscribeHealthAndArmingChecks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeHealthAndArmingChecks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHealthAndArmingChecksReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHealthAndArmingChecksReport() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetHealthAndArmingChecksReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealthAndArmingChecksReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeEvents() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeEvents(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeEvents(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeHealthAndArmingChecks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeHealthAndArmingChecks() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeHealthAndArmingChecks(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeHealthAndArmingChecks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeHealthAndArmingChecks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHealthAndArmingChecksReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHealthAndArmingChecksReport() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHealthAndArmingChecksReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHealthAndArmingChecksReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealthAndArmingChecksReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHealthAndArmingChecksReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHealthAndArmingChecksReport() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* streamer) {
                       return this->StreamedGetHealthAndArmingChecksReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHealthAndArmingChecksReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHealthAndArmingChecksReport(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest* /*request*/, ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHealthAndArmingChecksReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest,::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetHealthAndArmingChecksReport<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeEvents() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::events::SubscribeEventsRequest, ::mavsdk::rpc::events::EventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::events::SubscribeEventsRequest, ::mavsdk::rpc::events::EventsResponse>* streamer) {
                       return this->StreamedSubscribeEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeEvents(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeEventsRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::EventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::events::SubscribeEventsRequest,::mavsdk::rpc::events::EventsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeHealthAndArmingChecks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeHealthAndArmingChecks() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest, ::mavsdk::rpc::events::HealthAndArmingChecksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest, ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* streamer) {
                       return this->StreamedSubscribeHealthAndArmingChecks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeHealthAndArmingChecks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeHealthAndArmingChecks(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::events::HealthAndArmingChecksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeHealthAndArmingChecks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest,::mavsdk::rpc::events::HealthAndArmingChecksResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeEvents<WithSplitStreamingMethod_SubscribeHealthAndArmingChecks<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeEvents<WithSplitStreamingMethod_SubscribeHealthAndArmingChecks<WithStreamedUnaryMethod_GetHealthAndArmingChecksReport<Service > > > StreamedService;
};

}  // namespace events
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_events_2fevents_2eproto__INCLUDED
