// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: events/events.proto
// Protobuf C++ Version: 5.29.1

#include "events/events.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace events {
              template <typename>
PROTOBUF_CONSTEXPR SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeHealthAndArmingChecksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeHealthAndArmingChecksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeHealthAndArmingChecksRequestDefaultTypeInternal() {}
  union {
    SubscribeHealthAndArmingChecksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeHealthAndArmingChecksRequestDefaultTypeInternal _SubscribeHealthAndArmingChecksRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SubscribeEventsRequest::SubscribeEventsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeEventsRequestDefaultTypeInternal() {}
  union {
    SubscribeEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeEventsRequestDefaultTypeInternal _SubscribeEventsRequest_default_instance_;

inline constexpr HealthComponentReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_present_{false},
        has_error_{false},
        has_warning_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthComponentReport::HealthComponentReport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthComponentReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthComponentReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthComponentReportDefaultTypeInternal() {}
  union {
    HealthComponentReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthComponentReportDefaultTypeInternal _HealthComponentReport_default_instance_;

inline constexpr HealthAndArmingCheckProblem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        health_component_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_level_{static_cast< ::mavsdk::rpc::events::LogLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthAndArmingCheckProblemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckProblemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckProblemDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckProblem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckProblemDefaultTypeInternal _HealthAndArmingCheckProblem_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GetHealthAndArmingChecksReportRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthAndArmingChecksReportRequestDefaultTypeInternal() {}
  union {
    GetHealthAndArmingChecksReportRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthAndArmingChecksReportRequestDefaultTypeInternal _GetHealthAndArmingChecksReportRequest_default_instance_;

inline constexpr EventsResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::events::EventsResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EventsResult::EventsResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EventsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsResultDefaultTypeInternal() {}
  union {
    EventsResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsResultDefaultTypeInternal _EventsResult_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_namespace_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compid_{0u},
        log_level_{static_cast< ::mavsdk::rpc::events::LogLevel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;

inline constexpr HealthAndArmingCheckMode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : problems_{},
        mode_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        can_arm_or_run_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingCheckMode::HealthAndArmingCheckMode(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthAndArmingCheckModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckModeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckModeDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckMode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckModeDefaultTypeInternal _HealthAndArmingCheckMode_default_instance_;

inline constexpr EventsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        event_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EventsResponse::EventsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventsResponseDefaultTypeInternal() {}
  union {
    EventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;

inline constexpr HealthAndArmingCheckReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        health_components_{},
        all_problems_{},
        current_mode_intention_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingCheckReport::HealthAndArmingCheckReport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthAndArmingCheckReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingCheckReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingCheckReportDefaultTypeInternal() {}
  union {
    HealthAndArmingCheckReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingCheckReportDefaultTypeInternal _HealthAndArmingCheckReport_default_instance_;

inline constexpr HealthAndArmingChecksResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        report_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthAndArmingChecksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthAndArmingChecksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthAndArmingChecksResponseDefaultTypeInternal() {}
  union {
    HealthAndArmingChecksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthAndArmingChecksResponseDefaultTypeInternal _HealthAndArmingChecksResponse_default_instance_;

inline constexpr GetHealthAndArmingChecksReportResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        events_result_{nullptr},
        report_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetHealthAndArmingChecksReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthAndArmingChecksReportResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthAndArmingChecksReportResponseDefaultTypeInternal() {}
  union {
    GetHealthAndArmingChecksReportResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthAndArmingChecksReportResponseDefaultTypeInternal _GetHealthAndArmingChecksReportResponse_default_instance_;
}  // namespace events
}  // namespace rpc
}  // namespace mavsdk
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_events_2fevents_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_events_2fevents_2eproto = nullptr;
const ::uint32_t
    TableStruct_events_2fevents_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.compid_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.log_level_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.event_namespace_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::Event, _impl_.event_name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.log_level_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckProblem, _impl_.health_component_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.mode_name_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.can_arm_or_run_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckMode, _impl_.problems_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.is_present_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.has_error_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthComponentReport, _impl_.has_warning_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.current_mode_intention_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.health_components_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingCheckReport, _impl_.all_problems_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResult, _impl_.result_str_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::SubscribeEventsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::EventsResponse, _impl_.event_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::HealthAndArmingChecksResponse, _impl_.report_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_.events_result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse, _impl_.report_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mavsdk::rpc::events::Event)},
        {14, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckProblem)},
        {26, -1, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckMode)},
        {37, -1, -1, sizeof(::mavsdk::rpc::events::HealthComponentReport)},
        {50, 61, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingCheckReport)},
        {64, -1, -1, sizeof(::mavsdk::rpc::events::EventsResult)},
        {74, -1, -1, sizeof(::mavsdk::rpc::events::SubscribeEventsRequest)},
        {82, 91, -1, sizeof(::mavsdk::rpc::events::EventsResponse)},
        {92, -1, -1, sizeof(::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest)},
        {100, 109, -1, sizeof(::mavsdk::rpc::events::HealthAndArmingChecksResponse)},
        {110, -1, -1, sizeof(::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest)},
        {118, 128, -1, sizeof(::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::events::_Event_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingCheckProblem_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingCheckMode_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthComponentReport_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingCheckReport_default_instance_._instance,
    &::mavsdk::rpc::events::_EventsResult_default_instance_._instance,
    &::mavsdk::rpc::events::_SubscribeEventsRequest_default_instance_._instance,
    &::mavsdk::rpc::events::_EventsResponse_default_instance_._instance,
    &::mavsdk::rpc::events::_SubscribeHealthAndArmingChecksRequest_default_instance_._instance,
    &::mavsdk::rpc::events::_HealthAndArmingChecksResponse_default_instance_._instance,
    &::mavsdk::rpc::events::_GetHealthAndArmingChecksReportRequest_default_instance_._instance,
    &::mavsdk::rpc::events::_GetHealthAndArmingChecksReportResponse_default_instance_._instance,
};
const char descriptor_table_protodef_events_2fevents_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023events/events.proto\022\021mavsdk.rpc.events"
    "\032\024mavsdk_options.proto\"\232\001\n\005Event\022\016\n\006comp"
    "id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\023\n\013description"
    "\030\003 \001(\t\022.\n\tlog_level\030\004 \001(\0162\033.mavsdk.rpc.e"
    "vents.LogLevel\022\027\n\017event_namespace\030\005 \001(\t\022"
    "\022\n\nevent_name\030\006 \001(\t\"\215\001\n\033HealthAndArmingC"
    "heckProblem\022\017\n\007message\030\001 \001(\t\022\023\n\013descript"
    "ion\030\002 \001(\t\022.\n\tlog_level\030\003 \001(\0162\033.mavsdk.rp"
    "c.events.LogLevel\022\030\n\020health_component\030\004 "
    "\001(\t\"\207\001\n\030HealthAndArmingCheckMode\022\021\n\tmode"
    "_name\030\001 \001(\t\022\026\n\016can_arm_or_run\030\002 \001(\010\022@\n\010p"
    "roblems\030\003 \003(\0132..mavsdk.rpc.events.Health"
    "AndArmingCheckProblem\"p\n\025HealthComponent"
    "Report\022\014\n\004name\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\022\n\ni"
    "s_present\030\003 \001(\010\022\021\n\thas_error\030\004 \001(\010\022\023\n\013ha"
    "s_warning\030\005 \001(\010\"\364\001\n\032HealthAndArmingCheck"
    "Report\022K\n\026current_mode_intention\030\001 \001(\0132+"
    ".mavsdk.rpc.events.HealthAndArmingCheckM"
    "ode\022C\n\021health_components\030\002 \003(\0132(.mavsdk."
    "rpc.events.HealthComponentReport\022D\n\014all_"
    "problems\030\003 \003(\0132..mavsdk.rpc.events.Healt"
    "hAndArmingCheckProblem\"\254\002\n\014EventsResult\022"
    "6\n\006result\030\001 \001(\0162&.mavsdk.rpc.events.Even"
    "tsResult.Result\022\022\n\nresult_str\030\002 \001(\t\"\317\001\n\006"
    "Result\022\022\n\016RESULT_SUCCESS\020\000\022\030\n\024RESULT_NOT"
    "_AVAILABLE\020\001\022\033\n\027RESULT_CONNECTION_ERROR\020"
    "\002\022\026\n\022RESULT_UNSUPPORTED\020\003\022\021\n\rRESULT_DENI"
    "ED\020\004\022\021\n\rRESULT_FAILED\020\005\022\022\n\016RESULT_TIMEOU"
    "T\020\006\022\024\n\020RESULT_NO_SYSTEM\020\007\022\022\n\016RESULT_UNKN"
    "OWN\020\010\"\030\n\026SubscribeEventsRequest\"9\n\016Event"
    "sResponse\022\'\n\005event\030\001 \001(\0132\030.mavsdk.rpc.ev"
    "ents.Event\"\'\n%SubscribeHealthAndArmingCh"
    "ecksRequest\"^\n\035HealthAndArmingChecksResp"
    "onse\022=\n\006report\030\001 \001(\0132-.mavsdk.rpc.events"
    ".HealthAndArmingCheckReport\"\'\n%GetHealth"
    "AndArmingChecksReportRequest\"\237\001\n&GetHeal"
    "thAndArmingChecksReportResponse\0226\n\revent"
    "s_result\030\001 \001(\0132\037.mavsdk.rpc.events.Event"
    "sResult\022=\n\006report\030\002 \001(\0132-.mavsdk.rpc.eve"
    "nts.HealthAndArmingCheckReport*\273\001\n\010LogLe"
    "vel\022\027\n\023LOG_LEVEL_EMERGENCY\020\000\022\023\n\017LOG_LEVE"
    "L_ALERT\020\001\022\026\n\022LOG_LEVEL_CRITICAL\020\002\022\023\n\017LOG"
    "_LEVEL_ERROR\020\003\022\025\n\021LOG_LEVEL_WARNING\020\004\022\024\n"
    "\020LOG_LEVEL_NOTICE\020\005\022\022\n\016LOG_LEVEL_INFO\020\006\022"
    "\023\n\017LOG_LEVEL_DEBUG\020\0072\255\003\n\rEventsService\022g"
    "\n\017SubscribeEvents\022).mavsdk.rpc.events.Su"
    "bscribeEventsRequest\032!.mavsdk.rpc.events"
    ".EventsResponse\"\004\200\265\030\0000\001\022\224\001\n\036SubscribeHea"
    "lthAndArmingChecks\0228.mavsdk.rpc.events.S"
    "ubscribeHealthAndArmingChecksRequest\0320.m"
    "avsdk.rpc.events.HealthAndArmingChecksRe"
    "sponse\"\004\200\265\030\0000\001\022\233\001\n\036GetHealthAndArmingChe"
    "cksReport\0228.mavsdk.rpc.events.GetHealthA"
    "ndArmingChecksReportRequest\0329.mavsdk.rpc"
    ".events.GetHealthAndArmingChecksReportRe"
    "sponse\"\004\200\265\030\001B\037\n\020io.mavsdk.eventsB\013Events"
    "Protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_events_2fevents_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_events_2fevents_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_events_2fevents_2eproto = {
    false,
    false,
    2253,
    descriptor_table_protodef_events_2fevents_2eproto,
    "events/events.proto",
    &descriptor_table_events_2fevents_2eproto_once,
    descriptor_table_events_2fevents_2eproto_deps,
    1,
    12,
    schemas,
    file_default_instances,
    TableStruct_events_2fevents_2eproto::offsets,
    file_level_enum_descriptors_events_2fevents_2eproto,
    file_level_service_descriptors_events_2fevents_2eproto,
};
namespace mavsdk {
namespace rpc {
namespace events {
const ::google::protobuf::EnumDescriptor* EventsResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_events_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fevents_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EventsResult_Result_internal_data_[] = {
    589824u, 0u, };
bool EventsResult_Result_IsValid(int value) {
  return 0 <= value && value <= 8;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr EventsResult_Result EventsResult::RESULT_SUCCESS;
constexpr EventsResult_Result EventsResult::RESULT_NOT_AVAILABLE;
constexpr EventsResult_Result EventsResult::RESULT_CONNECTION_ERROR;
constexpr EventsResult_Result EventsResult::RESULT_UNSUPPORTED;
constexpr EventsResult_Result EventsResult::RESULT_DENIED;
constexpr EventsResult_Result EventsResult::RESULT_FAILED;
constexpr EventsResult_Result EventsResult::RESULT_TIMEOUT;
constexpr EventsResult_Result EventsResult::RESULT_NO_SYSTEM;
constexpr EventsResult_Result EventsResult::RESULT_UNKNOWN;
constexpr EventsResult_Result EventsResult::Result_MIN;
constexpr EventsResult_Result EventsResult::Result_MAX;
constexpr int EventsResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_events_2fevents_2eproto);
  return file_level_enum_descriptors_events_2fevents_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t LogLevel_internal_data_[] = {
    524288u, 0u, };
bool LogLevel_IsValid(int value) {
  return 0 <= value && value <= 7;
}
// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::Event& from_msg)
      : message_(arena, from.message_),
        description_(arena, from.description_),
        event_namespace_(arena, from.event_namespace_),
        event_name_(arena, from.event_name_),
        _cached_size_{0} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, compid_),
           offsetof(Impl_, log_level_) -
               offsetof(Impl_, compid_) +
               sizeof(Impl_::log_level_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        description_(arena),
        event_namespace_(arena),
        event_name_(arena),
        _cached_size_{0} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, compid_),
           0,
           offsetof(Impl_, log_level_) -
               offsetof(Impl_, compid_) +
               sizeof(Impl_::log_level_));
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.Event)
  SharedDtor(*this);
}
inline void Event::SharedDtor(MessageLite& self) {
  Event& this_ = static_cast<Event&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.event_namespace_.Destroy();
  this_._impl_.event_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Event::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Event(arena);
}
constexpr auto Event::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Event),
                                            alignof(Event));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Event::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Event_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Event::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Event>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Event::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Event>(), &Event::ByteSizeLong,
            &Event::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Event, _impl_._cached_size_),
        false,
    },
    &Event::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Event::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 75, 2> Event::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::Event>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 compid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.compid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.message_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.description_)}},
    // .mavsdk.rpc.events.LogLevel log_level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.log_level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_)}},
    // string event_namespace = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.event_namespace_)}},
    // string event_name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.event_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 compid = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mavsdk.rpc.events.LogLevel log_level = 4;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string event_namespace = 5;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_namespace_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string event_name = 6;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\0\7\13\0\17\12\0"
    "mavsdk.rpc.events.Event"
    "message"
    "description"
    "event_namespace"
    "event_name"
  }},
};

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.Event)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.event_namespace_.ClearToEmpty();
  _impl_.event_name_.ClearToEmpty();
  ::memset(&_impl_.compid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.log_level_) -
      reinterpret_cast<char*>(&_impl_.compid_)) + sizeof(_impl_.log_level_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Event::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Event& this_ = static_cast<const Event&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Event::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Event& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.Event)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 compid = 1;
          if (this_._internal_compid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_compid(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string description = 3;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.description");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .mavsdk.rpc.events.LogLevel log_level = 4;
          if (this_._internal_log_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_log_level(), target);
          }

          // string event_namespace = 5;
          if (!this_._internal_event_namespace().empty()) {
            const std::string& _s = this_._internal_event_namespace();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.event_namespace");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string event_name = 6;
          if (!this_._internal_event_name().empty()) {
            const std::string& _s = this_._internal_event_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.Event.event_name");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.Event)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Event::ByteSizeLong(const MessageLite& base) {
          const Event& this_ = static_cast<const Event&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Event::ByteSizeLong() const {
          const Event& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.Event)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // string description = 3;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string event_namespace = 5;
            if (!this_._internal_event_namespace().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_event_namespace());
            }
            // string event_name = 6;
            if (!this_._internal_event_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_event_name());
            }
            // uint32 compid = 1;
            if (this_._internal_compid() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_compid());
            }
            // .mavsdk.rpc.events.LogLevel log_level = 4;
            if (this_._internal_log_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_log_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Event::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_event_namespace().empty()) {
    _this->_internal_set_event_namespace(from._internal_event_namespace());
  }
  if (!from._internal_event_name().empty()) {
    _this->_internal_set_event_name(from._internal_event_name());
  }
  if (from._internal_compid() != 0) {
    _this->_impl_.compid_ = from._impl_.compid_;
  }
  if (from._internal_log_level() != 0) {
    _this->_impl_.log_level_ = from._impl_.log_level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_namespace_, &other->_impl_.event_namespace_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_name_, &other->_impl_.event_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.log_level_)
      + sizeof(Event::_impl_.log_level_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.compid_)>(
          reinterpret_cast<char*>(&_impl_.compid_),
          reinterpret_cast<char*>(&other->_impl_.compid_));
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthAndArmingCheckProblem::_Internal {
 public:
};

HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckProblem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::HealthAndArmingCheckProblem& from_msg)
      : message_(arena, from.message_),
        description_(arena, from.description_),
        health_component_(arena, from.health_component_),
        _cached_size_{0} {}

HealthAndArmingCheckProblem::HealthAndArmingCheckProblem(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingCheckProblem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthAndArmingCheckProblem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.log_level_ = from._impl_.log_level_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckProblem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        description_(arena),
        health_component_(arena),
        _cached_size_{0} {}

inline void HealthAndArmingCheckProblem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.log_level_ = {};
}
HealthAndArmingCheckProblem::~HealthAndArmingCheckProblem() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  SharedDtor(*this);
}
inline void HealthAndArmingCheckProblem::SharedDtor(MessageLite& self) {
  HealthAndArmingCheckProblem& this_ = static_cast<HealthAndArmingCheckProblem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.health_component_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HealthAndArmingCheckProblem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthAndArmingCheckProblem(arena);
}
constexpr auto HealthAndArmingCheckProblem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HealthAndArmingCheckProblem),
                                            alignof(HealthAndArmingCheckProblem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthAndArmingCheckProblem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthAndArmingCheckProblem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthAndArmingCheckProblem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthAndArmingCheckProblem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthAndArmingCheckProblem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthAndArmingCheckProblem>(), &HealthAndArmingCheckProblem::ByteSizeLong,
            &HealthAndArmingCheckProblem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_._cached_size_),
        false,
    },
    &HealthAndArmingCheckProblem::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthAndArmingCheckProblem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 88, 2> HealthAndArmingCheckProblem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckProblem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string health_component = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.health_component_)}},
    // string message = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.message_)}},
    // string description = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.description_)}},
    // .mavsdk.rpc.events.LogLevel log_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthAndArmingCheckProblem, _impl_.log_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.log_level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mavsdk.rpc.events.LogLevel log_level = 3;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.log_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string health_component = 4;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckProblem, _impl_.health_component_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\7\13\0\20\0\0\0"
    "mavsdk.rpc.events.HealthAndArmingCheckProblem"
    "message"
    "description"
    "health_component"
  }},
};

PROTOBUF_NOINLINE void HealthAndArmingCheckProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.health_component_.ClearToEmpty();
  _impl_.log_level_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthAndArmingCheckProblem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthAndArmingCheckProblem& this_ = static_cast<const HealthAndArmingCheckProblem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthAndArmingCheckProblem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthAndArmingCheckProblem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message = 1;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckProblem.message");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string description = 2;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckProblem.description");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .mavsdk.rpc.events.LogLevel log_level = 3;
          if (this_._internal_log_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_log_level(), target);
          }

          // string health_component = 4;
          if (!this_._internal_health_component().empty()) {
            const std::string& _s = this_._internal_health_component();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckProblem.health_component");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckProblem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthAndArmingCheckProblem::ByteSizeLong(const MessageLite& base) {
          const HealthAndArmingCheckProblem& this_ = static_cast<const HealthAndArmingCheckProblem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthAndArmingCheckProblem::ByteSizeLong() const {
          const HealthAndArmingCheckProblem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 1;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // string description = 2;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string health_component = 4;
            if (!this_._internal_health_component().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_health_component());
            }
            // .mavsdk.rpc.events.LogLevel log_level = 3;
            if (this_._internal_log_level() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_log_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthAndArmingCheckProblem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckProblem*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckProblem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_health_component().empty()) {
    _this->_internal_set_health_component(from._internal_health_component());
  }
  if (from._internal_log_level() != 0) {
    _this->_impl_.log_level_ = from._impl_.log_level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckProblem::CopyFrom(const HealthAndArmingCheckProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthAndArmingCheckProblem::InternalSwap(HealthAndArmingCheckProblem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.health_component_, &other->_impl_.health_component_, arena);
  swap(_impl_.log_level_, other->_impl_.log_level_);
}

::google::protobuf::Metadata HealthAndArmingCheckProblem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthAndArmingCheckMode::_Internal {
 public:
};

HealthAndArmingCheckMode::HealthAndArmingCheckMode(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckMode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::HealthAndArmingCheckMode& from_msg)
      : problems_{visibility, arena, from.problems_},
        mode_name_(arena, from.mode_name_),
        _cached_size_{0} {}

HealthAndArmingCheckMode::HealthAndArmingCheckMode(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingCheckMode& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthAndArmingCheckMode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.can_arm_or_run_ = from._impl_.can_arm_or_run_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckMode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : problems_{visibility, arena},
        mode_name_(arena),
        _cached_size_{0} {}

inline void HealthAndArmingCheckMode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.can_arm_or_run_ = {};
}
HealthAndArmingCheckMode::~HealthAndArmingCheckMode() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckMode)
  SharedDtor(*this);
}
inline void HealthAndArmingCheckMode::SharedDtor(MessageLite& self) {
  HealthAndArmingCheckMode& this_ = static_cast<HealthAndArmingCheckMode&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.mode_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HealthAndArmingCheckMode::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthAndArmingCheckMode(arena);
}
constexpr auto HealthAndArmingCheckMode::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.problems_) +
          decltype(HealthAndArmingCheckMode::_impl_.problems_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(HealthAndArmingCheckMode), alignof(HealthAndArmingCheckMode), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HealthAndArmingCheckMode::PlacementNew_,
                                 sizeof(HealthAndArmingCheckMode),
                                 alignof(HealthAndArmingCheckMode));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthAndArmingCheckMode::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthAndArmingCheckMode_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthAndArmingCheckMode::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthAndArmingCheckMode>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthAndArmingCheckMode::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthAndArmingCheckMode>(), &HealthAndArmingCheckMode::ByteSizeLong,
            &HealthAndArmingCheckMode::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_._cached_size_),
        false,
    },
    &HealthAndArmingCheckMode::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthAndArmingCheckMode::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 60, 2> HealthAndArmingCheckMode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckMode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string mode_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.mode_name_)}},
    // bool can_arm_or_run = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthAndArmingCheckMode, _impl_.can_arm_or_run_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.can_arm_or_run_)}},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.problems_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string mode_name = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.mode_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool can_arm_or_run = 2;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.can_arm_or_run_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckMode, _impl_.problems_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckProblem>()},
  }}, {{
    "\52\11\0\0\0\0\0\0"
    "mavsdk.rpc.events.HealthAndArmingCheckMode"
    "mode_name"
  }},
};

PROTOBUF_NOINLINE void HealthAndArmingCheckMode::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.problems_.Clear();
  _impl_.mode_name_.ClearToEmpty();
  _impl_.can_arm_or_run_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthAndArmingCheckMode::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthAndArmingCheckMode& this_ = static_cast<const HealthAndArmingCheckMode&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthAndArmingCheckMode::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthAndArmingCheckMode& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string mode_name = 1;
          if (!this_._internal_mode_name().empty()) {
            const std::string& _s = this_._internal_mode_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthAndArmingCheckMode.mode_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool can_arm_or_run = 2;
          if (this_._internal_can_arm_or_run() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_can_arm_or_run(), target);
          }

          // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_problems_size());
               i < n; i++) {
            const auto& repfield = this_._internal_problems().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckMode)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthAndArmingCheckMode::ByteSizeLong(const MessageLite& base) {
          const HealthAndArmingCheckMode& this_ = static_cast<const HealthAndArmingCheckMode&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthAndArmingCheckMode::ByteSizeLong() const {
          const HealthAndArmingCheckMode& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem problems = 3;
            {
              total_size += 1UL * this_._internal_problems_size();
              for (const auto& msg : this_._internal_problems()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string mode_name = 1;
            if (!this_._internal_mode_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mode_name());
            }
            // bool can_arm_or_run = 2;
            if (this_._internal_can_arm_or_run() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthAndArmingCheckMode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckMode*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_problems()->MergeFrom(
      from._internal_problems());
  if (!from._internal_mode_name().empty()) {
    _this->_internal_set_mode_name(from._internal_mode_name());
  }
  if (from._internal_can_arm_or_run() != 0) {
    _this->_impl_.can_arm_or_run_ = from._impl_.can_arm_or_run_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckMode::CopyFrom(const HealthAndArmingCheckMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthAndArmingCheckMode::InternalSwap(HealthAndArmingCheckMode* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.problems_.InternalSwap(&other->_impl_.problems_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_name_, &other->_impl_.mode_name_, arena);
        swap(_impl_.can_arm_or_run_, other->_impl_.can_arm_or_run_);
}

::google::protobuf::Metadata HealthAndArmingCheckMode::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthComponentReport::_Internal {
 public:
};

HealthComponentReport::HealthComponentReport(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthComponentReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthComponentReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::HealthComponentReport& from_msg)
      : name_(arena, from.name_),
        label_(arena, from.label_),
        _cached_size_{0} {}

HealthComponentReport::HealthComponentReport(
    ::google::protobuf::Arena* arena,
    const HealthComponentReport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthComponentReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_present_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_present_),
           offsetof(Impl_, has_warning_) -
               offsetof(Impl_, is_present_) +
               sizeof(Impl_::has_warning_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthComponentReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthComponentReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        label_(arena),
        _cached_size_{0} {}

inline void HealthComponentReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_present_),
           0,
           offsetof(Impl_, has_warning_) -
               offsetof(Impl_, is_present_) +
               sizeof(Impl_::has_warning_));
}
HealthComponentReport::~HealthComponentReport() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthComponentReport)
  SharedDtor(*this);
}
inline void HealthComponentReport::SharedDtor(MessageLite& self) {
  HealthComponentReport& this_ = static_cast<HealthComponentReport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.label_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HealthComponentReport::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthComponentReport(arena);
}
constexpr auto HealthComponentReport::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HealthComponentReport),
                                            alignof(HealthComponentReport));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthComponentReport::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthComponentReport_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthComponentReport::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthComponentReport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthComponentReport::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthComponentReport>(), &HealthComponentReport::ByteSizeLong,
            &HealthComponentReport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_._cached_size_),
        false,
    },
    &HealthComponentReport::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthComponentReport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 57, 2> HealthComponentReport::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthComponentReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.name_)}},
    // string label = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.label_)}},
    // bool is_present = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthComponentReport, _impl_.is_present_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_)}},
    // bool has_error = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthComponentReport, _impl_.has_error_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_error_)}},
    // bool has_warning = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthComponentReport, _impl_.has_warning_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string label = 2;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.label_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_present = 3;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_error = 4;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_error_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_warning = 5;
    {PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\47\4\5\0\0\0\0\0"
    "mavsdk.rpc.events.HealthComponentReport"
    "name"
    "label"
  }},
};

PROTOBUF_NOINLINE void HealthComponentReport::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthComponentReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  ::memset(&_impl_.is_present_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_warning_) -
      reinterpret_cast<char*>(&_impl_.is_present_)) + sizeof(_impl_.has_warning_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthComponentReport::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthComponentReport& this_ = static_cast<const HealthComponentReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthComponentReport::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthComponentReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthComponentReport)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthComponentReport.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string label = 2;
          if (!this_._internal_label().empty()) {
            const std::string& _s = this_._internal_label();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.HealthComponentReport.label");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool is_present = 3;
          if (this_._internal_is_present() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_is_present(), target);
          }

          // bool has_error = 4;
          if (this_._internal_has_error() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_has_error(), target);
          }

          // bool has_warning = 5;
          if (this_._internal_has_warning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_has_warning(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthComponentReport)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthComponentReport::ByteSizeLong(const MessageLite& base) {
          const HealthComponentReport& this_ = static_cast<const HealthComponentReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthComponentReport::ByteSizeLong() const {
          const HealthComponentReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthComponentReport)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string label = 2;
            if (!this_._internal_label().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_label());
            }
            // bool is_present = 3;
            if (this_._internal_is_present() != 0) {
              total_size += 2;
            }
            // bool has_error = 4;
            if (this_._internal_has_error() != 0) {
              total_size += 2;
            }
            // bool has_warning = 5;
            if (this_._internal_has_warning() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthComponentReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthComponentReport*>(&to_msg);
  auto& from = static_cast<const HealthComponentReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthComponentReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (from._internal_is_present() != 0) {
    _this->_impl_.is_present_ = from._impl_.is_present_;
  }
  if (from._internal_has_error() != 0) {
    _this->_impl_.has_error_ = from._impl_.has_error_;
  }
  if (from._internal_has_warning() != 0) {
    _this->_impl_.has_warning_ = from._impl_.has_warning_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthComponentReport::CopyFrom(const HealthComponentReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthComponentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthComponentReport::InternalSwap(HealthComponentReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.has_warning_)
      + sizeof(HealthComponentReport::_impl_.has_warning_)
      - PROTOBUF_FIELD_OFFSET(HealthComponentReport, _impl_.is_present_)>(
          reinterpret_cast<char*>(&_impl_.is_present_),
          reinterpret_cast<char*>(&other->_impl_.is_present_));
}

::google::protobuf::Metadata HealthComponentReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthAndArmingCheckReport::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HealthAndArmingCheckReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_._has_bits_);
};

HealthAndArmingCheckReport::HealthAndArmingCheckReport(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::HealthAndArmingCheckReport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        health_components_{visibility, arena, from.health_components_},
        all_problems_{visibility, arena, from.all_problems_} {}

HealthAndArmingCheckReport::HealthAndArmingCheckReport(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingCheckReport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthAndArmingCheckReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_mode_intention_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::HealthAndArmingCheckMode>(
                              arena, *from._impl_.current_mode_intention_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingCheckReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        health_components_{visibility, arena},
        all_problems_{visibility, arena} {}

inline void HealthAndArmingCheckReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.current_mode_intention_ = {};
}
HealthAndArmingCheckReport::~HealthAndArmingCheckReport() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingCheckReport)
  SharedDtor(*this);
}
inline void HealthAndArmingCheckReport::SharedDtor(MessageLite& self) {
  HealthAndArmingCheckReport& this_ = static_cast<HealthAndArmingCheckReport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.current_mode_intention_;
  this_._impl_.~Impl_();
}

inline void* HealthAndArmingCheckReport::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthAndArmingCheckReport(arena);
}
constexpr auto HealthAndArmingCheckReport::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.health_components_) +
          decltype(HealthAndArmingCheckReport::_impl_.health_components_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.all_problems_) +
          decltype(HealthAndArmingCheckReport::_impl_.all_problems_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HealthAndArmingCheckReport), alignof(HealthAndArmingCheckReport), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HealthAndArmingCheckReport::PlacementNew_,
                                 sizeof(HealthAndArmingCheckReport),
                                 alignof(HealthAndArmingCheckReport));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthAndArmingCheckReport::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthAndArmingCheckReport_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthAndArmingCheckReport::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthAndArmingCheckReport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthAndArmingCheckReport::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthAndArmingCheckReport>(), &HealthAndArmingCheckReport::ByteSizeLong,
            &HealthAndArmingCheckReport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_._cached_size_),
        false,
    },
    &HealthAndArmingCheckReport::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthAndArmingCheckReport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> HealthAndArmingCheckReport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.current_mode_intention_)}},
    // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.health_components_)}},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.all_problems_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.current_mode_intention_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.health_components_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingCheckReport, _impl_.all_problems_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckMode>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthComponentReport>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckProblem>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HealthAndArmingCheckReport::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_components_.Clear();
  _impl_.all_problems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.current_mode_intention_ != nullptr);
    _impl_.current_mode_intention_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthAndArmingCheckReport::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthAndArmingCheckReport& this_ = static_cast<const HealthAndArmingCheckReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthAndArmingCheckReport::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthAndArmingCheckReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.current_mode_intention_, this_._impl_.current_mode_intention_->GetCachedSize(), target,
                stream);
          }

          // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_health_components_size());
               i < n; i++) {
            const auto& repfield = this_._internal_health_components().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_all_problems_size());
               i < n; i++) {
            const auto& repfield = this_._internal_all_problems().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingCheckReport)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthAndArmingCheckReport::ByteSizeLong(const MessageLite& base) {
          const HealthAndArmingCheckReport& this_ = static_cast<const HealthAndArmingCheckReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthAndArmingCheckReport::ByteSizeLong() const {
          const HealthAndArmingCheckReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .mavsdk.rpc.events.HealthComponentReport health_components = 2;
            {
              total_size += 1UL * this_._internal_health_components_size();
              for (const auto& msg : this_._internal_health_components()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .mavsdk.rpc.events.HealthAndArmingCheckProblem all_problems = 3;
            {
              total_size += 1UL * this_._internal_all_problems_size();
              for (const auto& msg : this_._internal_all_problems()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .mavsdk.rpc.events.HealthAndArmingCheckMode current_mode_intention = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_mode_intention_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthAndArmingCheckReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthAndArmingCheckReport*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingCheckReport&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_health_components()->MergeFrom(
      from._internal_health_components());
  _this->_internal_mutable_all_problems()->MergeFrom(
      from._internal_all_problems());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.current_mode_intention_ != nullptr);
    if (_this->_impl_.current_mode_intention_ == nullptr) {
      _this->_impl_.current_mode_intention_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::HealthAndArmingCheckMode>(arena, *from._impl_.current_mode_intention_);
    } else {
      _this->_impl_.current_mode_intention_->MergeFrom(*from._impl_.current_mode_intention_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingCheckReport::CopyFrom(const HealthAndArmingCheckReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingCheckReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthAndArmingCheckReport::InternalSwap(HealthAndArmingCheckReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.health_components_.InternalSwap(&other->_impl_.health_components_);
  _impl_.all_problems_.InternalSwap(&other->_impl_.all_problems_);
  swap(_impl_.current_mode_intention_, other->_impl_.current_mode_intention_);
}

::google::protobuf::Metadata HealthAndArmingCheckReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EventsResult::_Internal {
 public:
};

EventsResult::EventsResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.EventsResult)
}
inline PROTOBUF_NDEBUG_INLINE EventsResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::EventsResult& from_msg)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

EventsResult::EventsResult(
    ::google::protobuf::Arena* arena,
    const EventsResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EventsResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.EventsResult)
}
inline PROTOBUF_NDEBUG_INLINE EventsResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void EventsResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
EventsResult::~EventsResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.EventsResult)
  SharedDtor(*this);
}
inline void EventsResult::SharedDtor(MessageLite& self) {
  EventsResult& this_ = static_cast<EventsResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.result_str_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EventsResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EventsResult(arena);
}
constexpr auto EventsResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EventsResult),
                                            alignof(EventsResult));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EventsResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EventsResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EventsResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EventsResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EventsResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EventsResult>(), &EventsResult::ByteSizeLong,
            &EventsResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EventsResult, _impl_._cached_size_),
        false,
    },
    &EventsResult::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EventsResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> EventsResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::EventsResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_str_)}},
    // .mavsdk.rpc.events.EventsResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventsResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.EventsResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(EventsResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\0\12\0\0\0\0\0"
    "mavsdk.rpc.events.EventsResult"
    "result_str"
  }},
};

PROTOBUF_NOINLINE void EventsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.EventsResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EventsResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EventsResult& this_ = static_cast<const EventsResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EventsResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EventsResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.EventsResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .mavsdk.rpc.events.EventsResult.Result result = 1;
          if (this_._internal_result() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_result(), target);
          }

          // string result_str = 2;
          if (!this_._internal_result_str().empty()) {
            const std::string& _s = this_._internal_result_str();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.events.EventsResult.result_str");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.EventsResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EventsResult::ByteSizeLong(const MessageLite& base) {
          const EventsResult& this_ = static_cast<const EventsResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EventsResult::ByteSizeLong() const {
          const EventsResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.EventsResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string result_str = 2;
            if (!this_._internal_result_str().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_result_str());
            }
            // .mavsdk.rpc.events.EventsResult.Result result = 1;
            if (this_._internal_result() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_result());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EventsResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EventsResult*>(&to_msg);
  auto& from = static_cast<const EventsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.EventsResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResult::CopyFrom(const EventsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.EventsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EventsResult::InternalSwap(EventsResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata EventsResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribeEventsRequest::_Internal {
 public:
};

SubscribeEventsRequest::SubscribeEventsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.SubscribeEventsRequest)
}
SubscribeEventsRequest::SubscribeEventsRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeEventsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeEventsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.SubscribeEventsRequest)
}

inline void* SubscribeEventsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeEventsRequest(arena);
}
constexpr auto SubscribeEventsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeEventsRequest),
                                            alignof(SubscribeEventsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeEventsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeEventsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeEventsRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeEventsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeEventsRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeEventsRequest>(), &SubscribeEventsRequest::ByteSizeLong,
            &SubscribeEventsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeEventsRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeEventsRequest::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeEventsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeEventsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::SubscribeEventsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeEventsRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EventsResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EventsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_._has_bits_);
};

EventsResponse::EventsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.EventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::EventsResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EventsResponse::EventsResponse(
    ::google::protobuf::Arena* arena,
    const EventsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EventsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.event_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::Event>(
                              arena, *from._impl_.event_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.EventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EventsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.event_ = {};
}
EventsResponse::~EventsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.EventsResponse)
  SharedDtor(*this);
}
inline void EventsResponse::SharedDtor(MessageLite& self) {
  EventsResponse& this_ = static_cast<EventsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.event_;
  this_._impl_.~Impl_();
}

inline void* EventsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EventsResponse(arena);
}
constexpr auto EventsResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EventsResponse),
                                            alignof(EventsResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EventsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EventsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EventsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EventsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EventsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EventsResponse>(), &EventsResponse::ByteSizeLong,
            &EventsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_._cached_size_),
        false,
    },
    &EventsResponse::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EventsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EventsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::EventsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.events.Event event = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_.event_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.Event event = 1;
    {PROTOBUF_FIELD_OFFSET(EventsResponse, _impl_.event_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::Event>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.EventsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EventsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EventsResponse& this_ = static_cast<const EventsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EventsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EventsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.EventsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.events.Event event = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.event_, this_._impl_.event_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.EventsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EventsResponse::ByteSizeLong(const MessageLite& base) {
          const EventsResponse& this_ = static_cast<const EventsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EventsResponse::ByteSizeLong() const {
          const EventsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.EventsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.events.Event event = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EventsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EventsResponse*>(&to_msg);
  auto& from = static_cast<const EventsResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.EventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.event_ != nullptr);
    if (_this->_impl_.event_ == nullptr) {
      _this->_impl_.event_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::Event>(arena, *from._impl_.event_);
    } else {
      _this->_impl_.event_->MergeFrom(*from._impl_.event_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResponse::CopyFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EventsResponse::InternalSwap(EventsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.event_, other->_impl_.event_);
}

::google::protobuf::Metadata EventsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribeHealthAndArmingChecksRequest::_Internal {
 public:
};

SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest)
}
SubscribeHealthAndArmingChecksRequest::SubscribeHealthAndArmingChecksRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeHealthAndArmingChecksRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeHealthAndArmingChecksRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.SubscribeHealthAndArmingChecksRequest)
}

inline void* SubscribeHealthAndArmingChecksRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeHealthAndArmingChecksRequest(arena);
}
constexpr auto SubscribeHealthAndArmingChecksRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeHealthAndArmingChecksRequest),
                                            alignof(SubscribeHealthAndArmingChecksRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeHealthAndArmingChecksRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeHealthAndArmingChecksRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeHealthAndArmingChecksRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeHealthAndArmingChecksRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeHealthAndArmingChecksRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeHealthAndArmingChecksRequest>(), &SubscribeHealthAndArmingChecksRequest::ByteSizeLong,
            &SubscribeHealthAndArmingChecksRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeHealthAndArmingChecksRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeHealthAndArmingChecksRequest::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeHealthAndArmingChecksRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeHealthAndArmingChecksRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::SubscribeHealthAndArmingChecksRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeHealthAndArmingChecksRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthAndArmingChecksResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HealthAndArmingChecksResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_._has_bits_);
};

HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingChecksResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::HealthAndArmingChecksResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HealthAndArmingChecksResponse::HealthAndArmingChecksResponse(
    ::google::protobuf::Arena* arena,
    const HealthAndArmingChecksResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthAndArmingChecksResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.report_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::HealthAndArmingCheckReport>(
                              arena, *from._impl_.report_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
}
inline PROTOBUF_NDEBUG_INLINE HealthAndArmingChecksResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HealthAndArmingChecksResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.report_ = {};
}
HealthAndArmingChecksResponse::~HealthAndArmingChecksResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  SharedDtor(*this);
}
inline void HealthAndArmingChecksResponse::SharedDtor(MessageLite& self) {
  HealthAndArmingChecksResponse& this_ = static_cast<HealthAndArmingChecksResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.report_;
  this_._impl_.~Impl_();
}

inline void* HealthAndArmingChecksResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthAndArmingChecksResponse(arena);
}
constexpr auto HealthAndArmingChecksResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(HealthAndArmingChecksResponse),
                                            alignof(HealthAndArmingChecksResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthAndArmingChecksResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthAndArmingChecksResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthAndArmingChecksResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthAndArmingChecksResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthAndArmingChecksResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthAndArmingChecksResponse>(), &HealthAndArmingChecksResponse::ByteSizeLong,
            &HealthAndArmingChecksResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_._cached_size_),
        false,
    },
    &HealthAndArmingChecksResponse::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthAndArmingChecksResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> HealthAndArmingChecksResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingChecksResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_.report_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
    {PROTOBUF_FIELD_OFFSET(HealthAndArmingChecksResponse, _impl_.report_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckReport>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HealthAndArmingChecksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.report_ != nullptr);
    _impl_.report_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthAndArmingChecksResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthAndArmingChecksResponse& this_ = static_cast<const HealthAndArmingChecksResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthAndArmingChecksResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthAndArmingChecksResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.report_, this_._impl_.report_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.HealthAndArmingChecksResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthAndArmingChecksResponse::ByteSizeLong(const MessageLite& base) {
          const HealthAndArmingChecksResponse& this_ = static_cast<const HealthAndArmingChecksResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthAndArmingChecksResponse::ByteSizeLong() const {
          const HealthAndArmingChecksResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.report_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthAndArmingChecksResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthAndArmingChecksResponse*>(&to_msg);
  auto& from = static_cast<const HealthAndArmingChecksResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.report_ != nullptr);
    if (_this->_impl_.report_ == nullptr) {
      _this->_impl_.report_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::HealthAndArmingCheckReport>(arena, *from._impl_.report_);
    } else {
      _this->_impl_.report_->MergeFrom(*from._impl_.report_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthAndArmingChecksResponse::CopyFrom(const HealthAndArmingChecksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.HealthAndArmingChecksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthAndArmingChecksResponse::InternalSwap(HealthAndArmingChecksResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.report_, other->_impl_.report_);
}

::google::protobuf::Metadata HealthAndArmingChecksResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetHealthAndArmingChecksReportRequest::_Internal {
 public:
};

GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest)
}
GetHealthAndArmingChecksReportRequest::GetHealthAndArmingChecksReportRequest(
    ::google::protobuf::Arena* arena,
    const GetHealthAndArmingChecksReportRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetHealthAndArmingChecksReportRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportRequest)
}

inline void* GetHealthAndArmingChecksReportRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetHealthAndArmingChecksReportRequest(arena);
}
constexpr auto GetHealthAndArmingChecksReportRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetHealthAndArmingChecksReportRequest),
                                            alignof(GetHealthAndArmingChecksReportRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetHealthAndArmingChecksReportRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetHealthAndArmingChecksReportRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetHealthAndArmingChecksReportRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<GetHealthAndArmingChecksReportRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetHealthAndArmingChecksReportRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<GetHealthAndArmingChecksReportRequest>(), &GetHealthAndArmingChecksReportRequest::ByteSizeLong,
            &GetHealthAndArmingChecksReportRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportRequest, _impl_._cached_size_),
        false,
    },
    &GetHealthAndArmingChecksReportRequest::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetHealthAndArmingChecksReportRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> GetHealthAndArmingChecksReportRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::GetHealthAndArmingChecksReportRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata GetHealthAndArmingChecksReportRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetHealthAndArmingChecksReportResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetHealthAndArmingChecksReportResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_._has_bits_);
};

GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthAndArmingChecksReportResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetHealthAndArmingChecksReportResponse::GetHealthAndArmingChecksReportResponse(
    ::google::protobuf::Arena* arena,
    const GetHealthAndArmingChecksReportResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetHealthAndArmingChecksReportResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.events_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::EventsResult>(
                              arena, *from._impl_.events_result_)
                        : nullptr;
  _impl_.report_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::HealthAndArmingCheckReport>(
                              arena, *from._impl_.report_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthAndArmingChecksReportResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetHealthAndArmingChecksReportResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, events_result_),
           0,
           offsetof(Impl_, report_) -
               offsetof(Impl_, events_result_) +
               sizeof(Impl_::report_));
}
GetHealthAndArmingChecksReportResponse::~GetHealthAndArmingChecksReportResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  SharedDtor(*this);
}
inline void GetHealthAndArmingChecksReportResponse::SharedDtor(MessageLite& self) {
  GetHealthAndArmingChecksReportResponse& this_ = static_cast<GetHealthAndArmingChecksReportResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.events_result_;
  delete this_._impl_.report_;
  this_._impl_.~Impl_();
}

inline void* GetHealthAndArmingChecksReportResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetHealthAndArmingChecksReportResponse(arena);
}
constexpr auto GetHealthAndArmingChecksReportResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetHealthAndArmingChecksReportResponse),
                                            alignof(GetHealthAndArmingChecksReportResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetHealthAndArmingChecksReportResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetHealthAndArmingChecksReportResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetHealthAndArmingChecksReportResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetHealthAndArmingChecksReportResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetHealthAndArmingChecksReportResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetHealthAndArmingChecksReportResponse>(), &GetHealthAndArmingChecksReportResponse::ByteSizeLong,
            &GetHealthAndArmingChecksReportResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_._cached_size_),
        false,
    },
    &GetHealthAndArmingChecksReportResponse::kDescriptorMethods,
    &descriptor_table_events_2fevents_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetHealthAndArmingChecksReportResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetHealthAndArmingChecksReportResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::events::GetHealthAndArmingChecksReportResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_)}},
    // .mavsdk.rpc.events.EventsResult events_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.events.EventsResult events_result = 1;
    {PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
    {PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::EventsResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::events::HealthAndArmingCheckReport>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetHealthAndArmingChecksReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.events_result_ != nullptr);
      _impl_.events_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.report_ != nullptr);
      _impl_.report_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetHealthAndArmingChecksReportResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetHealthAndArmingChecksReportResponse& this_ = static_cast<const GetHealthAndArmingChecksReportResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetHealthAndArmingChecksReportResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetHealthAndArmingChecksReportResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.events.EventsResult events_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.events_result_, this_._impl_.events_result_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.report_, this_._impl_.report_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetHealthAndArmingChecksReportResponse::ByteSizeLong(const MessageLite& base) {
          const GetHealthAndArmingChecksReportResponse& this_ = static_cast<const GetHealthAndArmingChecksReportResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetHealthAndArmingChecksReportResponse::ByteSizeLong() const {
          const GetHealthAndArmingChecksReportResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.events.EventsResult events_result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.events_result_);
            }
            // .mavsdk.rpc.events.HealthAndArmingCheckReport report = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.report_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetHealthAndArmingChecksReportResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetHealthAndArmingChecksReportResponse*>(&to_msg);
  auto& from = static_cast<const GetHealthAndArmingChecksReportResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.events_result_ != nullptr);
      if (_this->_impl_.events_result_ == nullptr) {
        _this->_impl_.events_result_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::EventsResult>(arena, *from._impl_.events_result_);
      } else {
        _this->_impl_.events_result_->MergeFrom(*from._impl_.events_result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.report_ != nullptr);
      if (_this->_impl_.report_ == nullptr) {
        _this->_impl_.report_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::events::HealthAndArmingCheckReport>(arena, *from._impl_.report_);
      } else {
        _this->_impl_.report_->MergeFrom(*from._impl_.report_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHealthAndArmingChecksReportResponse::CopyFrom(const GetHealthAndArmingChecksReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.events.GetHealthAndArmingChecksReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetHealthAndArmingChecksReportResponse::InternalSwap(GetHealthAndArmingChecksReportResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.report_)
      + sizeof(GetHealthAndArmingChecksReportResponse::_impl_.report_)
      - PROTOBUF_FIELD_OFFSET(GetHealthAndArmingChecksReportResponse, _impl_.events_result_)>(
          reinterpret_cast<char*>(&_impl_.events_result_),
          reinterpret_cast<char*>(&other->_impl_.events_result_));
}

::google::protobuf::Metadata GetHealthAndArmingChecksReportResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace events
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_events_2fevents_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
