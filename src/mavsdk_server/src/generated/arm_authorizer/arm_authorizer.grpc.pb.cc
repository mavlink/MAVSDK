// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arm_authorizer/arm_authorizer.proto

#include "arm_authorizer/arm_authorizer.pb.h"
#include "arm_authorizer/arm_authorizer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace arm_authorizer {

static const char* ArmAuthorizerService_method_names[] = {
  "/mavsdk.rpc.arm_authorizer.ArmAuthorizerService/SubscribeArmAuthorization",
  "/mavsdk.rpc.arm_authorizer.ArmAuthorizerService/RespondArmAuthorization",
};

std::unique_ptr< ArmAuthorizerService::Stub> ArmAuthorizerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ArmAuthorizerService::Stub> stub(new ArmAuthorizerService::Stub(channel, options));
  return stub;
}

ArmAuthorizerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubscribeArmAuthorization_(ArmAuthorizerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RespondArmAuthorization_(ArmAuthorizerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* ArmAuthorizerService::Stub::SubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>::Create(channel_.get(), rpcmethod_SubscribeArmAuthorization_, context, request);
}

void ArmAuthorizerService::Stub::async::SubscribeArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeArmAuthorization_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* ArmAuthorizerService::Stub::AsyncSubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeArmAuthorization_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* ArmAuthorizerService::Stub::PrepareAsyncSubscribeArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeArmAuthorization_, context, request, false, nullptr);
}

::grpc::Status ArmAuthorizerService::Stub::RespondArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest& request, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RespondArmAuthorization_, context, request, response);
}

void ArmAuthorizerService::Stub::async::RespondArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespondArmAuthorization_, context, request, response, std::move(f));
}

void ArmAuthorizerService::Stub::async::RespondArmAuthorization(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RespondArmAuthorization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse>* ArmAuthorizerService::Stub::PrepareAsyncRespondArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RespondArmAuthorization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse>* ArmAuthorizerService::Stub::AsyncRespondArmAuthorizationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRespondArmAuthorizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

ArmAuthorizerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmAuthorizerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ArmAuthorizerService::Service, ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>(
          [](ArmAuthorizerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* writer) {
               return service->SubscribeArmAuthorization(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmAuthorizerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmAuthorizerService::Service, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ArmAuthorizerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest* req,
             ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse* resp) {
               return service->RespondArmAuthorization(ctx, req, resp);
             }, this)));
}

ArmAuthorizerService::Service::~Service() {
}

::grpc::Status ArmAuthorizerService::Service::SubscribeArmAuthorization(::grpc::ServerContext* context, const ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::arm_authorizer::SubscribeArmAuthorizationResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmAuthorizerService::Service::RespondArmAuthorization(::grpc::ServerContext* context, const ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationRequest* request, ::mavsdk::rpc::arm_authorizer::RespondArmAuthorizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace arm_authorizer

