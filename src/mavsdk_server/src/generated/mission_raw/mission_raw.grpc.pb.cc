// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mission_raw/mission_raw.proto

#include "mission_raw/mission_raw.pb.h"
#include "mission_raw/mission_raw.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace mission_raw {

static const char* MissionRawService_method_names[] = {
  "/mavsdk.rpc.mission_raw.MissionRawService/UploadMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/UploadGeofence",
  "/mavsdk.rpc.mission_raw.MissionRawService/UploadRallyPoints",
  "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionUpload",
  "/mavsdk.rpc.mission_raw.MissionRawService/DownloadMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/DownloadGeofence",
  "/mavsdk.rpc.mission_raw.MissionRawService/DownloadRallypoints",
  "/mavsdk.rpc.mission_raw.MissionRawService/CancelMissionDownload",
  "/mavsdk.rpc.mission_raw.MissionRawService/StartMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/PauseMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/ClearMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/SetCurrentMissionItem",
  "/mavsdk.rpc.mission_raw.MissionRawService/SubscribeMissionProgress",
  "/mavsdk.rpc.mission_raw.MissionRawService/SubscribeMissionChanged",
  "/mavsdk.rpc.mission_raw.MissionRawService/ImportQgroundcontrolMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/ImportQgroundcontrolMissionFromString",
  "/mavsdk.rpc.mission_raw.MissionRawService/ImportMissionPlannerMission",
  "/mavsdk.rpc.mission_raw.MissionRawService/ImportMissionPlannerMissionFromString",
  "/mavsdk.rpc.mission_raw.MissionRawService/IsMissionFinished",
};

std::unique_ptr< MissionRawService::Stub> MissionRawService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MissionRawService::Stub> stub(new MissionRawService::Stub(channel, options));
  return stub;
}

MissionRawService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadMission_(MissionRawService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadGeofence_(MissionRawService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadRallyPoints_(MissionRawService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelMissionUpload_(MissionRawService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadMission_(MissionRawService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadGeofence_(MissionRawService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadRallypoints_(MissionRawService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelMissionDownload_(MissionRawService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartMission_(MissionRawService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseMission_(MissionRawService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearMission_(MissionRawService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentMissionItem_(MissionRawService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeMissionProgress_(MissionRawService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMissionChanged_(MissionRawService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ImportQgroundcontrolMission_(MissionRawService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportQgroundcontrolMissionFromString_(MissionRawService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportMissionPlannerMission_(MissionRawService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportMissionPlannerMissionFromString_(MissionRawService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsMissionFinished_(MissionRawService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MissionRawService::Stub::UploadMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadMissionRequest& request, ::mavsdk::rpc::mission_raw::UploadMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::UploadMissionRequest, ::mavsdk::rpc::mission_raw::UploadMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadMission_, context, request, response);
}

void MissionRawService::Stub::async::UploadMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadMissionRequest* request, ::mavsdk::rpc::mission_raw::UploadMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::UploadMissionRequest, ::mavsdk::rpc::mission_raw::UploadMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::UploadMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadMissionRequest* request, ::mavsdk::rpc::mission_raw::UploadMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::UploadMissionResponse>* MissionRawService::Stub::PrepareAsyncUploadMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::UploadMissionResponse, ::mavsdk::rpc::mission_raw::UploadMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::UploadMissionResponse>* MissionRawService::Stub::AsyncUploadMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::UploadGeofence(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest& request, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::UploadGeofenceRequest, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadGeofence_, context, request, response);
}

void MissionRawService::Stub::async::UploadGeofence(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest* request, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::UploadGeofenceRequest, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadGeofence_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::UploadGeofence(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest* request, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadGeofence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::UploadGeofenceResponse>* MissionRawService::Stub::PrepareAsyncUploadGeofenceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::UploadGeofenceResponse, ::mavsdk::rpc::mission_raw::UploadGeofenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadGeofence_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::UploadGeofenceResponse>* MissionRawService::Stub::AsyncUploadGeofenceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadGeofenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::UploadRallyPoints(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest& request, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadRallyPoints_, context, request, response);
}

void MissionRawService::Stub::async::UploadRallyPoints(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest* request, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadRallyPoints_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::UploadRallyPoints(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest* request, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadRallyPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse>* MissionRawService::Stub::PrepareAsyncUploadRallyPointsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse, ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadRallyPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse>* MissionRawService::Stub::AsyncUploadRallyPointsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadRallyPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::CancelMissionUpload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest& request, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelMissionUpload_, context, request, response);
}

void MissionRawService::Stub::async::CancelMissionUpload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest* request, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelMissionUpload_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::CancelMissionUpload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest* request, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelMissionUpload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse>* MissionRawService::Stub::PrepareAsyncCancelMissionUploadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse, ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelMissionUpload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse>* MissionRawService::Stub::AsyncCancelMissionUploadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelMissionUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::DownloadMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadMissionRequest& request, ::mavsdk::rpc::mission_raw::DownloadMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::DownloadMissionRequest, ::mavsdk::rpc::mission_raw::DownloadMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadMission_, context, request, response);
}

void MissionRawService::Stub::async::DownloadMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadMissionRequest* request, ::mavsdk::rpc::mission_raw::DownloadMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::DownloadMissionRequest, ::mavsdk::rpc::mission_raw::DownloadMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::DownloadMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadMissionRequest* request, ::mavsdk::rpc::mission_raw::DownloadMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::DownloadMissionResponse>* MissionRawService::Stub::PrepareAsyncDownloadMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::DownloadMissionResponse, ::mavsdk::rpc::mission_raw::DownloadMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::DownloadMissionResponse>* MissionRawService::Stub::AsyncDownloadMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::DownloadGeofence(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest& request, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadGeofence_, context, request, response);
}

void MissionRawService::Stub::async::DownloadGeofence(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest* request, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadGeofence_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::DownloadGeofence(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest* request, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadGeofence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse>* MissionRawService::Stub::PrepareAsyncDownloadGeofenceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse, ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadGeofence_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse>* MissionRawService::Stub::AsyncDownloadGeofenceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadGeofenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::DownloadRallypoints(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest& request, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadRallypoints_, context, request, response);
}

void MissionRawService::Stub::async::DownloadRallypoints(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest* request, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadRallypoints_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::DownloadRallypoints(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest* request, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadRallypoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse>* MissionRawService::Stub::PrepareAsyncDownloadRallypointsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse, ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadRallypoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse>* MissionRawService::Stub::AsyncDownloadRallypointsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadRallypointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::CancelMissionDownload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest& request, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelMissionDownload_, context, request, response);
}

void MissionRawService::Stub::async::CancelMissionDownload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest* request, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelMissionDownload_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::CancelMissionDownload(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest* request, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelMissionDownload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse>* MissionRawService::Stub::PrepareAsyncCancelMissionDownloadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse, ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelMissionDownload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse>* MissionRawService::Stub::AsyncCancelMissionDownloadRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelMissionDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::StartMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::StartMissionRequest& request, ::mavsdk::rpc::mission_raw::StartMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::StartMissionRequest, ::mavsdk::rpc::mission_raw::StartMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartMission_, context, request, response);
}

void MissionRawService::Stub::async::StartMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::StartMissionRequest* request, ::mavsdk::rpc::mission_raw::StartMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::StartMissionRequest, ::mavsdk::rpc::mission_raw::StartMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::StartMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::StartMissionRequest* request, ::mavsdk::rpc::mission_raw::StartMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::StartMissionResponse>* MissionRawService::Stub::PrepareAsyncStartMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::StartMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::StartMissionResponse, ::mavsdk::rpc::mission_raw::StartMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::StartMissionResponse>* MissionRawService::Stub::AsyncStartMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::StartMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::PauseMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::PauseMissionRequest& request, ::mavsdk::rpc::mission_raw::PauseMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::PauseMissionRequest, ::mavsdk::rpc::mission_raw::PauseMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseMission_, context, request, response);
}

void MissionRawService::Stub::async::PauseMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::PauseMissionRequest* request, ::mavsdk::rpc::mission_raw::PauseMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::PauseMissionRequest, ::mavsdk::rpc::mission_raw::PauseMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::PauseMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::PauseMissionRequest* request, ::mavsdk::rpc::mission_raw::PauseMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::PauseMissionResponse>* MissionRawService::Stub::PrepareAsyncPauseMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::PauseMissionResponse, ::mavsdk::rpc::mission_raw::PauseMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::PauseMissionResponse>* MissionRawService::Stub::AsyncPauseMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::ClearMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ClearMissionRequest& request, ::mavsdk::rpc::mission_raw::ClearMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::ClearMissionRequest, ::mavsdk::rpc::mission_raw::ClearMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearMission_, context, request, response);
}

void MissionRawService::Stub::async::ClearMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ClearMissionRequest* request, ::mavsdk::rpc::mission_raw::ClearMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::ClearMissionRequest, ::mavsdk::rpc::mission_raw::ClearMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::ClearMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ClearMissionRequest* request, ::mavsdk::rpc::mission_raw::ClearMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ClearMissionResponse>* MissionRawService::Stub::PrepareAsyncClearMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ClearMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::ClearMissionResponse, ::mavsdk::rpc::mission_raw::ClearMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ClearMissionResponse>* MissionRawService::Stub::AsyncClearMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ClearMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::SetCurrentMissionItem(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest& request, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentMissionItem_, context, request, response);
}

void MissionRawService::Stub::async::SetCurrentMissionItem(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest* request, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentMissionItem_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::SetCurrentMissionItem(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest* request, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentMissionItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse>* MissionRawService::Stub::PrepareAsyncSetCurrentMissionItemRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentMissionItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse>* MissionRawService::Stub::AsyncSetCurrentMissionItemRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentMissionItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::mission_raw::MissionProgressResponse>* MissionRawService::Stub::SubscribeMissionProgressRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_raw::MissionProgressResponse>::Create(channel_.get(), rpcmethod_SubscribeMissionProgress_, context, request);
}

void MissionRawService::Stub::async::SubscribeMissionProgress(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mission_raw::MissionProgressResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_raw::MissionProgressResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMissionProgress_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw::MissionProgressResponse>* MissionRawService::Stub::AsyncSubscribeMissionProgressRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw::MissionProgressResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMissionProgress_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw::MissionProgressResponse>* MissionRawService::Stub::PrepareAsyncSubscribeMissionProgressRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw::MissionProgressResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMissionProgress_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::mission_raw::MissionChangedResponse>* MissionRawService::Stub::SubscribeMissionChangedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::mission_raw::MissionChangedResponse>::Create(channel_.get(), rpcmethod_SubscribeMissionChanged_, context, request);
}

void MissionRawService::Stub::async::SubscribeMissionChanged(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mission_raw::MissionChangedResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::mission_raw::MissionChangedResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMissionChanged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw::MissionChangedResponse>* MissionRawService::Stub::AsyncSubscribeMissionChangedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw::MissionChangedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMissionChanged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::mission_raw::MissionChangedResponse>* MissionRawService::Stub::PrepareAsyncSubscribeMissionChangedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::mission_raw::MissionChangedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMissionChanged_, context, request, false, nullptr);
}

::grpc::Status MissionRawService::Stub::ImportQgroundcontrolMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest& request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportQgroundcontrolMission_, context, request, response);
}

void MissionRawService::Stub::async::ImportQgroundcontrolMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest* request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportQgroundcontrolMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::ImportQgroundcontrolMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest* request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportQgroundcontrolMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse>* MissionRawService::Stub::PrepareAsyncImportQgroundcontrolMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportQgroundcontrolMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse>* MissionRawService::Stub::AsyncImportQgroundcontrolMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportQgroundcontrolMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::ImportQgroundcontrolMissionFromString(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest& request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportQgroundcontrolMissionFromString_, context, request, response);
}

void MissionRawService::Stub::async::ImportQgroundcontrolMissionFromString(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest* request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportQgroundcontrolMissionFromString_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::ImportQgroundcontrolMissionFromString(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest* request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportQgroundcontrolMissionFromString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse>* MissionRawService::Stub::PrepareAsyncImportQgroundcontrolMissionFromStringRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportQgroundcontrolMissionFromString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse>* MissionRawService::Stub::AsyncImportQgroundcontrolMissionFromStringRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportQgroundcontrolMissionFromStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::ImportMissionPlannerMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest& request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportMissionPlannerMission_, context, request, response);
}

void MissionRawService::Stub::async::ImportMissionPlannerMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest* request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportMissionPlannerMission_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::ImportMissionPlannerMission(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest* request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportMissionPlannerMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse>* MissionRawService::Stub::PrepareAsyncImportMissionPlannerMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportMissionPlannerMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse>* MissionRawService::Stub::AsyncImportMissionPlannerMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportMissionPlannerMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::ImportMissionPlannerMissionFromString(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest& request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportMissionPlannerMissionFromString_, context, request, response);
}

void MissionRawService::Stub::async::ImportMissionPlannerMissionFromString(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest* request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportMissionPlannerMissionFromString_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::ImportMissionPlannerMissionFromString(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest* request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportMissionPlannerMissionFromString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse>* MissionRawService::Stub::PrepareAsyncImportMissionPlannerMissionFromStringRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportMissionPlannerMissionFromString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse>* MissionRawService::Stub::AsyncImportMissionPlannerMissionFromStringRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportMissionPlannerMissionFromStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MissionRawService::Stub::IsMissionFinished(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest& request, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsMissionFinished_, context, request, response);
}

void MissionRawService::Stub::async::IsMissionFinished(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest* request, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsMissionFinished_, context, request, response, std::move(f));
}

void MissionRawService::Stub::async::IsMissionFinished(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest* request, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsMissionFinished_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse>* MissionRawService::Stub::PrepareAsyncIsMissionFinishedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse, ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsMissionFinished_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse>* MissionRawService::Stub::AsyncIsMissionFinishedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsMissionFinishedRaw(context, request, cq);
  result->StartCall();
  return result;
}

MissionRawService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::UploadMissionRequest, ::mavsdk::rpc::mission_raw::UploadMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::UploadMissionRequest* req,
             ::mavsdk::rpc::mission_raw::UploadMissionResponse* resp) {
               return service->UploadMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::UploadGeofenceRequest, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest* req,
             ::mavsdk::rpc::mission_raw::UploadGeofenceResponse* resp) {
               return service->UploadGeofence(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest* req,
             ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse* resp) {
               return service->UploadRallyPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest* req,
             ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse* resp) {
               return service->CancelMissionUpload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::DownloadMissionRequest, ::mavsdk::rpc::mission_raw::DownloadMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::DownloadMissionRequest* req,
             ::mavsdk::rpc::mission_raw::DownloadMissionResponse* resp) {
               return service->DownloadMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest* req,
             ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse* resp) {
               return service->DownloadGeofence(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest* req,
             ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse* resp) {
               return service->DownloadRallypoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest* req,
             ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse* resp) {
               return service->CancelMissionDownload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::StartMissionRequest, ::mavsdk::rpc::mission_raw::StartMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::StartMissionRequest* req,
             ::mavsdk::rpc::mission_raw::StartMissionResponse* resp) {
               return service->StartMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::PauseMissionRequest, ::mavsdk::rpc::mission_raw::PauseMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::PauseMissionRequest* req,
             ::mavsdk::rpc::mission_raw::PauseMissionResponse* resp) {
               return service->PauseMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::ClearMissionRequest, ::mavsdk::rpc::mission_raw::ClearMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::ClearMissionRequest* req,
             ::mavsdk::rpc::mission_raw::ClearMissionResponse* resp) {
               return service->ClearMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest* req,
             ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse* resp) {
               return service->SetCurrentMissionItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest, ::mavsdk::rpc::mission_raw::MissionProgressResponse>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_raw::MissionProgressResponse>* writer) {
               return service->SubscribeMissionProgress(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest, ::mavsdk::rpc::mission_raw::MissionChangedResponse>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::mission_raw::MissionChangedResponse>* writer) {
               return service->SubscribeMissionChanged(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest* req,
             ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse* resp) {
               return service->ImportQgroundcontrolMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest* req,
             ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse* resp) {
               return service->ImportQgroundcontrolMissionFromString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest* req,
             ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse* resp) {
               return service->ImportMissionPlannerMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest* req,
             ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse* resp) {
               return service->ImportMissionPlannerMissionFromString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionRawService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionRawService::Service, ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MissionRawService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest* req,
             ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse* resp) {
               return service->IsMissionFinished(ctx, req, resp);
             }, this)));
}

MissionRawService::Service::~Service() {
}

::grpc::Status MissionRawService::Service::UploadMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::UploadMissionRequest* request, ::mavsdk::rpc::mission_raw::UploadMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::UploadGeofence(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::UploadGeofenceRequest* request, ::mavsdk::rpc::mission_raw::UploadGeofenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::UploadRallyPoints(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::UploadRallyPointsRequest* request, ::mavsdk::rpc::mission_raw::UploadRallyPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::CancelMissionUpload(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionUploadRequest* request, ::mavsdk::rpc::mission_raw::CancelMissionUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::DownloadMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::DownloadMissionRequest* request, ::mavsdk::rpc::mission_raw::DownloadMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::DownloadGeofence(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::DownloadGeofenceRequest* request, ::mavsdk::rpc::mission_raw::DownloadGeofenceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::DownloadRallypoints(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::DownloadRallypointsRequest* request, ::mavsdk::rpc::mission_raw::DownloadRallypointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::CancelMissionDownload(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::CancelMissionDownloadRequest* request, ::mavsdk::rpc::mission_raw::CancelMissionDownloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::StartMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::StartMissionRequest* request, ::mavsdk::rpc::mission_raw::StartMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::PauseMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::PauseMissionRequest* request, ::mavsdk::rpc::mission_raw::PauseMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::ClearMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::ClearMissionRequest* request, ::mavsdk::rpc::mission_raw::ClearMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::SetCurrentMissionItem(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::SetCurrentMissionItemRequest* request, ::mavsdk::rpc::mission_raw::SetCurrentMissionItemResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::SubscribeMissionProgress(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionProgressRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_raw::MissionProgressResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::SubscribeMissionChanged(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::SubscribeMissionChangedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mission_raw::MissionChangedResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::ImportQgroundcontrolMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionRequest* request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::ImportQgroundcontrolMissionFromString(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringRequest* request, ::mavsdk::rpc::mission_raw::ImportQgroundcontrolMissionFromStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::ImportMissionPlannerMission(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionRequest* request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::ImportMissionPlannerMissionFromString(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringRequest* request, ::mavsdk::rpc::mission_raw::ImportMissionPlannerMissionFromStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionRawService::Service::IsMissionFinished(::grpc::ServerContext* context, const ::mavsdk::rpc::mission_raw::IsMissionFinishedRequest* request, ::mavsdk::rpc::mission_raw::IsMissionFinishedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace mission_raw

