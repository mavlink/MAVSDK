// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: action_server/action_server.proto
#ifndef GRPC_action_5fserver_2faction_5fserver_2eproto__INCLUDED
#define GRPC_action_5fserver_2faction_5fserver_2eproto__INCLUDED

#include "action_server/action_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace action_server {

// Provide vehicle actions (as a server) such as arming, taking off, and landing.
class ActionServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.action_server.ActionServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe to ARM/DISARM commands
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>> SubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>>(SubscribeArmDisarmRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>> AsyncSubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>>(AsyncSubscribeArmDisarmRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>> PrepareAsyncSubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>>(PrepareAsyncSubscribeArmDisarmRaw(context, request, cq));
    }
    // Subscribe to DO_SET_MODE
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>> SubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>>(SubscribeFlightModeChangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>> AsyncSubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>>(AsyncSubscribeFlightModeChangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>> PrepareAsyncSubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>>(PrepareAsyncSubscribeFlightModeChangeRaw(context, request, cq));
    }
    // Subscribe to takeoff command
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>> SubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>>(SubscribeTakeoffRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>> AsyncSubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>>(AsyncSubscribeTakeoffRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>> PrepareAsyncSubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>>(PrepareAsyncSubscribeTakeoffRaw(context, request, cq));
    }
    // Subscribe to land command
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::LandResponse>> SubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::LandResponse>>(SubscribeLandRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::LandResponse>> AsyncSubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::LandResponse>>(AsyncSubscribeLandRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::LandResponse>> PrepareAsyncSubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::LandResponse>>(PrepareAsyncSubscribeLandRaw(context, request, cq));
    }
    // Subscribe to reboot command
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>> SubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>>(SubscribeRebootRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>> AsyncSubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>>(AsyncSubscribeRebootRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>> PrepareAsyncSubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>>(PrepareAsyncSubscribeRebootRaw(context, request, cq));
    }
    // Subscribe to shutdown command
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>> SubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>>(SubscribeShutdownRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>> AsyncSubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>>(AsyncSubscribeShutdownRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>> PrepareAsyncSubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>>(PrepareAsyncSubscribeShutdownRaw(context, request, cq));
    }
    // Subscribe to terminate command
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>> SubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>>(SubscribeTerminateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>> AsyncSubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>>(AsyncSubscribeTerminateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>> PrepareAsyncSubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>>(PrepareAsyncSubscribeTerminateRaw(context, request, cq));
    }
    // Can the vehicle takeoff
    virtual ::grpc::Status SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>> AsyncSetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>>(AsyncSetAllowTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>> PrepareAsyncSetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>>(PrepareAsyncSetAllowTakeoffRaw(context, request, cq));
    }
    // Can the vehicle arm when requested
    virtual ::grpc::Status SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::mavsdk::rpc::action_server::SetArmableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmableResponse>> AsyncSetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmableResponse>>(AsyncSetArmableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmableResponse>> PrepareAsyncSetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmableResponse>>(PrepareAsyncSetArmableRaw(context, request, cq));
    }
    // Can the vehicle disarm when requested
    virtual ::grpc::Status SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetDisarmableResponse>> AsyncSetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetDisarmableResponse>>(AsyncSetDisarmableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetDisarmableResponse>> PrepareAsyncSetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetDisarmableResponse>>(PrepareAsyncSetDisarmableRaw(context, request, cq));
    }
    // Set which modes the vehicle can transition to (Manual always allowed)
    virtual ::grpc::Status SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>> AsyncSetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>>(AsyncSetAllowableFlightModesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>> PrepareAsyncSetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>>(PrepareAsyncSetAllowableFlightModesRaw(context, request, cq));
    }
    // Get which modes the vehicle can transition to (Manual always allowed)
    virtual ::grpc::Status GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>> AsyncGetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>>(AsyncGetAllowableFlightModesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>> PrepareAsyncGetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>>(PrepareAsyncGetAllowableFlightModesRaw(context, request, cq));
    }
    // Set/override the armed/disarmed state of the vehicle directly, and notify subscribers
    virtual ::grpc::Status SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmedStateResponse>> AsyncSetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmedStateResponse>>(AsyncSetArmedStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmedStateResponse>> PrepareAsyncSetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmedStateResponse>>(PrepareAsyncSetArmedStateRaw(context, request, cq));
    }
    // Set/override the flight mode of the vehicle directly, and notify subscribers
    virtual ::grpc::Status SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetFlightModeResponse>> AsyncSetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetFlightModeResponse>>(AsyncSetFlightModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetFlightModeResponse>> PrepareAsyncSetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetFlightModeResponse>>(PrepareAsyncSetFlightModeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe to ARM/DISARM commands
      virtual void SubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::ArmDisarmResponse>* reactor) = 0;
      // Subscribe to DO_SET_MODE
      virtual void SubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* reactor) = 0;
      // Subscribe to takeoff command
      virtual void SubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::TakeoffResponse>* reactor) = 0;
      // Subscribe to land command
      virtual void SubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::LandResponse>* reactor) = 0;
      // Subscribe to reboot command
      virtual void SubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::RebootResponse>* reactor) = 0;
      // Subscribe to shutdown command
      virtual void SubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::ShutdownResponse>* reactor) = 0;
      // Subscribe to terminate command
      virtual void SubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::TerminateResponse>* reactor) = 0;
      // Can the vehicle takeoff
      virtual void SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Can the vehicle arm when requested
      virtual void SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Can the vehicle disarm when requested
      virtual void SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set which modes the vehicle can transition to (Manual always allowed)
      virtual void SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get which modes the vehicle can transition to (Manual always allowed)
      virtual void GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set/override the armed/disarmed state of the vehicle directly, and notify subscribers
      virtual void SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set/override the flight mode of the vehicle directly, and notify subscribers
      virtual void SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>* SubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>* AsyncSubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ArmDisarmResponse>* PrepareAsyncSubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* SubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* AsyncSubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* PrepareAsyncSubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>* SubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>* AsyncSubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TakeoffResponse>* PrepareAsyncSubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::LandResponse>* SubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::LandResponse>* AsyncSubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::LandResponse>* PrepareAsyncSubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>* SubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>* AsyncSubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::RebootResponse>* PrepareAsyncSubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>* SubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>* AsyncSubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::ShutdownResponse>* PrepareAsyncSubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>* SubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>* AsyncSubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::action_server::TerminateResponse>* PrepareAsyncSubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* AsyncSetAllowTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* PrepareAsyncSetAllowTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmableResponse>* AsyncSetArmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmableResponse>* PrepareAsyncSetArmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetDisarmableResponse>* AsyncSetDisarmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetDisarmableResponse>* PrepareAsyncSetDisarmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* AsyncSetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* PrepareAsyncSetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* AsyncGetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* PrepareAsyncGetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmedStateResponse>* AsyncSetArmedStateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetArmedStateResponse>* PrepareAsyncSetArmedStateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetFlightModeResponse>* AsyncSetFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::action_server::SetFlightModeResponse>* PrepareAsyncSetFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>> SubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>>(SubscribeArmDisarmRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>> AsyncSubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>>(AsyncSubscribeArmDisarmRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>> PrepareAsyncSubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>>(PrepareAsyncSubscribeArmDisarmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>> SubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>>(SubscribeFlightModeChangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>> AsyncSubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>>(AsyncSubscribeFlightModeChangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>> PrepareAsyncSubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>>(PrepareAsyncSubscribeFlightModeChangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::TakeoffResponse>> SubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::TakeoffResponse>>(SubscribeTakeoffRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>> AsyncSubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>>(AsyncSubscribeTakeoffRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>> PrepareAsyncSubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>>(PrepareAsyncSubscribeTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::LandResponse>> SubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::LandResponse>>(SubscribeLandRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>> AsyncSubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>>(AsyncSubscribeLandRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>> PrepareAsyncSubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>>(PrepareAsyncSubscribeLandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::RebootResponse>> SubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::RebootResponse>>(SubscribeRebootRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>> AsyncSubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>>(AsyncSubscribeRebootRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>> PrepareAsyncSubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>>(PrepareAsyncSubscribeRebootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::ShutdownResponse>> SubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::ShutdownResponse>>(SubscribeShutdownRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>> AsyncSubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>>(AsyncSubscribeShutdownRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>> PrepareAsyncSubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>>(PrepareAsyncSubscribeShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::TerminateResponse>> SubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::action_server::TerminateResponse>>(SubscribeTerminateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>> AsyncSubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>>(AsyncSubscribeTerminateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>> PrepareAsyncSubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>>(PrepareAsyncSubscribeTerminateRaw(context, request, cq));
    }
    ::grpc::Status SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>> AsyncSetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>>(AsyncSetAllowTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>> PrepareAsyncSetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>>(PrepareAsyncSetAllowTakeoffRaw(context, request, cq));
    }
    ::grpc::Status SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::mavsdk::rpc::action_server::SetArmableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>> AsyncSetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>>(AsyncSetArmableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>> PrepareAsyncSetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>>(PrepareAsyncSetArmableRaw(context, request, cq));
    }
    ::grpc::Status SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>> AsyncSetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>>(AsyncSetDisarmableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>> PrepareAsyncSetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>>(PrepareAsyncSetDisarmableRaw(context, request, cq));
    }
    ::grpc::Status SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>> AsyncSetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>>(AsyncSetAllowableFlightModesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>> PrepareAsyncSetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>>(PrepareAsyncSetAllowableFlightModesRaw(context, request, cq));
    }
    ::grpc::Status GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>> AsyncGetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>>(AsyncGetAllowableFlightModesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>> PrepareAsyncGetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>>(PrepareAsyncGetAllowableFlightModesRaw(context, request, cq));
    }
    ::grpc::Status SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>> AsyncSetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>>(AsyncSetArmedStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>> PrepareAsyncSetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>>(PrepareAsyncSetArmedStateRaw(context, request, cq));
    }
    ::grpc::Status SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>> AsyncSetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>>(AsyncSetFlightModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>> PrepareAsyncSetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>>(PrepareAsyncSetFlightModeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::ArmDisarmResponse>* reactor) override;
      void SubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* reactor) override;
      void SubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::TakeoffResponse>* reactor) override;
      void SubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::LandResponse>* reactor) override;
      void SubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::RebootResponse>* reactor) override;
      void SubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::ShutdownResponse>* reactor) override;
      void SubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::TerminateResponse>* reactor) override;
      void SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response, std::function<void(::grpc::Status)>) override;
      void SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response, std::function<void(::grpc::Status)>) override;
      void SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response, std::function<void(::grpc::Status)>) override;
      void SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>* SubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>* AsyncSubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>* PrepareAsyncSubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* SubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* AsyncSubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* PrepareAsyncSubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::TakeoffResponse>* SubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>* AsyncSubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>* PrepareAsyncSubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::LandResponse>* SubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>* AsyncSubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>* PrepareAsyncSubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::RebootResponse>* SubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>* AsyncSubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>* PrepareAsyncSubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::ShutdownResponse>* SubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>* AsyncSubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>* PrepareAsyncSubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::action_server::TerminateResponse>* SubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>* AsyncSubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>* PrepareAsyncSubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* AsyncSetAllowTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* PrepareAsyncSetAllowTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>* AsyncSetArmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>* PrepareAsyncSetArmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>* AsyncSetDisarmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>* PrepareAsyncSetDisarmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* AsyncSetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* PrepareAsyncSetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* AsyncGetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* PrepareAsyncGetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>* AsyncSetArmedStateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>* PrepareAsyncSetArmedStateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>* AsyncSetFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>* PrepareAsyncSetFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeArmDisarm_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeFlightModeChange_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeTakeoff_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeLand_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeReboot_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeShutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeTerminate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAllowTakeoff_;
    const ::grpc::internal::RpcMethod rpcmethod_SetArmable_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDisarmable_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAllowableFlightModes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllowableFlightModes_;
    const ::grpc::internal::RpcMethod rpcmethod_SetArmedState_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFlightMode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe to ARM/DISARM commands
    virtual ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* writer);
    // Subscribe to DO_SET_MODE
    virtual ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* writer);
    // Subscribe to takeoff command
    virtual ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* writer);
    // Subscribe to land command
    virtual ::grpc::Status SubscribeLand(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* writer);
    // Subscribe to reboot command
    virtual ::grpc::Status SubscribeReboot(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* writer);
    // Subscribe to shutdown command
    virtual ::grpc::Status SubscribeShutdown(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* writer);
    // Subscribe to terminate command
    virtual ::grpc::Status SubscribeTerminate(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* writer);
    // Can the vehicle takeoff
    virtual ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response);
    // Can the vehicle arm when requested
    virtual ::grpc::Status SetArmable(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response);
    // Can the vehicle disarm when requested
    virtual ::grpc::Status SetDisarmable(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response);
    // Set which modes the vehicle can transition to (Manual always allowed)
    virtual ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response);
    // Get which modes the vehicle can transition to (Manual always allowed)
    virtual ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response);
    // Set/override the armed/disarmed state of the vehicle directly, and notify subscribers
    virtual ::grpc::Status SetArmedState(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response);
    // Set/override the flight mode of the vehicle directly, and notify subscribers
    virtual ::grpc::Status SetFlightMode(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeArmDisarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeArmDisarm() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeArmDisarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeArmDisarm(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeFlightModeChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeFlightModeChange() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubscribeFlightModeChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeFlightModeChange(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeTakeoff() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeTakeoff(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeLand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeLand() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubscribeLand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLand(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeLand(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeLandRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::LandResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeReboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeReboot() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubscribeReboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeReboot(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeReboot(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeRebootRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::RebootResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeShutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeShutdown() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubscribeShutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeShutdown(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeShutdown(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeTerminate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubscribeTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTerminate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeTerminate(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::action_server::TerminateResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAllowTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAllowTakeoff() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetAllowTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllowTakeoff(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetArmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetArmable() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetArmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetArmable(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SetArmableRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::SetArmableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDisarmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDisarmable() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetDisarmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDisarmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDisarmable(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::SetDisarmableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAllowableFlightModes() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllowableFlightModes(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllowableFlightModes() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllowableFlightModes(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetArmedState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetArmedState() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetArmedState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmedState(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetArmedState(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::SetArmedStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFlightMode() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFlightMode(::grpc::ServerContext* context, ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::action_server::SetFlightModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeArmDisarm<WithAsyncMethod_SubscribeFlightModeChange<WithAsyncMethod_SubscribeTakeoff<WithAsyncMethod_SubscribeLand<WithAsyncMethod_SubscribeReboot<WithAsyncMethod_SubscribeShutdown<WithAsyncMethod_SubscribeTerminate<WithAsyncMethod_SetAllowTakeoff<WithAsyncMethod_SetArmable<WithAsyncMethod_SetDisarmable<WithAsyncMethod_SetAllowableFlightModes<WithAsyncMethod_GetAllowableFlightModes<WithAsyncMethod_SetArmedState<WithAsyncMethod_SetFlightMode<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubscribeArmDisarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeArmDisarm() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest, ::mavsdk::rpc::action_server::ArmDisarmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request) { return this->SubscribeArmDisarm(context, request); }));
    }
    ~WithCallbackMethod_SubscribeArmDisarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::ArmDisarmResponse>* SubscribeArmDisarm(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeFlightModeChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeFlightModeChange() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest, ::mavsdk::rpc::action_server::FlightModeChangeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request) { return this->SubscribeFlightModeChange(context, request); }));
    }
    ~WithCallbackMethod_SubscribeFlightModeChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* SubscribeFlightModeChange(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeTakeoff() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeTakeoffRequest, ::mavsdk::rpc::action_server::TakeoffResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request) { return this->SubscribeTakeoff(context, request); }));
    }
    ~WithCallbackMethod_SubscribeTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::TakeoffResponse>* SubscribeTakeoff(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeLand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeLand() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeLandRequest, ::mavsdk::rpc::action_server::LandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest* request) { return this->SubscribeLand(context, request); }));
    }
    ~WithCallbackMethod_SubscribeLand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLand(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::LandResponse>* SubscribeLand(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeReboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeReboot() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeRebootRequest, ::mavsdk::rpc::action_server::RebootResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* request) { return this->SubscribeReboot(context, request); }));
    }
    ~WithCallbackMethod_SubscribeReboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeReboot(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::RebootResponse>* SubscribeReboot(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeShutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeShutdown() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeShutdownRequest, ::mavsdk::rpc::action_server::ShutdownResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request) { return this->SubscribeShutdown(context, request); }));
    }
    ~WithCallbackMethod_SubscribeShutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeShutdown(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::ShutdownResponse>* SubscribeShutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeTerminate() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::action_server::SubscribeTerminateRequest, ::mavsdk::rpc::action_server::TerminateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request) { return this->SubscribeTerminate(context, request); }));
    }
    ~WithCallbackMethod_SubscribeTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTerminate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::action_server::TerminateResponse>* SubscribeTerminate(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAllowTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAllowTakeoff() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response) { return this->SetAllowTakeoff(context, request, response); }));}
    void SetMessageAllocatorFor_SetAllowTakeoff(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAllowTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAllowTakeoff(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetArmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetArmable() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response) { return this->SetArmable(context, request, response); }));}
    void SetMessageAllocatorFor_SetArmable(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetArmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetArmable(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetDisarmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetDisarmable() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response) { return this->SetDisarmable(context, request, response); }));}
    void SetMessageAllocatorFor_SetDisarmable(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetDisarmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDisarmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDisarmable(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAllowableFlightModes() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response) { return this->SetAllowableFlightModes(context, request, response); }));}
    void SetMessageAllocatorFor_SetAllowableFlightModes(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAllowableFlightModes(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllowableFlightModes() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response) { return this->GetAllowableFlightModes(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllowableFlightModes(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllowableFlightModes(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetArmedState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetArmedState() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response) { return this->SetArmedState(context, request, response); }));}
    void SetMessageAllocatorFor_SetArmedState(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetArmedState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmedState(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetArmedState(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetFlightMode() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response) { return this->SetFlightMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetFlightMode(
        ::grpc::MessageAllocator< ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFlightMode(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubscribeArmDisarm<WithCallbackMethod_SubscribeFlightModeChange<WithCallbackMethod_SubscribeTakeoff<WithCallbackMethod_SubscribeLand<WithCallbackMethod_SubscribeReboot<WithCallbackMethod_SubscribeShutdown<WithCallbackMethod_SubscribeTerminate<WithCallbackMethod_SetAllowTakeoff<WithCallbackMethod_SetArmable<WithCallbackMethod_SetDisarmable<WithCallbackMethod_SetAllowableFlightModes<WithCallbackMethod_GetAllowableFlightModes<WithCallbackMethod_SetArmedState<WithCallbackMethod_SetFlightMode<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeArmDisarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeArmDisarm() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeArmDisarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeFlightModeChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeFlightModeChange() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubscribeFlightModeChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeTakeoff() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeLand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeLand() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubscribeLand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLand(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeReboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeReboot() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubscribeReboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeReboot(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeShutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeShutdown() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubscribeShutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeShutdown(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeTerminate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubscribeTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTerminate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAllowTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAllowTakeoff() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetAllowTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetArmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetArmable() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetArmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDisarmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDisarmable() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetDisarmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDisarmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAllowableFlightModes() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllowableFlightModes() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetArmedState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetArmedState() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetArmedState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmedState(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFlightMode() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeArmDisarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeArmDisarm() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeArmDisarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeArmDisarm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeFlightModeChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeFlightModeChange() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubscribeFlightModeChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeFlightModeChange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeTakeoff() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeTakeoff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeLand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeLand() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubscribeLand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLand(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeLand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeReboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeReboot() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubscribeReboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeReboot(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeReboot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeShutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeShutdown() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubscribeShutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeShutdown(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeTerminate() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubscribeTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTerminate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeTerminate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAllowTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAllowTakeoff() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetAllowTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllowTakeoff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetArmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetArmable() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetArmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetArmable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDisarmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDisarmable() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetDisarmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDisarmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDisarmable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAllowableFlightModes() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAllowableFlightModes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllowableFlightModes() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllowableFlightModes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetArmedState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetArmedState() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetArmedState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmedState(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetArmedState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFlightMode() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFlightMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeArmDisarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeArmDisarm() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeArmDisarm(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeArmDisarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeArmDisarm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeFlightModeChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeFlightModeChange() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeFlightModeChange(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeFlightModeChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeFlightModeChange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeTakeoff() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeTakeoff(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeTakeoff(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeLand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeLand() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeLand(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeLand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLand(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeLand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeReboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeReboot() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeReboot(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeReboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeReboot(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeReboot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeShutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeShutdown() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeShutdown(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeShutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeShutdown(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeShutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeTerminate() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeTerminate(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeTerminate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeTerminate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAllowTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAllowTakeoff() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAllowTakeoff(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAllowTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAllowTakeoff(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetArmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetArmable() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetArmable(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetArmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetArmable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetDisarmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetDisarmable() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDisarmable(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetDisarmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDisarmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetDisarmable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAllowableFlightModes() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAllowableFlightModes(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAllowableFlightModes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllowableFlightModes() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllowableFlightModes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllowableFlightModes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetArmedState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetArmedState() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetArmedState(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetArmedState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetArmedState(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetArmedState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetFlightMode() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFlightMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFlightMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAllowTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAllowTakeoff() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* streamer) {
                       return this->StreamedSetAllowTakeoff(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAllowTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAllowTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAllowTakeoff(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest,::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetArmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetArmable() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse>* streamer) {
                       return this->StreamedSetArmable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetArmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetArmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetArmable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::SetArmableRequest,::mavsdk::rpc::action_server::SetArmableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDisarmable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDisarmable() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse>* streamer) {
                       return this->StreamedSetDisarmable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDisarmable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDisarmable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetDisarmableRequest* /*request*/, ::mavsdk::rpc::action_server::SetDisarmableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDisarmable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::SetDisarmableRequest,::mavsdk::rpc::action_server::SetDisarmableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAllowableFlightModes() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* streamer) {
                       return this->StreamedSetAllowableFlightModes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAllowableFlightModes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest,::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllowableFlightModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllowableFlightModes() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* streamer) {
                       return this->StreamedGetAllowableFlightModes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllowableFlightModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllowableFlightModes(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* /*request*/, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllowableFlightModes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest,::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetArmedState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetArmedState() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse>* streamer) {
                       return this->StreamedSetArmedState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetArmedState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetArmedState(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetArmedStateRequest* /*request*/, ::mavsdk::rpc::action_server::SetArmedStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetArmedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::SetArmedStateRequest,::mavsdk::rpc::action_server::SetArmedStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFlightMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFlightMode() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse>* streamer) {
                       return this->StreamedSetFlightMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFlightMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFlightMode(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SetFlightModeRequest* /*request*/, ::mavsdk::rpc::action_server::SetFlightModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFlightMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::action_server::SetFlightModeRequest,::mavsdk::rpc::action_server::SetFlightModeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetAllowTakeoff<WithStreamedUnaryMethod_SetArmable<WithStreamedUnaryMethod_SetDisarmable<WithStreamedUnaryMethod_SetAllowableFlightModes<WithStreamedUnaryMethod_GetAllowableFlightModes<WithStreamedUnaryMethod_SetArmedState<WithStreamedUnaryMethod_SetFlightMode<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeArmDisarm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeArmDisarm() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest, ::mavsdk::rpc::action_server::ArmDisarmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest, ::mavsdk::rpc::action_server::ArmDisarmResponse>* streamer) {
                       return this->StreamedSubscribeArmDisarm(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeArmDisarm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeArmDisarm(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeArmDisarm(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest,::mavsdk::rpc::action_server::ArmDisarmResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeFlightModeChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeFlightModeChange() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest, ::mavsdk::rpc::action_server::FlightModeChangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest, ::mavsdk::rpc::action_server::FlightModeChangeResponse>* streamer) {
                       return this->StreamedSubscribeFlightModeChange(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeFlightModeChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeFlightModeChange(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeFlightModeChange(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest,::mavsdk::rpc::action_server::FlightModeChangeResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeTakeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeTakeoff() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeTakeoffRequest, ::mavsdk::rpc::action_server::TakeoffResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeTakeoffRequest, ::mavsdk::rpc::action_server::TakeoffResponse>* streamer) {
                       return this->StreamedSubscribeTakeoff(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeTakeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeTakeoff(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeTakeoff(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeTakeoffRequest,::mavsdk::rpc::action_server::TakeoffResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeLand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeLand() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeLandRequest, ::mavsdk::rpc::action_server::LandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeLandRequest, ::mavsdk::rpc::action_server::LandResponse>* streamer) {
                       return this->StreamedSubscribeLand(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeLand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeLand(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeLandRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeLand(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeLandRequest,::mavsdk::rpc::action_server::LandResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeReboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeReboot() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeRebootRequest, ::mavsdk::rpc::action_server::RebootResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeRebootRequest, ::mavsdk::rpc::action_server::RebootResponse>* streamer) {
                       return this->StreamedSubscribeReboot(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeReboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeReboot(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeReboot(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeRebootRequest,::mavsdk::rpc::action_server::RebootResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeShutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeShutdown() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeShutdownRequest, ::mavsdk::rpc::action_server::ShutdownResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeShutdownRequest, ::mavsdk::rpc::action_server::ShutdownResponse>* streamer) {
                       return this->StreamedSubscribeShutdown(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeShutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeShutdown(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeShutdown(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeShutdownRequest,::mavsdk::rpc::action_server::ShutdownResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeTerminate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeTerminate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::action_server::SubscribeTerminateRequest, ::mavsdk::rpc::action_server::TerminateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::action_server::SubscribeTerminateRequest, ::mavsdk::rpc::action_server::TerminateResponse>* streamer) {
                       return this->StreamedSubscribeTerminate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeTerminate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeTerminate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeTerminate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::action_server::SubscribeTerminateRequest,::mavsdk::rpc::action_server::TerminateResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeArmDisarm<WithSplitStreamingMethod_SubscribeFlightModeChange<WithSplitStreamingMethod_SubscribeTakeoff<WithSplitStreamingMethod_SubscribeLand<WithSplitStreamingMethod_SubscribeReboot<WithSplitStreamingMethod_SubscribeShutdown<WithSplitStreamingMethod_SubscribeTerminate<Service > > > > > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeArmDisarm<WithSplitStreamingMethod_SubscribeFlightModeChange<WithSplitStreamingMethod_SubscribeTakeoff<WithSplitStreamingMethod_SubscribeLand<WithSplitStreamingMethod_SubscribeReboot<WithSplitStreamingMethod_SubscribeShutdown<WithSplitStreamingMethod_SubscribeTerminate<WithStreamedUnaryMethod_SetAllowTakeoff<WithStreamedUnaryMethod_SetArmable<WithStreamedUnaryMethod_SetDisarmable<WithStreamedUnaryMethod_SetAllowableFlightModes<WithStreamedUnaryMethod_GetAllowableFlightModes<WithStreamedUnaryMethod_SetArmedState<WithStreamedUnaryMethod_SetFlightMode<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace action_server
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_action_5fserver_2faction_5fserver_2eproto__INCLUDED
