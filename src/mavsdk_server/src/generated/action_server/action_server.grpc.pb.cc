// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: action_server/action_server.proto

#include "action_server/action_server.pb.h"
#include "action_server/action_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace action_server {

static const char* ActionServerService_method_names[] = {
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeArmDisarm",
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeFlightModeChange",
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeTakeoff",
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeLand",
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeReboot",
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeShutdown",
  "/mavsdk.rpc.action_server.ActionServerService/SubscribeTerminate",
  "/mavsdk.rpc.action_server.ActionServerService/SetAllowTakeoff",
  "/mavsdk.rpc.action_server.ActionServerService/SetArmable",
  "/mavsdk.rpc.action_server.ActionServerService/SetDisarmable",
  "/mavsdk.rpc.action_server.ActionServerService/SetAllowableFlightModes",
  "/mavsdk.rpc.action_server.ActionServerService/GetAllowableFlightModes",
  "/mavsdk.rpc.action_server.ActionServerService/SetArmedState",
  "/mavsdk.rpc.action_server.ActionServerService/SetFlightMode",
};

std::unique_ptr< ActionServerService::Stub> ActionServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ActionServerService::Stub> stub(new ActionServerService::Stub(channel, options));
  return stub;
}

ActionServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubscribeArmDisarm_(ActionServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeFlightModeChange_(ActionServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeTakeoff_(ActionServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeLand_(ActionServerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeReboot_(ActionServerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeShutdown_(ActionServerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeTerminate_(ActionServerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetAllowTakeoff_(ActionServerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetArmable_(ActionServerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDisarmable_(ActionServerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAllowableFlightModes_(ActionServerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllowableFlightModes_(ActionServerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetArmedState_(ActionServerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFlightMode_(ActionServerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>* ActionServerService::Stub::SubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::ArmDisarmResponse>::Create(channel_.get(), rpcmethod_SubscribeArmDisarm_, context, request);
}

void ActionServerService::Stub::async::SubscribeArmDisarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::ArmDisarmResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::ArmDisarmResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeArmDisarm_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>* ActionServerService::Stub::AsyncSubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::ArmDisarmResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeArmDisarm_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ArmDisarmResponse>* ActionServerService::Stub::PrepareAsyncSubscribeArmDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::ArmDisarmResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeArmDisarm_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* ActionServerService::Stub::SubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::FlightModeChangeResponse>::Create(channel_.get(), rpcmethod_SubscribeFlightModeChange_, context, request);
}

void ActionServerService::Stub::async::SubscribeFlightModeChange(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::FlightModeChangeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeFlightModeChange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* ActionServerService::Stub::AsyncSubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::FlightModeChangeResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeFlightModeChange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* ActionServerService::Stub::PrepareAsyncSubscribeFlightModeChangeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::FlightModeChangeResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeFlightModeChange_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::action_server::TakeoffResponse>* ActionServerService::Stub::SubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::TakeoffResponse>::Create(channel_.get(), rpcmethod_SubscribeTakeoff_, context, request);
}

void ActionServerService::Stub::async::SubscribeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::TakeoffResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::TakeoffResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeTakeoff_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>* ActionServerService::Stub::AsyncSubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::TakeoffResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeTakeoff_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TakeoffResponse>* ActionServerService::Stub::PrepareAsyncSubscribeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::TakeoffResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeTakeoff_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::action_server::LandResponse>* ActionServerService::Stub::SubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::LandResponse>::Create(channel_.get(), rpcmethod_SubscribeLand_, context, request);
}

void ActionServerService::Stub::async::SubscribeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::LandResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::LandResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeLand_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>* ActionServerService::Stub::AsyncSubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::LandResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeLand_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::LandResponse>* ActionServerService::Stub::PrepareAsyncSubscribeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::LandResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeLand_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::action_server::RebootResponse>* ActionServerService::Stub::SubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::RebootResponse>::Create(channel_.get(), rpcmethod_SubscribeReboot_, context, request);
}

void ActionServerService::Stub::async::SubscribeReboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::RebootResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::RebootResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeReboot_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>* ActionServerService::Stub::AsyncSubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::RebootResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeReboot_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::RebootResponse>* ActionServerService::Stub::PrepareAsyncSubscribeRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::RebootResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeReboot_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::action_server::ShutdownResponse>* ActionServerService::Stub::SubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::ShutdownResponse>::Create(channel_.get(), rpcmethod_SubscribeShutdown_, context, request);
}

void ActionServerService::Stub::async::SubscribeShutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::ShutdownResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::ShutdownResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeShutdown_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>* ActionServerService::Stub::AsyncSubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::ShutdownResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeShutdown_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::ShutdownResponse>* ActionServerService::Stub::PrepareAsyncSubscribeShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::ShutdownResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeShutdown_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::action_server::TerminateResponse>* ActionServerService::Stub::SubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::action_server::TerminateResponse>::Create(channel_.get(), rpcmethod_SubscribeTerminate_, context, request);
}

void ActionServerService::Stub::async::SubscribeTerminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::action_server::TerminateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::action_server::TerminateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeTerminate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>* ActionServerService::Stub::AsyncSubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::TerminateResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeTerminate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::action_server::TerminateResponse>* ActionServerService::Stub::PrepareAsyncSubscribeTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::action_server::TerminateResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeTerminate_, context, request, false, nullptr);
}

::grpc::Status ActionServerService::Stub::SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAllowTakeoff_, context, request, response);
}

void ActionServerService::Stub::async::SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAllowTakeoff_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::SetAllowTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAllowTakeoff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* ActionServerService::Stub::PrepareAsyncSetAllowTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse, ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAllowTakeoff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowTakeoffResponse>* ActionServerService::Stub::AsyncSetAllowTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAllowTakeoffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionServerService::Stub::SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::mavsdk::rpc::action_server::SetArmableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetArmable_, context, request, response);
}

void ActionServerService::Stub::async::SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArmable_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::SetArmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArmable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>* ActionServerService::Stub::PrepareAsyncSetArmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::SetArmableResponse, ::mavsdk::rpc::action_server::SetArmableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetArmable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmableResponse>* ActionServerService::Stub::AsyncSetArmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetArmableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionServerService::Stub::SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDisarmable_, context, request, response);
}

void ActionServerService::Stub::async::SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDisarmable_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::SetDisarmable(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDisarmable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>* ActionServerService::Stub::PrepareAsyncSetDisarmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::SetDisarmableResponse, ::mavsdk::rpc::action_server::SetDisarmableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDisarmable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetDisarmableResponse>* ActionServerService::Stub::AsyncSetDisarmableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDisarmableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionServerService::Stub::SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAllowableFlightModes_, context, request, response);
}

void ActionServerService::Stub::async::SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAllowableFlightModes_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::SetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAllowableFlightModes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* ActionServerService::Stub::PrepareAsyncSetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse, ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAllowableFlightModes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse>* ActionServerService::Stub::AsyncSetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAllowableFlightModesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionServerService::Stub::GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllowableFlightModes_, context, request, response);
}

void ActionServerService::Stub::async::GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllowableFlightModes_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::GetAllowableFlightModes(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllowableFlightModes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* ActionServerService::Stub::PrepareAsyncGetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse, ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllowableFlightModes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse>* ActionServerService::Stub::AsyncGetAllowableFlightModesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllowableFlightModesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionServerService::Stub::SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetArmedState_, context, request, response);
}

void ActionServerService::Stub::async::SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArmedState_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::SetArmedState(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetArmedState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>* ActionServerService::Stub::PrepareAsyncSetArmedStateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::SetArmedStateResponse, ::mavsdk::rpc::action_server::SetArmedStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetArmedState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetArmedStateResponse>* ActionServerService::Stub::AsyncSetArmedStateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetArmedStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionServerService::Stub::SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFlightMode_, context, request, response);
}

void ActionServerService::Stub::async::SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFlightMode_, context, request, response, std::move(f));
}

void ActionServerService::Stub::async::SetFlightMode(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFlightMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>* ActionServerService::Stub::PrepareAsyncSetFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action_server::SetFlightModeResponse, ::mavsdk::rpc::action_server::SetFlightModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFlightMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action_server::SetFlightModeResponse>* ActionServerService::Stub::AsyncSetFlightModeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFlightModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ActionServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest, ::mavsdk::rpc::action_server::ArmDisarmResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::ArmDisarmResponse>* writer) {
               return service->SubscribeArmDisarm(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest, ::mavsdk::rpc::action_server::FlightModeChangeResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::FlightModeChangeResponse>* writer) {
               return service->SubscribeFlightModeChange(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeTakeoffRequest, ::mavsdk::rpc::action_server::TakeoffResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::TakeoffResponse>* writer) {
               return service->SubscribeTakeoff(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeLandRequest, ::mavsdk::rpc::action_server::LandResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeLandRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::LandResponse>* writer) {
               return service->SubscribeLand(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeRebootRequest, ::mavsdk::rpc::action_server::RebootResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeRebootRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::RebootResponse>* writer) {
               return service->SubscribeReboot(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeShutdownRequest, ::mavsdk::rpc::action_server::ShutdownResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::ShutdownResponse>* writer) {
               return service->SubscribeShutdown(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SubscribeTerminateRequest, ::mavsdk::rpc::action_server::TerminateResponse>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::action_server::TerminateResponse>* writer) {
               return service->SubscribeTerminate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SetAllowTakeoffRequest, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* req,
             ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* resp) {
               return service->SetAllowTakeoff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SetArmableRequest, ::mavsdk::rpc::action_server::SetArmableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SetArmableRequest* req,
             ::mavsdk::rpc::action_server::SetArmableResponse* resp) {
               return service->SetArmable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SetDisarmableRequest, ::mavsdk::rpc::action_server::SetDisarmableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SetDisarmableRequest* req,
             ::mavsdk::rpc::action_server::SetDisarmableResponse* resp) {
               return service->SetDisarmable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* req,
             ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* resp) {
               return service->SetAllowableFlightModes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* req,
             ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* resp) {
               return service->GetAllowableFlightModes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SetArmedStateRequest, ::mavsdk::rpc::action_server::SetArmedStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SetArmedStateRequest* req,
             ::mavsdk::rpc::action_server::SetArmedStateResponse* resp) {
               return service->SetArmedState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionServerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionServerService::Service, ::mavsdk::rpc::action_server::SetFlightModeRequest, ::mavsdk::rpc::action_server::SetFlightModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action_server::SetFlightModeRequest* req,
             ::mavsdk::rpc::action_server::SetFlightModeResponse* resp) {
               return service->SetFlightMode(ctx, req, resp);
             }, this)));
}

ActionServerService::Service::~Service() {
}

::grpc::Status ActionServerService::Service::SubscribeArmDisarm(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeArmDisarmRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ArmDisarmResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SubscribeFlightModeChange(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeFlightModeChangeRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::FlightModeChangeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SubscribeTakeoff(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeTakeoffRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TakeoffResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SubscribeLand(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeLandRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::LandResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SubscribeReboot(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeRebootRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::RebootResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SubscribeShutdown(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeShutdownRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::ShutdownResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SubscribeTerminate(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SubscribeTerminateRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::action_server::TerminateResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SetAllowTakeoff(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetAllowTakeoffRequest* request, ::mavsdk::rpc::action_server::SetAllowTakeoffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SetArmable(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetArmableRequest* request, ::mavsdk::rpc::action_server::SetArmableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SetDisarmable(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetDisarmableRequest* request, ::mavsdk::rpc::action_server::SetDisarmableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SetAllowableFlightModes(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::SetAllowableFlightModesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::GetAllowableFlightModes(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::GetAllowableFlightModesRequest* request, ::mavsdk::rpc::action_server::GetAllowableFlightModesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SetArmedState(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetArmedStateRequest* request, ::mavsdk::rpc::action_server::SetArmedStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionServerService::Service::SetFlightMode(::grpc::ServerContext* context, const ::mavsdk::rpc::action_server::SetFlightModeRequest* request, ::mavsdk::rpc::action_server::SetFlightModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace action_server

