// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: telemetry_server/telemetry_server.proto
// Protobuf C++ Version: 5.29.1

#include "telemetry_server/telemetry_server.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace telemetry_server {

inline constexpr VelocityNed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : north_m_s_{0},
        east_m_s_{0},
        down_m_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VelocityNed::VelocityNed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VelocityNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelocityNedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelocityNedDefaultTypeInternal() {}
  union {
    VelocityNed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelocityNedDefaultTypeInternal _VelocityNed_default_instance_;

inline constexpr VelocityBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_m_s_{0},
        y_m_s_{0},
        z_m_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VelocityBody::VelocityBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VelocityBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VelocityBodyDefaultTypeInternal() {}
  union {
    VelocityBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VelocityBodyDefaultTypeInternal _VelocityBody_default_instance_;

inline constexpr TelemetryServerResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TelemetryServerResult::TelemetryServerResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TelemetryServerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryServerResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryServerResultDefaultTypeInternal() {}
  union {
    TelemetryServerResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryServerResultDefaultTypeInternal _TelemetryServerResult_default_instance_;

inline constexpr StatusText::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::mavsdk::rpc::telemetry_server::StatusTextType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StatusText::StatusText(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StatusTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusTextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusTextDefaultTypeInternal() {}
  union {
    StatusText _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusTextDefaultTypeInternal _StatusText_default_instance_;

inline constexpr ScaledPressure::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_us_{::uint64_t{0u}},
        absolute_pressure_hpa_{0},
        differential_pressure_hpa_{0},
        temperature_deg_{0},
        differential_pressure_temperature_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ScaledPressure::ScaledPressure(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScaledPressureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaledPressureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaledPressureDefaultTypeInternal() {}
  union {
    ScaledPressure _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaledPressureDefaultTypeInternal _ScaledPressure_default_instance_;

inline constexpr RcStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : was_available_once_{false},
        is_available_{false},
        signal_strength_percent_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RcStatus::RcStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RcStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RcStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RcStatusDefaultTypeInternal() {}
  union {
    RcStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RcStatusDefaultTypeInternal _RcStatus_default_instance_;

inline constexpr RawGps::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_us_{::uint64_t{0u}},
        latitude_deg_{0},
        longitude_deg_{0},
        absolute_altitude_m_{0},
        hdop_{0},
        vdop_{0},
        velocity_m_s_{0},
        cog_deg_{0},
        altitude_ellipsoid_m_{0},
        horizontal_uncertainty_m_{0},
        vertical_uncertainty_m_{0},
        velocity_uncertainty_m_s_{0},
        heading_uncertainty_deg_{0},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RawGps::RawGps(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RawGpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawGpsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawGpsDefaultTypeInternal() {}
  union {
    RawGps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawGpsDefaultTypeInternal _RawGps_default_instance_;

inline constexpr Quaternion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : w_{0},
        x_{0},
        y_{0},
        z_{0},
        timestamp_us_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Quaternion::Quaternion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;

inline constexpr PublishUnixEpochTimeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : time_us_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PublishUnixEpochTimeRequest::PublishUnixEpochTimeRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishUnixEpochTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishUnixEpochTimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishUnixEpochTimeRequestDefaultTypeInternal() {}
  union {
    PublishUnixEpochTimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishUnixEpochTimeRequestDefaultTypeInternal _PublishUnixEpochTimeRequest_default_instance_;

inline constexpr PublishLandedStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : landed_state_{static_cast< ::mavsdk::rpc::telemetry_server::LandedState >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PublishLandedStateRequest::PublishLandedStateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishLandedStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishLandedStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishLandedStateRequestDefaultTypeInternal() {}
  union {
    PublishLandedStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishLandedStateRequestDefaultTypeInternal _PublishLandedStateRequest_default_instance_;

inline constexpr PublishInAirRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : is_in_air_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PublishInAirRequest::PublishInAirRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishInAirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishInAirRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishInAirRequestDefaultTypeInternal() {}
  union {
    PublishInAirRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishInAirRequestDefaultTypeInternal _PublishInAirRequest_default_instance_;

inline constexpr PublishExtendedSysStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : vtol_state_{static_cast< ::mavsdk::rpc::telemetry_server::VtolState >(0)},
        landed_state_{static_cast< ::mavsdk::rpc::telemetry_server::LandedState >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PublishExtendedSysStateRequest::PublishExtendedSysStateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishExtendedSysStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishExtendedSysStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishExtendedSysStateRequestDefaultTypeInternal() {}
  union {
    PublishExtendedSysStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishExtendedSysStateRequestDefaultTypeInternal _PublishExtendedSysStateRequest_default_instance_;

inline constexpr PositionNed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : north_m_{0},
        east_m_{0},
        down_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PositionNed::PositionNed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionNedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionNedDefaultTypeInternal() {}
  union {
    PositionNed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionNedDefaultTypeInternal _PositionNed_default_instance_;

inline constexpr PositionBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_m_{0},
        y_m_{0},
        z_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PositionBody::PositionBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionBodyDefaultTypeInternal() {}
  union {
    PositionBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionBodyDefaultTypeInternal _PositionBody_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        longitude_deg_{0},
        absolute_altitude_m_{0},
        relative_altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr MagneticFieldFrd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forward_gauss_{0},
        right_gauss_{0},
        down_gauss_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MagneticFieldFrd::MagneticFieldFrd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MagneticFieldFrdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MagneticFieldFrdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MagneticFieldFrdDefaultTypeInternal() {}
  union {
    MagneticFieldFrd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MagneticFieldFrdDefaultTypeInternal _MagneticFieldFrd_default_instance_;

inline constexpr Heading::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : heading_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Heading::Heading(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeadingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadingDefaultTypeInternal() {}
  union {
    Heading _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadingDefaultTypeInternal _Heading_default_instance_;

inline constexpr GroundTruth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : latitude_deg_{0},
        longitude_deg_{0},
        absolute_altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GroundTruth::GroundTruth(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GroundTruthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroundTruthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroundTruthDefaultTypeInternal() {}
  union {
    GroundTruth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;

inline constexpr GpsInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : num_satellites_{0},
        fix_type_{static_cast< ::mavsdk::rpc::telemetry_server::FixType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GpsInfo::GpsInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GpsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpsInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpsInfoDefaultTypeInternal() {}
  union {
    GpsInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;

inline constexpr FixedwingMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : airspeed_m_s_{0},
        throttle_percentage_{0},
        climb_rate_m_s_{0},
        groundspeed_m_s_{0},
        heading_deg_{0},
        absolute_altitude_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FixedwingMetrics::FixedwingMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FixedwingMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FixedwingMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FixedwingMetricsDefaultTypeInternal() {}
  union {
    FixedwingMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FixedwingMetricsDefaultTypeInternal _FixedwingMetrics_default_instance_;

inline constexpr EulerAngle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_deg_{0},
        pitch_deg_{0},
        timestamp_us_{::uint64_t{0u}},
        yaw_deg_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EulerAngle::EulerAngle(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EulerAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EulerAngleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EulerAngleDefaultTypeInternal() {}
  union {
    EulerAngle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;

inline constexpr DistanceSensor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : minimum_distance_m_{0},
        maximum_distance_m_{0},
        current_distance_m_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DistanceSensor::DistanceSensor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DistanceSensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceSensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceSensorDefaultTypeInternal() {}
  union {
    DistanceSensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;

inline constexpr Covariance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : covariance_matrix_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Covariance::Covariance(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CovarianceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CovarianceDefaultTypeInternal() {}
  union {
    Covariance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CovarianceDefaultTypeInternal _Covariance_default_instance_;

inline constexpr Battery::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : voltage_v_{0},
        remaining_percent_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Battery::Battery(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryDefaultTypeInternal() {}
  union {
    Battery _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryDefaultTypeInternal _Battery_default_instance_;

inline constexpr AngularVelocityFrd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forward_rad_s_{0},
        right_rad_s_{0},
        down_rad_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AngularVelocityFrd::AngularVelocityFrd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AngularVelocityFrdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityFrdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityFrdDefaultTypeInternal() {}
  union {
    AngularVelocityFrd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityFrdDefaultTypeInternal _AngularVelocityFrd_default_instance_;

inline constexpr AngularVelocityBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : roll_rad_s_{0},
        pitch_rad_s_{0},
        yaw_rad_s_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AngularVelocityBody::AngularVelocityBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AngularVelocityBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AngularVelocityBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AngularVelocityBodyDefaultTypeInternal() {}
  union {
    AngularVelocityBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;

inline constexpr ActuatorOutputStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actuator_{},
        active_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActuatorOutputStatus::ActuatorOutputStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ActuatorOutputStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorOutputStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorOutputStatusDefaultTypeInternal() {}
  union {
    ActuatorOutputStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;

inline constexpr ActuatorControlTarget::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : controls_{},
        group_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActuatorControlTarget::ActuatorControlTarget(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ActuatorControlTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorControlTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorControlTargetDefaultTypeInternal() {}
  union {
    ActuatorControlTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;

inline constexpr AccelerationFrd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : forward_m_s2_{0},
        right_m_s2_{0},
        down_m_s2_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccelerationFrd::AccelerationFrd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccelerationFrdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelerationFrdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelerationFrdDefaultTypeInternal() {}
  union {
    AccelerationFrd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelerationFrdDefaultTypeInternal _AccelerationFrd_default_instance_;

inline constexpr PublishVisualFlightRulesHudResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishVisualFlightRulesHudResponse::PublishVisualFlightRulesHudResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishVisualFlightRulesHudResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishVisualFlightRulesHudResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishVisualFlightRulesHudResponseDefaultTypeInternal() {}
  union {
    PublishVisualFlightRulesHudResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishVisualFlightRulesHudResponseDefaultTypeInternal _PublishVisualFlightRulesHudResponse_default_instance_;

inline constexpr PublishVisualFlightRulesHudRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        fixed_wing_metrics_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishVisualFlightRulesHudRequest::PublishVisualFlightRulesHudRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishVisualFlightRulesHudRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishVisualFlightRulesHudRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishVisualFlightRulesHudRequestDefaultTypeInternal() {}
  union {
    PublishVisualFlightRulesHudRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishVisualFlightRulesHudRequestDefaultTypeInternal _PublishVisualFlightRulesHudRequest_default_instance_;

inline constexpr PublishUnixEpochTimeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishUnixEpochTimeResponse::PublishUnixEpochTimeResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishUnixEpochTimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishUnixEpochTimeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishUnixEpochTimeResponseDefaultTypeInternal() {}
  union {
    PublishUnixEpochTimeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishUnixEpochTimeResponseDefaultTypeInternal _PublishUnixEpochTimeResponse_default_instance_;

inline constexpr PublishSysStatusResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishSysStatusResponse::PublishSysStatusResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishSysStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishSysStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishSysStatusResponseDefaultTypeInternal() {}
  union {
    PublishSysStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishSysStatusResponseDefaultTypeInternal _PublishSysStatusResponse_default_instance_;

inline constexpr PublishSysStatusRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        battery_{nullptr},
        rc_receiver_status_{false},
        gyro_status_{false},
        accel_status_{false},
        mag_status_{false},
        gps_status_{false} {}

template <typename>
PROTOBUF_CONSTEXPR PublishSysStatusRequest::PublishSysStatusRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishSysStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishSysStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishSysStatusRequestDefaultTypeInternal() {}
  union {
    PublishSysStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishSysStatusRequestDefaultTypeInternal _PublishSysStatusRequest_default_instance_;

inline constexpr PublishStatusTextResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishStatusTextResponse::PublishStatusTextResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishStatusTextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishStatusTextResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishStatusTextResponseDefaultTypeInternal() {}
  union {
    PublishStatusTextResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishStatusTextResponseDefaultTypeInternal _PublishStatusTextResponse_default_instance_;

inline constexpr PublishStatusTextRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        status_text_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishStatusTextRequest::PublishStatusTextRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishStatusTextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishStatusTextRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishStatusTextRequestDefaultTypeInternal() {}
  union {
    PublishStatusTextRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishStatusTextRequestDefaultTypeInternal _PublishStatusTextRequest_default_instance_;

inline constexpr PublishScaledImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishScaledImuResponse::PublishScaledImuResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishScaledImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishScaledImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishScaledImuResponseDefaultTypeInternal() {}
  union {
    PublishScaledImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishScaledImuResponseDefaultTypeInternal _PublishScaledImuResponse_default_instance_;

inline constexpr PublishRcStatusRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rc_status_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishRcStatusRequest::PublishRcStatusRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishRcStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishRcStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishRcStatusRequestDefaultTypeInternal() {}
  union {
    PublishRcStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishRcStatusRequestDefaultTypeInternal _PublishRcStatusRequest_default_instance_;

inline constexpr PublishRawImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishRawImuResponse::PublishRawImuResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishRawImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishRawImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishRawImuResponseDefaultTypeInternal() {}
  union {
    PublishRawImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishRawImuResponseDefaultTypeInternal _PublishRawImuResponse_default_instance_;

inline constexpr PublishRawGpsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishRawGpsResponse::PublishRawGpsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishRawGpsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishRawGpsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishRawGpsResponseDefaultTypeInternal() {}
  union {
    PublishRawGpsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishRawGpsResponseDefaultTypeInternal _PublishRawGpsResponse_default_instance_;

inline constexpr PublishRawGpsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        raw_gps_{nullptr},
        gps_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishRawGpsRequest::PublishRawGpsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishRawGpsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishRawGpsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishRawGpsRequestDefaultTypeInternal() {}
  union {
    PublishRawGpsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishRawGpsRequestDefaultTypeInternal _PublishRawGpsRequest_default_instance_;

inline constexpr PublishPositionVelocityNedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishPositionVelocityNedResponse::PublishPositionVelocityNedResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishPositionVelocityNedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishPositionVelocityNedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishPositionVelocityNedResponseDefaultTypeInternal() {}
  union {
    PublishPositionVelocityNedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishPositionVelocityNedResponseDefaultTypeInternal _PublishPositionVelocityNedResponse_default_instance_;

inline constexpr PublishPositionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishPositionResponse::PublishPositionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishPositionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishPositionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishPositionResponseDefaultTypeInternal() {}
  union {
    PublishPositionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishPositionResponseDefaultTypeInternal _PublishPositionResponse_default_instance_;

inline constexpr PublishPositionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_ned_{nullptr},
        heading_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishPositionRequest::PublishPositionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishPositionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishPositionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishPositionRequestDefaultTypeInternal() {}
  union {
    PublishPositionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishPositionRequestDefaultTypeInternal _PublishPositionRequest_default_instance_;

inline constexpr PublishOdometryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishOdometryResponse::PublishOdometryResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishOdometryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishOdometryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishOdometryResponseDefaultTypeInternal() {}
  union {
    PublishOdometryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishOdometryResponseDefaultTypeInternal _PublishOdometryResponse_default_instance_;

inline constexpr PublishImuResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishImuResponse::PublishImuResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishImuResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishImuResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishImuResponseDefaultTypeInternal() {}
  union {
    PublishImuResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishImuResponseDefaultTypeInternal _PublishImuResponse_default_instance_;

inline constexpr PublishHomeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishHomeResponse::PublishHomeResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishHomeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishHomeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishHomeResponseDefaultTypeInternal() {}
  union {
    PublishHomeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishHomeResponseDefaultTypeInternal _PublishHomeResponse_default_instance_;

inline constexpr PublishHomeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        home_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishHomeRequest::PublishHomeRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishHomeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishHomeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishHomeRequestDefaultTypeInternal() {}
  union {
    PublishHomeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishHomeRequestDefaultTypeInternal _PublishHomeRequest_default_instance_;

inline constexpr PublishGroundTruthResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishGroundTruthResponse::PublishGroundTruthResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishGroundTruthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishGroundTruthResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishGroundTruthResponseDefaultTypeInternal() {}
  union {
    PublishGroundTruthResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishGroundTruthResponseDefaultTypeInternal _PublishGroundTruthResponse_default_instance_;

inline constexpr PublishGroundTruthRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ground_truth_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishGroundTruthRequest::PublishGroundTruthRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishGroundTruthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishGroundTruthRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishGroundTruthRequestDefaultTypeInternal() {}
  union {
    PublishGroundTruthRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishGroundTruthRequestDefaultTypeInternal _PublishGroundTruthRequest_default_instance_;

inline constexpr PublishExtendedSysStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishExtendedSysStateResponse::PublishExtendedSysStateResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishExtendedSysStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishExtendedSysStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishExtendedSysStateResponseDefaultTypeInternal() {}
  union {
    PublishExtendedSysStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishExtendedSysStateResponseDefaultTypeInternal _PublishExtendedSysStateResponse_default_instance_;

inline constexpr PublishDistanceSensorResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishDistanceSensorResponse::PublishDistanceSensorResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishDistanceSensorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishDistanceSensorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishDistanceSensorResponseDefaultTypeInternal() {}
  union {
    PublishDistanceSensorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishDistanceSensorResponseDefaultTypeInternal _PublishDistanceSensorResponse_default_instance_;

inline constexpr PublishDistanceSensorRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        distance_sensor_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishDistanceSensorRequest::PublishDistanceSensorRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishDistanceSensorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishDistanceSensorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishDistanceSensorRequestDefaultTypeInternal() {}
  union {
    PublishDistanceSensorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishDistanceSensorRequestDefaultTypeInternal _PublishDistanceSensorRequest_default_instance_;

inline constexpr PublishBatteryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishBatteryResponse::PublishBatteryResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishBatteryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishBatteryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishBatteryResponseDefaultTypeInternal() {}
  union {
    PublishBatteryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishBatteryResponseDefaultTypeInternal _PublishBatteryResponse_default_instance_;

inline constexpr PublishBatteryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        battery_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishBatteryRequest::PublishBatteryRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishBatteryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishBatteryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishBatteryRequestDefaultTypeInternal() {}
  union {
    PublishBatteryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishBatteryRequestDefaultTypeInternal _PublishBatteryRequest_default_instance_;

inline constexpr PublishAttitudeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        telemetry_server_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishAttitudeResponse::PublishAttitudeResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishAttitudeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishAttitudeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishAttitudeResponseDefaultTypeInternal() {}
  union {
    PublishAttitudeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishAttitudeResponseDefaultTypeInternal _PublishAttitudeResponse_default_instance_;

inline constexpr PublishAttitudeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        angle_{nullptr},
        angular_velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishAttitudeRequest::PublishAttitudeRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishAttitudeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishAttitudeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishAttitudeRequestDefaultTypeInternal() {}
  union {
    PublishAttitudeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishAttitudeRequestDefaultTypeInternal _PublishAttitudeRequest_default_instance_;

inline constexpr PositionVelocityNed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PositionVelocityNed::PositionVelocityNed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionVelocityNedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionVelocityNedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionVelocityNedDefaultTypeInternal() {}
  union {
    PositionVelocityNed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionVelocityNedDefaultTypeInternal _PositionVelocityNed_default_instance_;

inline constexpr Odometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_body_{nullptr},
        q_{nullptr},
        velocity_body_{nullptr},
        angular_velocity_body_{nullptr},
        pose_covariance_{nullptr},
        velocity_covariance_{nullptr},
        time_usec_{::uint64_t{0u}},
        frame_id_{static_cast< ::mavsdk::rpc::telemetry_server::Odometry_MavFrame >(0)},
        child_frame_id_{static_cast< ::mavsdk::rpc::telemetry_server::Odometry_MavFrame >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Odometry::Odometry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;

inline constexpr Imu::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        acceleration_frd_{nullptr},
        angular_velocity_frd_{nullptr},
        magnetic_field_frd_{nullptr},
        timestamp_us_{::uint64_t{0u}},
        temperature_degc_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Imu::Imu(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDefaultTypeInternal _Imu_default_instance_;

inline constexpr PublishScaledImuRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishScaledImuRequest::PublishScaledImuRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishScaledImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishScaledImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishScaledImuRequestDefaultTypeInternal() {}
  union {
    PublishScaledImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishScaledImuRequestDefaultTypeInternal _PublishScaledImuRequest_default_instance_;

inline constexpr PublishRawImuRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishRawImuRequest::PublishRawImuRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishRawImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishRawImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishRawImuRequestDefaultTypeInternal() {}
  union {
    PublishRawImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishRawImuRequestDefaultTypeInternal _PublishRawImuRequest_default_instance_;

inline constexpr PublishPositionVelocityNedRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_velocity_ned_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishPositionVelocityNedRequest::PublishPositionVelocityNedRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishPositionVelocityNedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishPositionVelocityNedRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishPositionVelocityNedRequestDefaultTypeInternal() {}
  union {
    PublishPositionVelocityNedRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishPositionVelocityNedRequestDefaultTypeInternal _PublishPositionVelocityNedRequest_default_instance_;

inline constexpr PublishOdometryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        odometry_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishOdometryRequest::PublishOdometryRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishOdometryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishOdometryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishOdometryRequestDefaultTypeInternal() {}
  union {
    PublishOdometryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishOdometryRequestDefaultTypeInternal _PublishOdometryRequest_default_instance_;

inline constexpr PublishImuRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        imu_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PublishImuRequest::PublishImuRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PublishImuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishImuRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishImuRequestDefaultTypeInternal() {}
  union {
    PublishImuRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishImuRequestDefaultTypeInternal _PublishImuRequest_default_instance_;
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto = nullptr;
const ::uint32_t
    TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, _impl_.velocity_ned_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionRequest, _impl_.heading_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeRequest, _impl_.home_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_.battery_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_.rc_receiver_status_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_.gyro_status_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_.accel_status_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_.mag_status_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest, _impl_.gps_status_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest, _impl_.vtol_state_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest, _impl_.landed_state_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishInAirRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishInAirRequest, _impl_.is_in_air_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishLandedStateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishLandedStateRequest, _impl_.landed_state_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, _impl_.raw_gps_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest, _impl_.gps_info_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryRequest, _impl_.battery_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest, _impl_.rc_status_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest, _impl_.status_text_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryRequest, _impl_.odometry_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest, _impl_.position_velocity_ned_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest, _impl_.ground_truth_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuRequest, _impl_.imu_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest, _impl_.imu_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuRequest, _impl_.imu_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest, _impl_.time_us_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishDistanceSensorRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishDistanceSensorRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishDistanceSensorRequest, _impl_.distance_sensor_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeRequest, _impl_.angle_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeRequest, _impl_.angular_velocity_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudRequest, _impl_.fixed_wing_metrics_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishHomeResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishBatteryResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishOdometryResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishImuResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishRawImuResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishDistanceSensorResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishDistanceSensorResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishDistanceSensorResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishAttitudeResponse, _impl_.telemetry_server_result_),
        0,
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudResponse, _impl_.telemetry_server_result_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, _impl_.latitude_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, _impl_.longitude_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, _impl_.absolute_altitude_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Position, _impl_.relative_altitude_m_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Heading, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Heading, _impl_.heading_deg_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _impl_.w_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Quaternion, _impl_.timestamp_us_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, _impl_.roll_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, _impl_.pitch_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, _impl_.yaw_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::EulerAngle, _impl_.timestamp_us_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, _impl_.roll_rad_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, _impl_.pitch_rad_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityBody, _impl_.yaw_rad_s_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GpsInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GpsInfo, _impl_.num_satellites_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GpsInfo, _impl_.fix_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.timestamp_us_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.latitude_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.longitude_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.absolute_altitude_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.hdop_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.vdop_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.velocity_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.cog_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.altitude_ellipsoid_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.horizontal_uncertainty_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.vertical_uncertainty_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.velocity_uncertainty_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.heading_uncertainty_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RawGps, _impl_.yaw_deg_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Battery, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Battery, _impl_.voltage_v_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Battery, _impl_.remaining_percent_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, _impl_.was_available_once_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, _impl_.is_available_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::RcStatus, _impl_.signal_strength_percent_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::StatusText, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::StatusText, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::StatusText, _impl_.text_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorControlTarget, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorControlTarget, _impl_.group_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorControlTarget, _impl_.controls_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus, _impl_.active_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus, _impl_.actuator_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Covariance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Covariance, _impl_.covariance_matrix_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, _impl_.x_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, _impl_.y_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityBody, _impl_.z_m_s_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, _impl_.x_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, _impl_.y_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionBody, _impl_.z_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.time_usec_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.frame_id_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.child_frame_id_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.position_body_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.q_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.velocity_body_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.angular_velocity_body_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.pose_covariance_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Odometry, _impl_.velocity_covariance_),
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, _impl_.minimum_distance_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, _impl_.maximum_distance_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::DistanceSensor, _impl_.current_distance_m_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _impl_.timestamp_us_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _impl_.absolute_pressure_hpa_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _impl_.differential_pressure_hpa_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _impl_.temperature_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::ScaledPressure, _impl_.differential_pressure_temperature_deg_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, _impl_.north_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, _impl_.east_m_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionNed, _impl_.down_m_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, _impl_.north_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, _impl_.east_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::VelocityNed, _impl_.down_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::PositionVelocityNed, _impl_.velocity_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, _impl_.latitude_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, _impl_.longitude_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::GroundTruth, _impl_.absolute_altitude_m_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _impl_.airspeed_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _impl_.throttle_percentage_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _impl_.climb_rate_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _impl_.groundspeed_m_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _impl_.heading_deg_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::FixedwingMetrics, _impl_.absolute_altitude_m_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, _impl_.forward_m_s2_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, _impl_.right_m_s2_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AccelerationFrd, _impl_.down_m_s2_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, _impl_.forward_rad_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, _impl_.right_rad_s_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::AngularVelocityFrd, _impl_.down_rad_s_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, _impl_.forward_gauss_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, _impl_.right_gauss_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::MagneticFieldFrd, _impl_.down_gauss_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _impl_.acceleration_frd_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _impl_.angular_velocity_frd_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _impl_.magnetic_field_frd_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _impl_.temperature_degc_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::Imu, _impl_.timestamp_us_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::TelemetryServerResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::TelemetryServerResult, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry_server::TelemetryServerResult, _impl_.result_str_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionRequest)},
        {14, 23, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishHomeRequest)},
        {24, 38, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishSysStatusRequest)},
        {44, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest)},
        {54, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishInAirRequest)},
        {63, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishLandedStateRequest)},
        {72, 82, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawGpsRequest)},
        {84, 93, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishBatteryRequest)},
        {94, 103, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRcStatusRequest)},
        {104, 113, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishStatusTextRequest)},
        {114, 123, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishOdometryRequest)},
        {124, 133, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest)},
        {134, 143, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest)},
        {144, 153, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishImuRequest)},
        {154, 163, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishScaledImuRequest)},
        {164, 173, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawImuRequest)},
        {174, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest)},
        {183, 192, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishDistanceSensorRequest)},
        {193, 203, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishAttitudeRequest)},
        {205, 214, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudRequest)},
        {215, 224, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionResponse)},
        {225, 234, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishHomeResponse)},
        {235, 244, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishSysStatusResponse)},
        {245, 254, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse)},
        {255, 264, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawGpsResponse)},
        {265, 274, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishBatteryResponse)},
        {275, 284, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishStatusTextResponse)},
        {285, 294, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishOdometryResponse)},
        {295, 304, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse)},
        {305, 314, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse)},
        {315, 324, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishImuResponse)},
        {325, 334, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishScaledImuResponse)},
        {335, 344, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishRawImuResponse)},
        {345, 354, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse)},
        {355, 364, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishDistanceSensorResponse)},
        {365, 374, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishAttitudeResponse)},
        {375, 384, -1, sizeof(::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudResponse)},
        {385, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::Position)},
        {397, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::Heading)},
        {406, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::Quaternion)},
        {419, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::EulerAngle)},
        {431, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::AngularVelocityBody)},
        {442, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::GpsInfo)},
        {452, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::RawGps)},
        {474, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::Battery)},
        {484, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::RcStatus)},
        {495, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::StatusText)},
        {505, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::ActuatorControlTarget)},
        {515, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::ActuatorOutputStatus)},
        {525, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::Covariance)},
        {534, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::VelocityBody)},
        {545, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::PositionBody)},
        {556, 573, -1, sizeof(::mavsdk::rpc::telemetry_server::Odometry)},
        {582, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::DistanceSensor)},
        {593, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::ScaledPressure)},
        {606, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::PositionNed)},
        {617, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::VelocityNed)},
        {628, 638, -1, sizeof(::mavsdk::rpc::telemetry_server::PositionVelocityNed)},
        {640, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::GroundTruth)},
        {651, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::FixedwingMetrics)},
        {665, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::AccelerationFrd)},
        {676, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::AngularVelocityFrd)},
        {687, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::MagneticFieldFrd)},
        {698, 711, -1, sizeof(::mavsdk::rpc::telemetry_server::Imu)},
        {716, -1, -1, sizeof(::mavsdk::rpc::telemetry_server::TelemetryServerResult)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::telemetry_server::_PublishPositionRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishHomeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishSysStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishInAirRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishLandedStateRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishRawGpsRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishBatteryRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishRcStatusRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishStatusTextRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishOdometryRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishGroundTruthRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishScaledImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishRawImuRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishDistanceSensorRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishAttitudeRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishVisualFlightRulesHudRequest_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishPositionResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishHomeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishSysStatusResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishExtendedSysStateResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishRawGpsResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishBatteryResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishStatusTextResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishOdometryResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishPositionVelocityNedResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishGroundTruthResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishScaledImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishRawImuResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishUnixEpochTimeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishDistanceSensorResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishAttitudeResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PublishVisualFlightRulesHudResponse_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Position_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Heading_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Quaternion_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_EulerAngle_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_AngularVelocityBody_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_GpsInfo_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_RawGps_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Battery_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_RcStatus_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_StatusText_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_ActuatorControlTarget_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_ActuatorOutputStatus_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Covariance_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_VelocityBody_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PositionBody_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Odometry_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_DistanceSensor_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_ScaledPressure_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PositionNed_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_GroundTruth_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_FixedwingMetrics_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_AccelerationFrd_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_AngularVelocityFrd_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_MagneticFieldFrd_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_Imu_default_instance_._instance,
    &::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_._instance,
};
const char descriptor_table_protodef_telemetry_5fserver_2ftelemetry_5fserver_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\'telemetry_server/telemetry_server.prot"
    "o\022\033mavsdk.rpc.telemetry_server\032\024mavsdk_o"
    "ptions.proto\"\310\001\n\026PublishPositionRequest\022"
    "7\n\010position\030\001 \001(\0132%.mavsdk.rpc.telemetry"
    "_server.Position\022>\n\014velocity_ned\030\002 \001(\0132("
    ".mavsdk.rpc.telemetry_server.VelocityNed"
    "\0225\n\007heading\030\003 \001(\0132$.mavsdk.rpc.telemetry"
    "_server.Heading\"I\n\022PublishHomeRequest\0223\n"
    "\004home\030\001 \001(\0132%.mavsdk.rpc.telemetry_serve"
    "r.Position\"\277\001\n\027PublishSysStatusRequest\0225"
    "\n\007battery\030\001 \001(\0132$.mavsdk.rpc.telemetry_s"
    "erver.Battery\022\032\n\022rc_receiver_status\030\002 \001("
    "\010\022\023\n\013gyro_status\030\003 \001(\010\022\024\n\014accel_status\030\004"
    " \001(\010\022\022\n\nmag_status\030\005 \001(\010\022\022\n\ngps_status\030\006"
    " \001(\010\"\234\001\n\036PublishExtendedSysStateRequest\022"
    ":\n\nvtol_state\030\001 \001(\0162&.mavsdk.rpc.telemet"
    "ry_server.VtolState\022>\n\014landed_state\030\002 \001("
    "\0162(.mavsdk.rpc.telemetry_server.LandedSt"
    "ate\"(\n\023PublishInAirRequest\022\021\n\tis_in_air\030"
    "\001 \001(\010\"[\n\031PublishLandedStateRequest\022>\n\014la"
    "nded_state\030\001 \001(\0162(.mavsdk.rpc.telemetry_"
    "server.LandedState\"\204\001\n\024PublishRawGpsRequ"
    "est\0224\n\007raw_gps\030\001 \001(\0132#.mavsdk.rpc.teleme"
    "try_server.RawGps\0226\n\010gps_info\030\002 \001(\0132$.ma"
    "vsdk.rpc.telemetry_server.GpsInfo\"N\n\025Pub"
    "lishBatteryRequest\0225\n\007battery\030\001 \001(\0132$.ma"
    "vsdk.rpc.telemetry_server.Battery\"R\n\026Pub"
    "lishRcStatusRequest\0228\n\trc_status\030\001 \001(\0132%"
    ".mavsdk.rpc.telemetry_server.RcStatus\"X\n"
    "\030PublishStatusTextRequest\022<\n\013status_text"
    "\030\001 \001(\0132\'.mavsdk.rpc.telemetry_server.Sta"
    "tusText\"Q\n\026PublishOdometryRequest\0227\n\010odo"
    "metry\030\001 \001(\0132%.mavsdk.rpc.telemetry_serve"
    "r.Odometry\"t\n!PublishPositionVelocityNed"
    "Request\022O\n\025position_velocity_ned\030\001 \001(\01320"
    ".mavsdk.rpc.telemetry_server.PositionVel"
    "ocityNed\"[\n\031PublishGroundTruthRequest\022>\n"
    "\014ground_truth\030\001 \001(\0132(.mavsdk.rpc.telemet"
    "ry_server.GroundTruth\"B\n\021PublishImuReque"
    "st\022-\n\003imu\030\001 \001(\0132 .mavsdk.rpc.telemetry_s"
    "erver.Imu\"H\n\027PublishScaledImuRequest\022-\n\003"
    "imu\030\001 \001(\0132 .mavsdk.rpc.telemetry_server."
    "Imu\"E\n\024PublishRawImuRequest\022-\n\003imu\030\001 \001(\013"
    "2 .mavsdk.rpc.telemetry_server.Imu\".\n\033Pu"
    "blishUnixEpochTimeRequest\022\017\n\007time_us\030\001 \001"
    "(\004\"d\n\034PublishDistanceSensorRequest\022D\n\017di"
    "stance_sensor\030\001 \001(\0132+.mavsdk.rpc.telemet"
    "ry_server.DistanceSensor\"\234\001\n\026PublishAtti"
    "tudeRequest\0226\n\005angle\030\001 \001(\0132\'.mavsdk.rpc."
    "telemetry_server.EulerAngle\022J\n\020angular_v"
    "elocity\030\002 \001(\01320.mavsdk.rpc.telemetry_ser"
    "ver.AngularVelocityBody\"o\n\"PublishVisual"
    "FlightRulesHudRequest\022I\n\022fixed_wing_metr"
    "ics\030\001 \001(\0132-.mavsdk.rpc.telemetry_server."
    "FixedwingMetrics\"n\n\027PublishPositionRespo"
    "nse\022S\n\027telemetry_server_result\030\001 \001(\01322.m"
    "avsdk.rpc.telemetry_server.TelemetryServ"
    "erResult\"j\n\023PublishHomeResponse\022S\n\027telem"
    "etry_server_result\030\001 \001(\01322.mavsdk.rpc.te"
    "lemetry_server.TelemetryServerResult\"o\n\030"
    "PublishSysStatusResponse\022S\n\027telemetry_se"
    "rver_result\030\001 \001(\01322.mavsdk.rpc.telemetry"
    "_server.TelemetryServerResult\"v\n\037Publish"
    "ExtendedSysStateResponse\022S\n\027telemetry_se"
    "rver_result\030\001 \001(\01322.mavsdk.rpc.telemetry"
    "_server.TelemetryServerResult\"l\n\025Publish"
    "RawGpsResponse\022S\n\027telemetry_server_resul"
    "t\030\001 \001(\01322.mavsdk.rpc.telemetry_server.Te"
    "lemetryServerResult\"m\n\026PublishBatteryRes"
    "ponse\022S\n\027telemetry_server_result\030\001 \001(\01322"
    ".mavsdk.rpc.telemetry_server.TelemetrySe"
    "rverResult\"p\n\031PublishStatusTextResponse\022"
    "S\n\027telemetry_server_result\030\001 \001(\01322.mavsd"
    "k.rpc.telemetry_server.TelemetryServerRe"
    "sult\"n\n\027PublishOdometryResponse\022S\n\027telem"
    "etry_server_result\030\001 \001(\01322.mavsdk.rpc.te"
    "lemetry_server.TelemetryServerResult\"y\n\""
    "PublishPositionVelocityNedResponse\022S\n\027te"
    "lemetry_server_result\030\001 \001(\01322.mavsdk.rpc"
    ".telemetry_server.TelemetryServerResult\""
    "q\n\032PublishGroundTruthResponse\022S\n\027telemet"
    "ry_server_result\030\001 \001(\01322.mavsdk.rpc.tele"
    "metry_server.TelemetryServerResult\"i\n\022Pu"
    "blishImuResponse\022S\n\027telemetry_server_res"
    "ult\030\001 \001(\01322.mavsdk.rpc.telemetry_server."
    "TelemetryServerResult\"o\n\030PublishScaledIm"
    "uResponse\022S\n\027telemetry_server_result\030\001 \001"
    "(\01322.mavsdk.rpc.telemetry_server.Telemet"
    "ryServerResult\"l\n\025PublishRawImuResponse\022"
    "S\n\027telemetry_server_result\030\001 \001(\01322.mavsd"
    "k.rpc.telemetry_server.TelemetryServerRe"
    "sult\"s\n\034PublishUnixEpochTimeResponse\022S\n\027"
    "telemetry_server_result\030\001 \001(\01322.mavsdk.r"
    "pc.telemetry_server.TelemetryServerResul"
    "t\"t\n\035PublishDistanceSensorResponse\022S\n\027te"
    "lemetry_server_result\030\001 \001(\01322.mavsdk.rpc"
    ".telemetry_server.TelemetryServerResult\""
    "n\n\027PublishAttitudeResponse\022S\n\027telemetry_"
    "server_result\030\001 \001(\01322.mavsdk.rpc.telemet"
    "ry_server.TelemetryServerResult\"z\n#Publi"
    "shVisualFlightRulesHudResponse\022S\n\027teleme"
    "try_server_result\030\001 \001(\01322.mavsdk.rpc.tel"
    "emetry_server.TelemetryServerResult\"\225\001\n\010"
    "Position\022\035\n\014latitude_deg\030\001 \001(\001B\007\202\265\030\003NaN\022"
    "\036\n\rlongitude_deg\030\002 \001(\001B\007\202\265\030\003NaN\022$\n\023absol"
    "ute_altitude_m\030\003 \001(\002B\007\202\265\030\003NaN\022$\n\023relativ"
    "e_altitude_m\030\004 \001(\002B\007\202\265\030\003NaN\"\'\n\007Heading\022\034"
    "\n\013heading_deg\030\001 \001(\001B\007\202\265\030\003NaN\"r\n\nQuaterni"
    "on\022\022\n\001w\030\001 \001(\002B\007\202\265\030\003NaN\022\022\n\001x\030\002 \001(\002B\007\202\265\030\003N"
    "aN\022\022\n\001y\030\003 \001(\002B\007\202\265\030\003NaN\022\022\n\001z\030\004 \001(\002B\007\202\265\030\003N"
    "aN\022\024\n\014timestamp_us\030\005 \001(\004\"s\n\nEulerAngle\022\031"
    "\n\010roll_deg\030\001 \001(\002B\007\202\265\030\003NaN\022\032\n\tpitch_deg\030\002"
    " \001(\002B\007\202\265\030\003NaN\022\030\n\007yaw_deg\030\003 \001(\002B\007\202\265\030\003NaN\022"
    "\024\n\014timestamp_us\030\004 \001(\004\"l\n\023AngularVelocity"
    "Body\022\033\n\nroll_rad_s\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013pit"
    "ch_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tyaw_rad_s\030\003 \001"
    "(\002B\007\202\265\030\003NaN\"`\n\007GpsInfo\022\035\n\016num_satellites"
    "\030\001 \001(\005B\005\202\265\030\0010\0226\n\010fix_type\030\002 \001(\0162$.mavsdk"
    ".rpc.telemetry_server.FixType\"\337\002\n\006RawGps"
    "\022\024\n\014timestamp_us\030\001 \001(\004\022\024\n\014latitude_deg\030\002"
    " \001(\001\022\025\n\rlongitude_deg\030\003 \001(\001\022\033\n\023absolute_"
    "altitude_m\030\004 \001(\002\022\014\n\004hdop\030\005 \001(\002\022\014\n\004vdop\030\006"
    " \001(\002\022\024\n\014velocity_m_s\030\007 \001(\002\022\017\n\007cog_deg\030\010 "
    "\001(\002\022\034\n\024altitude_ellipsoid_m\030\t \001(\002\022 \n\030hor"
    "izontal_uncertainty_m\030\n \001(\002\022\036\n\026vertical_"
    "uncertainty_m\030\013 \001(\002\022 \n\030velocity_uncertai"
    "nty_m_s\030\014 \001(\002\022\037\n\027heading_uncertainty_deg"
    "\030\r \001(\002\022\017\n\007yaw_deg\030\016 \001(\002\"I\n\007Battery\022\032\n\tvo"
    "ltage_v\030\001 \001(\002B\007\202\265\030\003NaN\022\"\n\021remaining_perc"
    "ent\030\002 \001(\002B\007\202\265\030\003NaN\"|\n\010RcStatus\022%\n\022was_av"
    "ailable_once\030\001 \001(\010B\t\202\265\030\005false\022\037\n\014is_avai"
    "lable\030\002 \001(\010B\t\202\265\030\005false\022(\n\027signal_strengt"
    "h_percent\030\003 \001(\002B\007\202\265\030\003NaN\"U\n\nStatusText\0229"
    "\n\004type\030\001 \001(\0162+.mavsdk.rpc.telemetry_serv"
    "er.StatusTextType\022\014\n\004text\030\002 \001(\t\"\?\n\025Actua"
    "torControlTarget\022\024\n\005group\030\001 \001(\005B\005\202\265\030\0010\022\020"
    "\n\010controls\030\002 \003(\002\"\?\n\024ActuatorOutputStatus"
    "\022\025\n\006active\030\001 \001(\rB\005\202\265\030\0010\022\020\n\010actuator\030\002 \003("
    "\002\"\'\n\nCovariance\022\031\n\021covariance_matrix\030\001 \003"
    "(\002\";\n\014VelocityBody\022\r\n\005x_m_s\030\001 \001(\002\022\r\n\005y_m"
    "_s\030\002 \001(\002\022\r\n\005z_m_s\030\003 \001(\002\"5\n\014PositionBody\022"
    "\013\n\003x_m\030\001 \001(\002\022\013\n\003y_m\030\002 \001(\002\022\013\n\003z_m\030\003 \001(\002\"\244"
    "\005\n\010Odometry\022\021\n\ttime_usec\030\001 \001(\004\022@\n\010frame_"
    "id\030\002 \001(\0162..mavsdk.rpc.telemetry_server.O"
    "dometry.MavFrame\022F\n\016child_frame_id\030\003 \001(\016"
    "2..mavsdk.rpc.telemetry_server.Odometry."
    "MavFrame\022@\n\rposition_body\030\004 \001(\0132).mavsdk"
    ".rpc.telemetry_server.PositionBody\0222\n\001q\030"
    "\005 \001(\0132\'.mavsdk.rpc.telemetry_server.Quat"
    "ernion\022@\n\rvelocity_body\030\006 \001(\0132).mavsdk.r"
    "pc.telemetry_server.VelocityBody\022O\n\025angu"
    "lar_velocity_body\030\007 \001(\01320.mavsdk.rpc.tel"
    "emetry_server.AngularVelocityBody\022@\n\017pos"
    "e_covariance\030\010 \001(\0132\'.mavsdk.rpc.telemetr"
    "y_server.Covariance\022D\n\023velocity_covarian"
    "ce\030\t \001(\0132\'.mavsdk.rpc.telemetry_server.C"
    "ovariance\"j\n\010MavFrame\022\023\n\017MAV_FRAME_UNDEF"
    "\020\000\022\026\n\022MAV_FRAME_BODY_NED\020\010\022\030\n\024MAV_FRAME_"
    "VISION_NED\020\020\022\027\n\023MAV_FRAME_ESTIM_NED\020\022\"\177\n"
    "\016DistanceSensor\022#\n\022minimum_distance_m\030\001 "
    "\001(\002B\007\202\265\030\003NaN\022#\n\022maximum_distance_m\030\002 \001(\002"
    "B\007\202\265\030\003NaN\022#\n\022current_distance_m\030\003 \001(\002B\007\202"
    "\265\030\003NaN\"\260\001\n\016ScaledPressure\022\024\n\014timestamp_u"
    "s\030\001 \001(\004\022\035\n\025absolute_pressure_hpa\030\002 \001(\002\022!"
    "\n\031differential_pressure_hpa\030\003 \001(\002\022\027\n\017tem"
    "perature_deg\030\004 \001(\002\022-\n%differential_press"
    "ure_temperature_deg\030\005 \001(\002\"Y\n\013PositionNed"
    "\022\030\n\007north_m\030\001 \001(\002B\007\202\265\030\003NaN\022\027\n\006east_m\030\002 \001"
    "(\002B\007\202\265\030\003NaN\022\027\n\006down_m\030\003 \001(\002B\007\202\265\030\003NaN\"D\n\013"
    "VelocityNed\022\021\n\tnorth_m_s\030\001 \001(\002\022\020\n\010east_m"
    "_s\030\002 \001(\002\022\020\n\010down_m_s\030\003 \001(\002\"\215\001\n\023PositionV"
    "elocityNed\022:\n\010position\030\001 \001(\0132(.mavsdk.rp"
    "c.telemetry_server.PositionNed\022:\n\010veloci"
    "ty\030\002 \001(\0132(.mavsdk.rpc.telemetry_server.V"
    "elocityNed\"r\n\013GroundTruth\022\035\n\014latitude_de"
    "g\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030\002 \001(\001B"
    "\007\202\265\030\003NaN\022$\n\023absolute_altitude_m\030\003 \001(\002B\007\202"
    "\265\030\003NaN\"\336\001\n\020FixedwingMetrics\022\035\n\014airspeed_"
    "m_s\030\001 \001(\002B\007\202\265\030\003NaN\022$\n\023throttle_percentag"
    "e\030\002 \001(\002B\007\202\265\030\003NaN\022\037\n\016climb_rate_m_s\030\003 \001(\002"
    "B\007\202\265\030\003NaN\022 \n\017groundspeed_m_s\030\004 \001(\002B\007\202\265\030\003"
    "NaN\022\034\n\013heading_deg\030\005 \001(\002B\007\202\265\030\003NaN\022$\n\023abs"
    "olute_altitude_m\030\006 \001(\002B\007\202\265\030\003NaN\"i\n\017Accel"
    "erationFrd\022\035\n\014forward_m_s2\030\001 \001(\002B\007\202\265\030\003Na"
    "N\022\033\n\nright_m_s2\030\002 \001(\002B\007\202\265\030\003NaN\022\032\n\tdown_m"
    "_s2\030\003 \001(\002B\007\202\265\030\003NaN\"o\n\022AngularVelocityFrd"
    "\022\036\n\rforward_rad_s\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013righ"
    "t_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022\033\n\ndown_rad_s\030\003 \001"
    "(\002B\007\202\265\030\003NaN\"m\n\020MagneticFieldFrd\022\036\n\rforwa"
    "rd_gauss\030\001 \001(\002B\007\202\265\030\003NaN\022\034\n\013right_gauss\030\002"
    " \001(\002B\007\202\265\030\003NaN\022\033\n\ndown_gauss\030\003 \001(\002B\007\202\265\030\003N"
    "aN\"\240\002\n\003Imu\022F\n\020acceleration_frd\030\001 \001(\0132,.m"
    "avsdk.rpc.telemetry_server.AccelerationF"
    "rd\022M\n\024angular_velocity_frd\030\002 \001(\0132/.mavsd"
    "k.rpc.telemetry_server.AngularVelocityFr"
    "d\022I\n\022magnetic_field_frd\030\003 \001(\0132-.mavsdk.r"
    "pc.telemetry_server.MagneticFieldFrd\022!\n\020"
    "temperature_degc\030\004 \001(\002B\007\202\265\030\003NaN\022\024\n\014times"
    "tamp_us\030\005 \001(\004\"\264\002\n\025TelemetryServerResult\022"
    "I\n\006result\030\001 \001(\01629.mavsdk.rpc.telemetry_s"
    "erver.TelemetryServerResult.Result\022\022\n\nre"
    "sult_str\030\002 \001(\t\"\273\001\n\006Result\022\022\n\016RESULT_UNKN"
    "OWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_NO_S"
    "YSTEM\020\002\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022\017\n\013"
    "RESULT_BUSY\020\004\022\031\n\025RESULT_COMMAND_DENIED\020\005"
    "\022\022\n\016RESULT_TIMEOUT\020\006\022\026\n\022RESULT_UNSUPPORT"
    "ED\020\007*\244\001\n\007FixType\022\023\n\017FIX_TYPE_NO_GPS\020\000\022\023\n"
    "\017FIX_TYPE_NO_FIX\020\001\022\023\n\017FIX_TYPE_FIX_2D\020\002\022"
    "\023\n\017FIX_TYPE_FIX_3D\020\003\022\025\n\021FIX_TYPE_FIX_DGP"
    "S\020\004\022\026\n\022FIX_TYPE_RTK_FLOAT\020\005\022\026\n\022FIX_TYPE_"
    "RTK_FIXED\020\006*\215\001\n\tVtolState\022\030\n\024VTOL_STATE_"
    "UNDEFINED\020\000\022\037\n\033VTOL_STATE_TRANSITION_TO_"
    "FW\020\001\022\037\n\033VTOL_STATE_TRANSITION_TO_MC\020\002\022\021\n"
    "\rVTOL_STATE_MC\020\003\022\021\n\rVTOL_STATE_FW\020\004*\371\001\n\016"
    "StatusTextType\022\032\n\026STATUS_TEXT_TYPE_DEBUG"
    "\020\000\022\031\n\025STATUS_TEXT_TYPE_INFO\020\001\022\033\n\027STATUS_"
    "TEXT_TYPE_NOTICE\020\002\022\034\n\030STATUS_TEXT_TYPE_W"
    "ARNING\020\003\022\032\n\026STATUS_TEXT_TYPE_ERROR\020\004\022\035\n\031"
    "STATUS_TEXT_TYPE_CRITICAL\020\005\022\032\n\026STATUS_TE"
    "XT_TYPE_ALERT\020\006\022\036\n\032STATUS_TEXT_TYPE_EMER"
    "GENCY\020\007*\223\001\n\013LandedState\022\030\n\024LANDED_STATE_"
    "UNKNOWN\020\000\022\032\n\026LANDED_STATE_ON_GROUND\020\001\022\027\n"
    "\023LANDED_STATE_IN_AIR\020\002\022\033\n\027LANDED_STATE_T"
    "AKING_OFF\020\003\022\030\n\024LANDED_STATE_LANDING\020\0042\321\022"
    "\n\026TelemetryServerService\022\202\001\n\017PublishPosi"
    "tion\0223.mavsdk.rpc.telemetry_server.Publi"
    "shPositionRequest\0324.mavsdk.rpc.telemetry"
    "_server.PublishPositionResponse\"\004\200\265\030\001\022v\n"
    "\013PublishHome\022/.mavsdk.rpc.telemetry_serv"
    "er.PublishHomeRequest\0320.mavsdk.rpc.telem"
    "etry_server.PublishHomeResponse\"\004\200\265\030\001\022\205\001"
    "\n\020PublishSysStatus\0224.mavsdk.rpc.telemetr"
    "y_server.PublishSysStatusRequest\0325.mavsd"
    "k.rpc.telemetry_server.PublishSysStatusR"
    "esponse\"\004\200\265\030\001\022\232\001\n\027PublishExtendedSysStat"
    "e\022;.mavsdk.rpc.telemetry_server.PublishE"
    "xtendedSysStateRequest\032<.mavsdk.rpc.tele"
    "metry_server.PublishExtendedSysStateResp"
    "onse\"\004\200\265\030\001\022|\n\rPublishRawGps\0221.mavsdk.rpc"
    ".telemetry_server.PublishRawGpsRequest\0322"
    ".mavsdk.rpc.telemetry_server.PublishRawG"
    "psResponse\"\004\200\265\030\001\022\177\n\016PublishBattery\0222.mav"
    "sdk.rpc.telemetry_server.PublishBatteryR"
    "equest\0323.mavsdk.rpc.telemetry_server.Pub"
    "lishBatteryResponse\"\004\200\265\030\001\022\210\001\n\021PublishSta"
    "tusText\0225.mavsdk.rpc.telemetry_server.Pu"
    "blishStatusTextRequest\0326.mavsdk.rpc.tele"
    "metry_server.PublishStatusTextResponse\"\004"
    "\200\265\030\001\022\202\001\n\017PublishOdometry\0223.mavsdk.rpc.te"
    "lemetry_server.PublishOdometryRequest\0324."
    "mavsdk.rpc.telemetry_server.PublishOdome"
    "tryResponse\"\004\200\265\030\001\022\243\001\n\032PublishPositionVel"
    "ocityNed\022>.mavsdk.rpc.telemetry_server.P"
    "ublishPositionVelocityNedRequest\032\?.mavsd"
    "k.rpc.telemetry_server.PublishPositionVe"
    "locityNedResponse\"\004\200\265\030\001\022\213\001\n\022PublishGroun"
    "dTruth\0226.mavsdk.rpc.telemetry_server.Pub"
    "lishGroundTruthRequest\0327.mavsdk.rpc.tele"
    "metry_server.PublishGroundTruthResponse\""
    "\004\200\265\030\001\022s\n\nPublishImu\022..mavsdk.rpc.telemet"
    "ry_server.PublishImuRequest\032/.mavsdk.rpc"
    ".telemetry_server.PublishImuResponse\"\004\200\265"
    "\030\001\022\205\001\n\020PublishScaledImu\0224.mavsdk.rpc.tel"
    "emetry_server.PublishScaledImuRequest\0325."
    "mavsdk.rpc.telemetry_server.PublishScale"
    "dImuResponse\"\004\200\265\030\001\022|\n\rPublishRawImu\0221.ma"
    "vsdk.rpc.telemetry_server.PublishRawImuR"
    "equest\0322.mavsdk.rpc.telemetry_server.Pub"
    "lishRawImuResponse\"\004\200\265\030\001\022\221\001\n\024PublishUnix"
    "EpochTime\0228.mavsdk.rpc.telemetry_server."
    "PublishUnixEpochTimeRequest\0329.mavsdk.rpc"
    ".telemetry_server.PublishUnixEpochTimeRe"
    "sponse\"\004\200\265\030\001\022\224\001\n\025PublishDistanceSensor\0229"
    ".mavsdk.rpc.telemetry_server.PublishDist"
    "anceSensorRequest\032:.mavsdk.rpc.telemetry"
    "_server.PublishDistanceSensorResponse\"\004\200"
    "\265\030\001\022\202\001\n\017PublishAttitude\0223.mavsdk.rpc.tel"
    "emetry_server.PublishAttitudeRequest\0324.m"
    "avsdk.rpc.telemetry_server.PublishAttitu"
    "deResponse\"\004\200\265\030\001\022\246\001\n\033PublishVisualFlight"
    "RulesHud\022\?.mavsdk.rpc.telemetry_server.P"
    "ublishVisualFlightRulesHudRequest\032@.mavs"
    "dk.rpc.telemetry_server.PublishVisualFli"
    "ghtRulesHudResponse\"\004\200\265\030\001B2\n\032io.mavsdk.t"
    "elemetry_serverB\024TelemetryServerProtob\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto = {
    false,
    false,
    11405,
    descriptor_table_protodef_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    "telemetry_server/telemetry_server.proto",
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_once,
    descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto_deps,
    1,
    65,
    schemas,
    file_default_instances,
    TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto::offsets,
    file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    file_level_service_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
};
namespace mavsdk {
namespace rpc {
namespace telemetry_server {
const ::google::protobuf::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Odometry_MavFrame_internal_data_[] = {
    65536u, 32u, 163968u, };
bool Odometry_MavFrame_IsValid(int value) {
  return 0 <= value && value <= 18 && ((327937u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Odometry_MavFrame Odometry::MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_BODY_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_VISION_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_ESTIM_NED;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TelemetryServerResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TelemetryServerResult_Result_internal_data_[] = {
    524288u, 0u, };
bool TelemetryServerResult_Result_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_UNKNOWN;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_SUCCESS;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_NO_SYSTEM;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_CONNECTION_ERROR;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_BUSY;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_COMMAND_DENIED;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_TIMEOUT;
constexpr TelemetryServerResult_Result TelemetryServerResult::RESULT_UNSUPPORTED;
constexpr TelemetryServerResult_Result TelemetryServerResult::Result_MIN;
constexpr TelemetryServerResult_Result TelemetryServerResult::Result_MAX;
constexpr int TelemetryServerResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* FixType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t FixType_internal_data_[] = {
    458752u, 0u, };
bool FixType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* VtolState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t VtolState_internal_data_[] = {
    327680u, 0u, };
bool VtolState_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* StatusTextType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t StatusTextType_internal_data_[] = {
    524288u, 0u, };
bool StatusTextType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* LandedState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto);
  return file_level_enum_descriptors_telemetry_5fserver_2ftelemetry_5fserver_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t LandedState_internal_data_[] = {
    327680u, 0u, };
bool LandedState_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class PublishPositionRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishPositionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_._has_bits_);
};

PublishPositionRequest::PublishPositionRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishPositionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishPositionRequest::PublishPositionRequest(
    ::google::protobuf::Arena* arena,
    const PublishPositionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishPositionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Position>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.velocity_ned_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::VelocityNed>(
                              arena, *from._impl_.velocity_ned_)
                        : nullptr;
  _impl_.heading_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Heading>(
                              arena, *from._impl_.heading_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishPositionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, heading_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::heading_));
}
PublishPositionRequest::~PublishPositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  SharedDtor(*this);
}
inline void PublishPositionRequest::SharedDtor(MessageLite& self) {
  PublishPositionRequest& this_ = static_cast<PublishPositionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_;
  delete this_._impl_.velocity_ned_;
  delete this_._impl_.heading_;
  this_._impl_.~Impl_();
}

inline void* PublishPositionRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishPositionRequest(arena);
}
constexpr auto PublishPositionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishPositionRequest),
                                            alignof(PublishPositionRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishPositionRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishPositionRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishPositionRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishPositionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishPositionRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishPositionRequest>(), &PublishPositionRequest::ByteSizeLong,
            &PublishPositionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_._cached_size_),
        false,
    },
    &PublishPositionRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishPositionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> PublishPositionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishPositionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.telemetry_server.Position position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.position_)}},
    // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.velocity_ned_)}},
    // .mavsdk.rpc.telemetry_server.Heading heading = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.heading_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Position position = 1;
    {PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
    {PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.velocity_ned_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.Heading heading = 3;
    {PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.heading_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Position>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::VelocityNed>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Heading>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ned_ != nullptr);
      _impl_.velocity_ned_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.heading_ != nullptr);
      _impl_.heading_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishPositionRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishPositionRequest& this_ = static_cast<const PublishPositionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishPositionRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishPositionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Position position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.velocity_ned_, this_._impl_.velocity_ned_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.Heading heading = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.heading_, this_._impl_.heading_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishPositionRequest::ByteSizeLong(const MessageLite& base) {
          const PublishPositionRequest& this_ = static_cast<const PublishPositionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishPositionRequest::ByteSizeLong() const {
          const PublishPositionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .mavsdk.rpc.telemetry_server.Position position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_ned_);
            }
            // .mavsdk.rpc.telemetry_server.Heading heading = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.heading_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishPositionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishPositionRequest*>(&to_msg);
  auto& from = static_cast<const PublishPositionRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Position>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.velocity_ned_ != nullptr);
      if (_this->_impl_.velocity_ned_ == nullptr) {
        _this->_impl_.velocity_ned_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::VelocityNed>(arena, *from._impl_.velocity_ned_);
      } else {
        _this->_impl_.velocity_ned_->MergeFrom(*from._impl_.velocity_ned_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.heading_ != nullptr);
      if (_this->_impl_.heading_ == nullptr) {
        _this->_impl_.heading_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Heading>(arena, *from._impl_.heading_);
      } else {
        _this->_impl_.heading_->MergeFrom(*from._impl_.heading_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishPositionRequest::CopyFrom(const PublishPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishPositionRequest::InternalSwap(PublishPositionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.heading_)
      + sizeof(PublishPositionRequest::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(PublishPositionRequest, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata PublishPositionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishHomeRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishHomeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishHomeRequest, _impl_._has_bits_);
};

PublishHomeRequest::PublishHomeRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishHomeRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishHomeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishHomeRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishHomeRequest::PublishHomeRequest(
    ::google::protobuf::Arena* arena,
    const PublishHomeRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishHomeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.home_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Position>(
                              arena, *from._impl_.home_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishHomeRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishHomeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishHomeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.home_ = {};
}
PublishHomeRequest::~PublishHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  SharedDtor(*this);
}
inline void PublishHomeRequest::SharedDtor(MessageLite& self) {
  PublishHomeRequest& this_ = static_cast<PublishHomeRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.home_;
  this_._impl_.~Impl_();
}

inline void* PublishHomeRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishHomeRequest(arena);
}
constexpr auto PublishHomeRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishHomeRequest),
                                            alignof(PublishHomeRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishHomeRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishHomeRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishHomeRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishHomeRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishHomeRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishHomeRequest>(), &PublishHomeRequest::ByteSizeLong,
            &PublishHomeRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishHomeRequest, _impl_._cached_size_),
        false,
    },
    &PublishHomeRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishHomeRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishHomeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishHomeRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishHomeRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.Position home = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishHomeRequest, _impl_.home_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Position home = 1;
    {PROTOBUF_FIELD_OFFSET(PublishHomeRequest, _impl_.home_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Position>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.home_ != nullptr);
    _impl_.home_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishHomeRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishHomeRequest& this_ = static_cast<const PublishHomeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishHomeRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishHomeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Position home = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.home_, this_._impl_.home_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishHomeRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishHomeRequest::ByteSizeLong(const MessageLite& base) {
          const PublishHomeRequest& this_ = static_cast<const PublishHomeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishHomeRequest::ByteSizeLong() const {
          const PublishHomeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.Position home = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.home_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishHomeRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishHomeRequest*>(&to_msg);
  auto& from = static_cast<const PublishHomeRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.home_ != nullptr);
    if (_this->_impl_.home_ == nullptr) {
      _this->_impl_.home_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Position>(arena, *from._impl_.home_);
    } else {
      _this->_impl_.home_->MergeFrom(*from._impl_.home_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishHomeRequest::CopyFrom(const PublishHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishHomeRequest::InternalSwap(PublishHomeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.home_, other->_impl_.home_);
}

::google::protobuf::Metadata PublishHomeRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishSysStatusRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishSysStatusRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_._has_bits_);
};

PublishSysStatusRequest::PublishSysStatusRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishSysStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishSysStatusRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishSysStatusRequest::PublishSysStatusRequest(
    ::google::protobuf::Arena* arena,
    const PublishSysStatusRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishSysStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.battery_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Battery>(
                              arena, *from._impl_.battery_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rc_receiver_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rc_receiver_status_),
           offsetof(Impl_, gps_status_) -
               offsetof(Impl_, rc_receiver_status_) +
               sizeof(Impl_::gps_status_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishSysStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishSysStatusRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, battery_),
           0,
           offsetof(Impl_, gps_status_) -
               offsetof(Impl_, battery_) +
               sizeof(Impl_::gps_status_));
}
PublishSysStatusRequest::~PublishSysStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  SharedDtor(*this);
}
inline void PublishSysStatusRequest::SharedDtor(MessageLite& self) {
  PublishSysStatusRequest& this_ = static_cast<PublishSysStatusRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.battery_;
  this_._impl_.~Impl_();
}

inline void* PublishSysStatusRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishSysStatusRequest(arena);
}
constexpr auto PublishSysStatusRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishSysStatusRequest),
                                            alignof(PublishSysStatusRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishSysStatusRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishSysStatusRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishSysStatusRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishSysStatusRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishSysStatusRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishSysStatusRequest>(), &PublishSysStatusRequest::ByteSizeLong,
            &PublishSysStatusRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_._cached_size_),
        false,
    },
    &PublishSysStatusRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishSysStatusRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> PublishSysStatusRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishSysStatusRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.telemetry_server.Battery battery = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.battery_)}},
    // bool rc_receiver_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PublishSysStatusRequest, _impl_.rc_receiver_status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.rc_receiver_status_)}},
    // bool gyro_status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PublishSysStatusRequest, _impl_.gyro_status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.gyro_status_)}},
    // bool accel_status = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PublishSysStatusRequest, _impl_.accel_status_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.accel_status_)}},
    // bool mag_status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PublishSysStatusRequest, _impl_.mag_status_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.mag_status_)}},
    // bool gps_status = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PublishSysStatusRequest, _impl_.gps_status_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.gps_status_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Battery battery = 1;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.battery_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool rc_receiver_status = 2;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.rc_receiver_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool gyro_status = 3;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.gyro_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool accel_status = 4;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.accel_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool mag_status = 5;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.mag_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool gps_status = 6;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.gps_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Battery>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishSysStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.battery_ != nullptr);
    _impl_.battery_->Clear();
  }
  ::memset(&_impl_.rc_receiver_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gps_status_) -
      reinterpret_cast<char*>(&_impl_.rc_receiver_status_)) + sizeof(_impl_.gps_status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishSysStatusRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishSysStatusRequest& this_ = static_cast<const PublishSysStatusRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishSysStatusRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishSysStatusRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Battery battery = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.battery_, this_._impl_.battery_->GetCachedSize(), target,
                stream);
          }

          // bool rc_receiver_status = 2;
          if (this_._internal_rc_receiver_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_rc_receiver_status(), target);
          }

          // bool gyro_status = 3;
          if (this_._internal_gyro_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_gyro_status(), target);
          }

          // bool accel_status = 4;
          if (this_._internal_accel_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_accel_status(), target);
          }

          // bool mag_status = 5;
          if (this_._internal_mag_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_mag_status(), target);
          }

          // bool gps_status = 6;
          if (this_._internal_gps_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_gps_status(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishSysStatusRequest::ByteSizeLong(const MessageLite& base) {
          const PublishSysStatusRequest& this_ = static_cast<const PublishSysStatusRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishSysStatusRequest::ByteSizeLong() const {
          const PublishSysStatusRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .mavsdk.rpc.telemetry_server.Battery battery = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.battery_);
            }
          }
           {
            // bool rc_receiver_status = 2;
            if (this_._internal_rc_receiver_status() != 0) {
              total_size += 2;
            }
            // bool gyro_status = 3;
            if (this_._internal_gyro_status() != 0) {
              total_size += 2;
            }
            // bool accel_status = 4;
            if (this_._internal_accel_status() != 0) {
              total_size += 2;
            }
            // bool mag_status = 5;
            if (this_._internal_mag_status() != 0) {
              total_size += 2;
            }
            // bool gps_status = 6;
            if (this_._internal_gps_status() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishSysStatusRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishSysStatusRequest*>(&to_msg);
  auto& from = static_cast<const PublishSysStatusRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.battery_ != nullptr);
    if (_this->_impl_.battery_ == nullptr) {
      _this->_impl_.battery_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Battery>(arena, *from._impl_.battery_);
    } else {
      _this->_impl_.battery_->MergeFrom(*from._impl_.battery_);
    }
  }
  if (from._internal_rc_receiver_status() != 0) {
    _this->_impl_.rc_receiver_status_ = from._impl_.rc_receiver_status_;
  }
  if (from._internal_gyro_status() != 0) {
    _this->_impl_.gyro_status_ = from._impl_.gyro_status_;
  }
  if (from._internal_accel_status() != 0) {
    _this->_impl_.accel_status_ = from._impl_.accel_status_;
  }
  if (from._internal_mag_status() != 0) {
    _this->_impl_.mag_status_ = from._impl_.mag_status_;
  }
  if (from._internal_gps_status() != 0) {
    _this->_impl_.gps_status_ = from._impl_.gps_status_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishSysStatusRequest::CopyFrom(const PublishSysStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishSysStatusRequest::InternalSwap(PublishSysStatusRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.gps_status_)
      + sizeof(PublishSysStatusRequest::_impl_.gps_status_)
      - PROTOBUF_FIELD_OFFSET(PublishSysStatusRequest, _impl_.battery_)>(
          reinterpret_cast<char*>(&_impl_.battery_),
          reinterpret_cast<char*>(&other->_impl_.battery_));
}

::google::protobuf::Metadata PublishSysStatusRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishExtendedSysStateRequest::_Internal {
 public:
};

PublishExtendedSysStateRequest::PublishExtendedSysStateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
}
PublishExtendedSysStateRequest::PublishExtendedSysStateRequest(
    ::google::protobuf::Arena* arena, const PublishExtendedSysStateRequest& from)
    : PublishExtendedSysStateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PublishExtendedSysStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishExtendedSysStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vtol_state_),
           0,
           offsetof(Impl_, landed_state_) -
               offsetof(Impl_, vtol_state_) +
               sizeof(Impl_::landed_state_));
}
PublishExtendedSysStateRequest::~PublishExtendedSysStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  SharedDtor(*this);
}
inline void PublishExtendedSysStateRequest::SharedDtor(MessageLite& self) {
  PublishExtendedSysStateRequest& this_ = static_cast<PublishExtendedSysStateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PublishExtendedSysStateRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishExtendedSysStateRequest(arena);
}
constexpr auto PublishExtendedSysStateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishExtendedSysStateRequest),
                                            alignof(PublishExtendedSysStateRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishExtendedSysStateRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishExtendedSysStateRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishExtendedSysStateRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishExtendedSysStateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishExtendedSysStateRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishExtendedSysStateRequest>(), &PublishExtendedSysStateRequest::ByteSizeLong,
            &PublishExtendedSysStateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_._cached_size_),
        false,
    },
    &PublishExtendedSysStateRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishExtendedSysStateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> PublishExtendedSysStateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishExtendedSysStateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PublishExtendedSysStateRequest, _impl_.landed_state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_.landed_state_)}},
    // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PublishExtendedSysStateRequest, _impl_.vtol_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_.vtol_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
    {PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_.vtol_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
    {PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_.landed_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PublishExtendedSysStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vtol_state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.landed_state_) -
      reinterpret_cast<char*>(&_impl_.vtol_state_)) + sizeof(_impl_.landed_state_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishExtendedSysStateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishExtendedSysStateRequest& this_ = static_cast<const PublishExtendedSysStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishExtendedSysStateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishExtendedSysStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
          if (this_._internal_vtol_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_vtol_state(), target);
          }

          // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
          if (this_._internal_landed_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_landed_state(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishExtendedSysStateRequest::ByteSizeLong(const MessageLite& base) {
          const PublishExtendedSysStateRequest& this_ = static_cast<const PublishExtendedSysStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishExtendedSysStateRequest::ByteSizeLong() const {
          const PublishExtendedSysStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
            if (this_._internal_vtol_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_vtol_state());
            }
            // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
            if (this_._internal_landed_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_landed_state());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishExtendedSysStateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishExtendedSysStateRequest*>(&to_msg);
  auto& from = static_cast<const PublishExtendedSysStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vtol_state() != 0) {
    _this->_impl_.vtol_state_ = from._impl_.vtol_state_;
  }
  if (from._internal_landed_state() != 0) {
    _this->_impl_.landed_state_ = from._impl_.landed_state_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishExtendedSysStateRequest::CopyFrom(const PublishExtendedSysStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishExtendedSysStateRequest::InternalSwap(PublishExtendedSysStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_.landed_state_)
      + sizeof(PublishExtendedSysStateRequest::_impl_.landed_state_)
      - PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateRequest, _impl_.vtol_state_)>(
          reinterpret_cast<char*>(&_impl_.vtol_state_),
          reinterpret_cast<char*>(&other->_impl_.vtol_state_));
}

::google::protobuf::Metadata PublishExtendedSysStateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishInAirRequest::_Internal {
 public:
};

PublishInAirRequest::PublishInAirRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishInAirRequest)
}
PublishInAirRequest::PublishInAirRequest(
    ::google::protobuf::Arena* arena, const PublishInAirRequest& from)
    : PublishInAirRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PublishInAirRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishInAirRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_in_air_ = {};
}
PublishInAirRequest::~PublishInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  SharedDtor(*this);
}
inline void PublishInAirRequest::SharedDtor(MessageLite& self) {
  PublishInAirRequest& this_ = static_cast<PublishInAirRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PublishInAirRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishInAirRequest(arena);
}
constexpr auto PublishInAirRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishInAirRequest),
                                            alignof(PublishInAirRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishInAirRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishInAirRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishInAirRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishInAirRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishInAirRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishInAirRequest>(), &PublishInAirRequest::ByteSizeLong,
            &PublishInAirRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishInAirRequest, _impl_._cached_size_),
        false,
    },
    &PublishInAirRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishInAirRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> PublishInAirRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishInAirRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool is_in_air = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PublishInAirRequest, _impl_.is_in_air_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PublishInAirRequest, _impl_.is_in_air_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_in_air = 1;
    {PROTOBUF_FIELD_OFFSET(PublishInAirRequest, _impl_.is_in_air_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PublishInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_in_air_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishInAirRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishInAirRequest& this_ = static_cast<const PublishInAirRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishInAirRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishInAirRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool is_in_air = 1;
          if (this_._internal_is_in_air() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_is_in_air(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishInAirRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishInAirRequest::ByteSizeLong(const MessageLite& base) {
          const PublishInAirRequest& this_ = static_cast<const PublishInAirRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishInAirRequest::ByteSizeLong() const {
          const PublishInAirRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool is_in_air = 1;
            if (this_._internal_is_in_air() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishInAirRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishInAirRequest*>(&to_msg);
  auto& from = static_cast<const PublishInAirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_in_air() != 0) {
    _this->_impl_.is_in_air_ = from._impl_.is_in_air_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishInAirRequest::CopyFrom(const PublishInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishInAirRequest::InternalSwap(PublishInAirRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.is_in_air_, other->_impl_.is_in_air_);
}

::google::protobuf::Metadata PublishInAirRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishLandedStateRequest::_Internal {
 public:
};

PublishLandedStateRequest::PublishLandedStateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
}
PublishLandedStateRequest::PublishLandedStateRequest(
    ::google::protobuf::Arena* arena, const PublishLandedStateRequest& from)
    : PublishLandedStateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PublishLandedStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishLandedStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.landed_state_ = {};
}
PublishLandedStateRequest::~PublishLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  SharedDtor(*this);
}
inline void PublishLandedStateRequest::SharedDtor(MessageLite& self) {
  PublishLandedStateRequest& this_ = static_cast<PublishLandedStateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PublishLandedStateRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishLandedStateRequest(arena);
}
constexpr auto PublishLandedStateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishLandedStateRequest),
                                            alignof(PublishLandedStateRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishLandedStateRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishLandedStateRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishLandedStateRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishLandedStateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishLandedStateRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishLandedStateRequest>(), &PublishLandedStateRequest::ByteSizeLong,
            &PublishLandedStateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishLandedStateRequest, _impl_._cached_size_),
        false,
    },
    &PublishLandedStateRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishLandedStateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> PublishLandedStateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishLandedStateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PublishLandedStateRequest, _impl_.landed_state_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PublishLandedStateRequest, _impl_.landed_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
    {PROTOBUF_FIELD_OFFSET(PublishLandedStateRequest, _impl_.landed_state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PublishLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.landed_state_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishLandedStateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishLandedStateRequest& this_ = static_cast<const PublishLandedStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishLandedStateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishLandedStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
          if (this_._internal_landed_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_landed_state(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishLandedStateRequest::ByteSizeLong(const MessageLite& base) {
          const PublishLandedStateRequest& this_ = static_cast<const PublishLandedStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishLandedStateRequest::ByteSizeLong() const {
          const PublishLandedStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
            if (this_._internal_landed_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_landed_state());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishLandedStateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishLandedStateRequest*>(&to_msg);
  auto& from = static_cast<const PublishLandedStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_landed_state() != 0) {
    _this->_impl_.landed_state_ = from._impl_.landed_state_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishLandedStateRequest::CopyFrom(const PublishLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishLandedStateRequest::InternalSwap(PublishLandedStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.landed_state_, other->_impl_.landed_state_);
}

::google::protobuf::Metadata PublishLandedStateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishRawGpsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishRawGpsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_._has_bits_);
};

PublishRawGpsRequest::PublishRawGpsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawGpsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishRawGpsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishRawGpsRequest::PublishRawGpsRequest(
    ::google::protobuf::Arena* arena,
    const PublishRawGpsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishRawGpsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.raw_gps_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::RawGps>(
                              arena, *from._impl_.raw_gps_)
                        : nullptr;
  _impl_.gps_info_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::GpsInfo>(
                              arena, *from._impl_.gps_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawGpsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishRawGpsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, raw_gps_),
           0,
           offsetof(Impl_, gps_info_) -
               offsetof(Impl_, raw_gps_) +
               sizeof(Impl_::gps_info_));
}
PublishRawGpsRequest::~PublishRawGpsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  SharedDtor(*this);
}
inline void PublishRawGpsRequest::SharedDtor(MessageLite& self) {
  PublishRawGpsRequest& this_ = static_cast<PublishRawGpsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.raw_gps_;
  delete this_._impl_.gps_info_;
  this_._impl_.~Impl_();
}

inline void* PublishRawGpsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishRawGpsRequest(arena);
}
constexpr auto PublishRawGpsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishRawGpsRequest),
                                            alignof(PublishRawGpsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishRawGpsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishRawGpsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishRawGpsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishRawGpsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishRawGpsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishRawGpsRequest>(), &PublishRawGpsRequest::ByteSizeLong,
            &PublishRawGpsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_._cached_size_),
        false,
    },
    &PublishRawGpsRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishRawGpsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PublishRawGpsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishRawGpsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_.gps_info_)}},
    // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_.raw_gps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
    {PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_.raw_gps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
    {PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_.gps_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::RawGps>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::GpsInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishRawGpsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.raw_gps_ != nullptr);
      _impl_.raw_gps_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.gps_info_ != nullptr);
      _impl_.gps_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishRawGpsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishRawGpsRequest& this_ = static_cast<const PublishRawGpsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishRawGpsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishRawGpsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.raw_gps_, this_._impl_.raw_gps_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.gps_info_, this_._impl_.gps_info_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishRawGpsRequest::ByteSizeLong(const MessageLite& base) {
          const PublishRawGpsRequest& this_ = static_cast<const PublishRawGpsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishRawGpsRequest::ByteSizeLong() const {
          const PublishRawGpsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.raw_gps_);
            }
            // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.gps_info_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishRawGpsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishRawGpsRequest*>(&to_msg);
  auto& from = static_cast<const PublishRawGpsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.raw_gps_ != nullptr);
      if (_this->_impl_.raw_gps_ == nullptr) {
        _this->_impl_.raw_gps_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::RawGps>(arena, *from._impl_.raw_gps_);
      } else {
        _this->_impl_.raw_gps_->MergeFrom(*from._impl_.raw_gps_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.gps_info_ != nullptr);
      if (_this->_impl_.gps_info_ == nullptr) {
        _this->_impl_.gps_info_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::GpsInfo>(arena, *from._impl_.gps_info_);
      } else {
        _this->_impl_.gps_info_->MergeFrom(*from._impl_.gps_info_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishRawGpsRequest::CopyFrom(const PublishRawGpsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishRawGpsRequest::InternalSwap(PublishRawGpsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_.gps_info_)
      + sizeof(PublishRawGpsRequest::_impl_.gps_info_)
      - PROTOBUF_FIELD_OFFSET(PublishRawGpsRequest, _impl_.raw_gps_)>(
          reinterpret_cast<char*>(&_impl_.raw_gps_),
          reinterpret_cast<char*>(&other->_impl_.raw_gps_));
}

::google::protobuf::Metadata PublishRawGpsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishBatteryRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishBatteryRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishBatteryRequest, _impl_._has_bits_);
};

PublishBatteryRequest::PublishBatteryRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishBatteryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishBatteryRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishBatteryRequest::PublishBatteryRequest(
    ::google::protobuf::Arena* arena,
    const PublishBatteryRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishBatteryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.battery_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Battery>(
                              arena, *from._impl_.battery_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishBatteryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishBatteryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.battery_ = {};
}
PublishBatteryRequest::~PublishBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  SharedDtor(*this);
}
inline void PublishBatteryRequest::SharedDtor(MessageLite& self) {
  PublishBatteryRequest& this_ = static_cast<PublishBatteryRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.battery_;
  this_._impl_.~Impl_();
}

inline void* PublishBatteryRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishBatteryRequest(arena);
}
constexpr auto PublishBatteryRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishBatteryRequest),
                                            alignof(PublishBatteryRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishBatteryRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishBatteryRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishBatteryRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishBatteryRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishBatteryRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishBatteryRequest>(), &PublishBatteryRequest::ByteSizeLong,
            &PublishBatteryRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishBatteryRequest, _impl_._cached_size_),
        false,
    },
    &PublishBatteryRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishBatteryRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishBatteryRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishBatteryRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishBatteryRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.Battery battery = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishBatteryRequest, _impl_.battery_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Battery battery = 1;
    {PROTOBUF_FIELD_OFFSET(PublishBatteryRequest, _impl_.battery_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Battery>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.battery_ != nullptr);
    _impl_.battery_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishBatteryRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishBatteryRequest& this_ = static_cast<const PublishBatteryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishBatteryRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishBatteryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Battery battery = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.battery_, this_._impl_.battery_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishBatteryRequest::ByteSizeLong(const MessageLite& base) {
          const PublishBatteryRequest& this_ = static_cast<const PublishBatteryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishBatteryRequest::ByteSizeLong() const {
          const PublishBatteryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.Battery battery = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.battery_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishBatteryRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishBatteryRequest*>(&to_msg);
  auto& from = static_cast<const PublishBatteryRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.battery_ != nullptr);
    if (_this->_impl_.battery_ == nullptr) {
      _this->_impl_.battery_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Battery>(arena, *from._impl_.battery_);
    } else {
      _this->_impl_.battery_->MergeFrom(*from._impl_.battery_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishBatteryRequest::CopyFrom(const PublishBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishBatteryRequest::InternalSwap(PublishBatteryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.battery_, other->_impl_.battery_);
}

::google::protobuf::Metadata PublishBatteryRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishRcStatusRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishRcStatusRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishRcStatusRequest, _impl_._has_bits_);
};

PublishRcStatusRequest::PublishRcStatusRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishRcStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishRcStatusRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishRcStatusRequest::PublishRcStatusRequest(
    ::google::protobuf::Arena* arena,
    const PublishRcStatusRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishRcStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.rc_status_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::RcStatus>(
                              arena, *from._impl_.rc_status_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishRcStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishRcStatusRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rc_status_ = {};
}
PublishRcStatusRequest::~PublishRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  SharedDtor(*this);
}
inline void PublishRcStatusRequest::SharedDtor(MessageLite& self) {
  PublishRcStatusRequest& this_ = static_cast<PublishRcStatusRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.rc_status_;
  this_._impl_.~Impl_();
}

inline void* PublishRcStatusRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishRcStatusRequest(arena);
}
constexpr auto PublishRcStatusRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishRcStatusRequest),
                                            alignof(PublishRcStatusRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishRcStatusRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishRcStatusRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishRcStatusRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishRcStatusRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishRcStatusRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishRcStatusRequest>(), &PublishRcStatusRequest::ByteSizeLong,
            &PublishRcStatusRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishRcStatusRequest, _impl_._cached_size_),
        false,
    },
    &PublishRcStatusRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishRcStatusRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishRcStatusRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishRcStatusRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishRcStatusRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishRcStatusRequest, _impl_.rc_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
    {PROTOBUF_FIELD_OFFSET(PublishRcStatusRequest, _impl_.rc_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::RcStatus>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.rc_status_ != nullptr);
    _impl_.rc_status_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishRcStatusRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishRcStatusRequest& this_ = static_cast<const PublishRcStatusRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishRcStatusRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishRcStatusRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.rc_status_, this_._impl_.rc_status_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishRcStatusRequest::ByteSizeLong(const MessageLite& base) {
          const PublishRcStatusRequest& this_ = static_cast<const PublishRcStatusRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishRcStatusRequest::ByteSizeLong() const {
          const PublishRcStatusRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rc_status_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishRcStatusRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishRcStatusRequest*>(&to_msg);
  auto& from = static_cast<const PublishRcStatusRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.rc_status_ != nullptr);
    if (_this->_impl_.rc_status_ == nullptr) {
      _this->_impl_.rc_status_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::RcStatus>(arena, *from._impl_.rc_status_);
    } else {
      _this->_impl_.rc_status_->MergeFrom(*from._impl_.rc_status_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishRcStatusRequest::CopyFrom(const PublishRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishRcStatusRequest::InternalSwap(PublishRcStatusRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rc_status_, other->_impl_.rc_status_);
}

::google::protobuf::Metadata PublishRcStatusRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishStatusTextRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishStatusTextRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishStatusTextRequest, _impl_._has_bits_);
};

PublishStatusTextRequest::PublishStatusTextRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishStatusTextRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishStatusTextRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishStatusTextRequest::PublishStatusTextRequest(
    ::google::protobuf::Arena* arena,
    const PublishStatusTextRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishStatusTextRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.status_text_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::StatusText>(
                              arena, *from._impl_.status_text_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishStatusTextRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishStatusTextRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_text_ = {};
}
PublishStatusTextRequest::~PublishStatusTextRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  SharedDtor(*this);
}
inline void PublishStatusTextRequest::SharedDtor(MessageLite& self) {
  PublishStatusTextRequest& this_ = static_cast<PublishStatusTextRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.status_text_;
  this_._impl_.~Impl_();
}

inline void* PublishStatusTextRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishStatusTextRequest(arena);
}
constexpr auto PublishStatusTextRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishStatusTextRequest),
                                            alignof(PublishStatusTextRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishStatusTextRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishStatusTextRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishStatusTextRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishStatusTextRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishStatusTextRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishStatusTextRequest>(), &PublishStatusTextRequest::ByteSizeLong,
            &PublishStatusTextRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishStatusTextRequest, _impl_._cached_size_),
        false,
    },
    &PublishStatusTextRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishStatusTextRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishStatusTextRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishStatusTextRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishStatusTextRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishStatusTextRequest, _impl_.status_text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
    {PROTOBUF_FIELD_OFFSET(PublishStatusTextRequest, _impl_.status_text_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::StatusText>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishStatusTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.status_text_ != nullptr);
    _impl_.status_text_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishStatusTextRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishStatusTextRequest& this_ = static_cast<const PublishStatusTextRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishStatusTextRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishStatusTextRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.status_text_, this_._impl_.status_text_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishStatusTextRequest::ByteSizeLong(const MessageLite& base) {
          const PublishStatusTextRequest& this_ = static_cast<const PublishStatusTextRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishStatusTextRequest::ByteSizeLong() const {
          const PublishStatusTextRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.status_text_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishStatusTextRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishStatusTextRequest*>(&to_msg);
  auto& from = static_cast<const PublishStatusTextRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.status_text_ != nullptr);
    if (_this->_impl_.status_text_ == nullptr) {
      _this->_impl_.status_text_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::StatusText>(arena, *from._impl_.status_text_);
    } else {
      _this->_impl_.status_text_->MergeFrom(*from._impl_.status_text_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishStatusTextRequest::CopyFrom(const PublishStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishStatusTextRequest::InternalSwap(PublishStatusTextRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.status_text_, other->_impl_.status_text_);
}

::google::protobuf::Metadata PublishStatusTextRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishOdometryRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishOdometryRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishOdometryRequest, _impl_._has_bits_);
};

PublishOdometryRequest::PublishOdometryRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishOdometryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishOdometryRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishOdometryRequest::PublishOdometryRequest(
    ::google::protobuf::Arena* arena,
    const PublishOdometryRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishOdometryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.odometry_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Odometry>(
                              arena, *from._impl_.odometry_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishOdometryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishOdometryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.odometry_ = {};
}
PublishOdometryRequest::~PublishOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  SharedDtor(*this);
}
inline void PublishOdometryRequest::SharedDtor(MessageLite& self) {
  PublishOdometryRequest& this_ = static_cast<PublishOdometryRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.odometry_;
  this_._impl_.~Impl_();
}

inline void* PublishOdometryRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishOdometryRequest(arena);
}
constexpr auto PublishOdometryRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishOdometryRequest),
                                            alignof(PublishOdometryRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishOdometryRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishOdometryRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishOdometryRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishOdometryRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishOdometryRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishOdometryRequest>(), &PublishOdometryRequest::ByteSizeLong,
            &PublishOdometryRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishOdometryRequest, _impl_._cached_size_),
        false,
    },
    &PublishOdometryRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishOdometryRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishOdometryRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishOdometryRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishOdometryRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishOdometryRequest, _impl_.odometry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
    {PROTOBUF_FIELD_OFFSET(PublishOdometryRequest, _impl_.odometry_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Odometry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.odometry_ != nullptr);
    _impl_.odometry_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishOdometryRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishOdometryRequest& this_ = static_cast<const PublishOdometryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishOdometryRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishOdometryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.odometry_, this_._impl_.odometry_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishOdometryRequest::ByteSizeLong(const MessageLite& base) {
          const PublishOdometryRequest& this_ = static_cast<const PublishOdometryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishOdometryRequest::ByteSizeLong() const {
          const PublishOdometryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.odometry_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishOdometryRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishOdometryRequest*>(&to_msg);
  auto& from = static_cast<const PublishOdometryRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.odometry_ != nullptr);
    if (_this->_impl_.odometry_ == nullptr) {
      _this->_impl_.odometry_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Odometry>(arena, *from._impl_.odometry_);
    } else {
      _this->_impl_.odometry_->MergeFrom(*from._impl_.odometry_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishOdometryRequest::CopyFrom(const PublishOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishOdometryRequest::InternalSwap(PublishOdometryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.odometry_, other->_impl_.odometry_);
}

::google::protobuf::Metadata PublishOdometryRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishPositionVelocityNedRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishPositionVelocityNedRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedRequest, _impl_._has_bits_);
};

PublishPositionVelocityNedRequest::PublishPositionVelocityNedRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionVelocityNedRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishPositionVelocityNedRequest::PublishPositionVelocityNedRequest(
    ::google::protobuf::Arena* arena,
    const PublishPositionVelocityNedRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishPositionVelocityNedRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_velocity_ned_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::PositionVelocityNed>(
                              arena, *from._impl_.position_velocity_ned_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionVelocityNedRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishPositionVelocityNedRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.position_velocity_ned_ = {};
}
PublishPositionVelocityNedRequest::~PublishPositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  SharedDtor(*this);
}
inline void PublishPositionVelocityNedRequest::SharedDtor(MessageLite& self) {
  PublishPositionVelocityNedRequest& this_ = static_cast<PublishPositionVelocityNedRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_velocity_ned_;
  this_._impl_.~Impl_();
}

inline void* PublishPositionVelocityNedRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishPositionVelocityNedRequest(arena);
}
constexpr auto PublishPositionVelocityNedRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishPositionVelocityNedRequest),
                                            alignof(PublishPositionVelocityNedRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishPositionVelocityNedRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishPositionVelocityNedRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishPositionVelocityNedRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishPositionVelocityNedRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishPositionVelocityNedRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishPositionVelocityNedRequest>(), &PublishPositionVelocityNedRequest::ByteSizeLong,
            &PublishPositionVelocityNedRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedRequest, _impl_._cached_size_),
        false,
    },
    &PublishPositionVelocityNedRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishPositionVelocityNedRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishPositionVelocityNedRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedRequest, _impl_.position_velocity_ned_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
    {PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedRequest, _impl_.position_velocity_ned_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PositionVelocityNed>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishPositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_velocity_ned_ != nullptr);
    _impl_.position_velocity_ned_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishPositionVelocityNedRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishPositionVelocityNedRequest& this_ = static_cast<const PublishPositionVelocityNedRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishPositionVelocityNedRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishPositionVelocityNedRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_velocity_ned_, this_._impl_.position_velocity_ned_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishPositionVelocityNedRequest::ByteSizeLong(const MessageLite& base) {
          const PublishPositionVelocityNedRequest& this_ = static_cast<const PublishPositionVelocityNedRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishPositionVelocityNedRequest::ByteSizeLong() const {
          const PublishPositionVelocityNedRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_velocity_ned_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishPositionVelocityNedRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishPositionVelocityNedRequest*>(&to_msg);
  auto& from = static_cast<const PublishPositionVelocityNedRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_velocity_ned_ != nullptr);
    if (_this->_impl_.position_velocity_ned_ == nullptr) {
      _this->_impl_.position_velocity_ned_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::PositionVelocityNed>(arena, *from._impl_.position_velocity_ned_);
    } else {
      _this->_impl_.position_velocity_ned_->MergeFrom(*from._impl_.position_velocity_ned_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishPositionVelocityNedRequest::CopyFrom(const PublishPositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishPositionVelocityNedRequest::InternalSwap(PublishPositionVelocityNedRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.position_velocity_ned_, other->_impl_.position_velocity_ned_);
}

::google::protobuf::Metadata PublishPositionVelocityNedRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishGroundTruthRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishGroundTruthRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishGroundTruthRequest, _impl_._has_bits_);
};

PublishGroundTruthRequest::PublishGroundTruthRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishGroundTruthRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishGroundTruthRequest::PublishGroundTruthRequest(
    ::google::protobuf::Arena* arena,
    const PublishGroundTruthRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishGroundTruthRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ground_truth_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::GroundTruth>(
                              arena, *from._impl_.ground_truth_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishGroundTruthRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishGroundTruthRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ground_truth_ = {};
}
PublishGroundTruthRequest::~PublishGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  SharedDtor(*this);
}
inline void PublishGroundTruthRequest::SharedDtor(MessageLite& self) {
  PublishGroundTruthRequest& this_ = static_cast<PublishGroundTruthRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.ground_truth_;
  this_._impl_.~Impl_();
}

inline void* PublishGroundTruthRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishGroundTruthRequest(arena);
}
constexpr auto PublishGroundTruthRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishGroundTruthRequest),
                                            alignof(PublishGroundTruthRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishGroundTruthRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishGroundTruthRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishGroundTruthRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishGroundTruthRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishGroundTruthRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishGroundTruthRequest>(), &PublishGroundTruthRequest::ByteSizeLong,
            &PublishGroundTruthRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishGroundTruthRequest, _impl_._cached_size_),
        false,
    },
    &PublishGroundTruthRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishGroundTruthRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishGroundTruthRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishGroundTruthRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishGroundTruthRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishGroundTruthRequest, _impl_.ground_truth_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
    {PROTOBUF_FIELD_OFFSET(PublishGroundTruthRequest, _impl_.ground_truth_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::GroundTruth>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ground_truth_ != nullptr);
    _impl_.ground_truth_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishGroundTruthRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishGroundTruthRequest& this_ = static_cast<const PublishGroundTruthRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishGroundTruthRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishGroundTruthRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.ground_truth_, this_._impl_.ground_truth_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishGroundTruthRequest::ByteSizeLong(const MessageLite& base) {
          const PublishGroundTruthRequest& this_ = static_cast<const PublishGroundTruthRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishGroundTruthRequest::ByteSizeLong() const {
          const PublishGroundTruthRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ground_truth_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishGroundTruthRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishGroundTruthRequest*>(&to_msg);
  auto& from = static_cast<const PublishGroundTruthRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.ground_truth_ != nullptr);
    if (_this->_impl_.ground_truth_ == nullptr) {
      _this->_impl_.ground_truth_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::GroundTruth>(arena, *from._impl_.ground_truth_);
    } else {
      _this->_impl_.ground_truth_->MergeFrom(*from._impl_.ground_truth_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishGroundTruthRequest::CopyFrom(const PublishGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishGroundTruthRequest::InternalSwap(PublishGroundTruthRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ground_truth_, other->_impl_.ground_truth_);
}

::google::protobuf::Metadata PublishGroundTruthRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishImuRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishImuRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishImuRequest, _impl_._has_bits_);
};

PublishImuRequest::PublishImuRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishImuRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishImuRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishImuRequest::PublishImuRequest(
    ::google::protobuf::Arena* arena,
    const PublishImuRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishImuRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Imu>(
                              arena, *from._impl_.imu_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishImuRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishImuRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.imu_ = {};
}
PublishImuRequest::~PublishImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishImuRequest)
  SharedDtor(*this);
}
inline void PublishImuRequest::SharedDtor(MessageLite& self) {
  PublishImuRequest& this_ = static_cast<PublishImuRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.imu_;
  this_._impl_.~Impl_();
}

inline void* PublishImuRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishImuRequest(arena);
}
constexpr auto PublishImuRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishImuRequest),
                                            alignof(PublishImuRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishImuRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishImuRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishImuRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishImuRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishImuRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishImuRequest>(), &PublishImuRequest::ByteSizeLong,
            &PublishImuRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishImuRequest, _impl_._cached_size_),
        false,
    },
    &PublishImuRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishImuRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishImuRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishImuRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishImuRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.Imu imu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishImuRequest, _impl_.imu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Imu imu = 1;
    {PROTOBUF_FIELD_OFFSET(PublishImuRequest, _impl_.imu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Imu>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.imu_ != nullptr);
    _impl_.imu_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishImuRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishImuRequest& this_ = static_cast<const PublishImuRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishImuRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishImuRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Imu imu = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.imu_, this_._impl_.imu_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishImuRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishImuRequest::ByteSizeLong(const MessageLite& base) {
          const PublishImuRequest& this_ = static_cast<const PublishImuRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishImuRequest::ByteSizeLong() const {
          const PublishImuRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.Imu imu = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.imu_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishImuRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishImuRequest*>(&to_msg);
  auto& from = static_cast<const PublishImuRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.imu_ != nullptr);
    if (_this->_impl_.imu_ == nullptr) {
      _this->_impl_.imu_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Imu>(arena, *from._impl_.imu_);
    } else {
      _this->_impl_.imu_->MergeFrom(*from._impl_.imu_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishImuRequest::CopyFrom(const PublishImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishImuRequest::InternalSwap(PublishImuRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_, other->_impl_.imu_);
}

::google::protobuf::Metadata PublishImuRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishScaledImuRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishScaledImuRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishScaledImuRequest, _impl_._has_bits_);
};

PublishScaledImuRequest::PublishScaledImuRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishScaledImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishScaledImuRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishScaledImuRequest::PublishScaledImuRequest(
    ::google::protobuf::Arena* arena,
    const PublishScaledImuRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishScaledImuRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Imu>(
                              arena, *from._impl_.imu_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishScaledImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishScaledImuRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.imu_ = {};
}
PublishScaledImuRequest::~PublishScaledImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  SharedDtor(*this);
}
inline void PublishScaledImuRequest::SharedDtor(MessageLite& self) {
  PublishScaledImuRequest& this_ = static_cast<PublishScaledImuRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.imu_;
  this_._impl_.~Impl_();
}

inline void* PublishScaledImuRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishScaledImuRequest(arena);
}
constexpr auto PublishScaledImuRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishScaledImuRequest),
                                            alignof(PublishScaledImuRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishScaledImuRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishScaledImuRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishScaledImuRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishScaledImuRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishScaledImuRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishScaledImuRequest>(), &PublishScaledImuRequest::ByteSizeLong,
            &PublishScaledImuRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishScaledImuRequest, _impl_._cached_size_),
        false,
    },
    &PublishScaledImuRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishScaledImuRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishScaledImuRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishScaledImuRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishScaledImuRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.Imu imu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishScaledImuRequest, _impl_.imu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Imu imu = 1;
    {PROTOBUF_FIELD_OFFSET(PublishScaledImuRequest, _impl_.imu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Imu>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishScaledImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.imu_ != nullptr);
    _impl_.imu_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishScaledImuRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishScaledImuRequest& this_ = static_cast<const PublishScaledImuRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishScaledImuRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishScaledImuRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Imu imu = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.imu_, this_._impl_.imu_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishScaledImuRequest::ByteSizeLong(const MessageLite& base) {
          const PublishScaledImuRequest& this_ = static_cast<const PublishScaledImuRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishScaledImuRequest::ByteSizeLong() const {
          const PublishScaledImuRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.Imu imu = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.imu_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishScaledImuRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishScaledImuRequest*>(&to_msg);
  auto& from = static_cast<const PublishScaledImuRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.imu_ != nullptr);
    if (_this->_impl_.imu_ == nullptr) {
      _this->_impl_.imu_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Imu>(arena, *from._impl_.imu_);
    } else {
      _this->_impl_.imu_->MergeFrom(*from._impl_.imu_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishScaledImuRequest::CopyFrom(const PublishScaledImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishScaledImuRequest::InternalSwap(PublishScaledImuRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_, other->_impl_.imu_);
}

::google::protobuf::Metadata PublishScaledImuRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishRawImuRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishRawImuRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishRawImuRequest, _impl_._has_bits_);
};

PublishRawImuRequest::PublishRawImuRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishRawImuRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishRawImuRequest::PublishRawImuRequest(
    ::google::protobuf::Arena* arena,
    const PublishRawImuRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishRawImuRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imu_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Imu>(
                              arena, *from._impl_.imu_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawImuRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishRawImuRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.imu_ = {};
}
PublishRawImuRequest::~PublishRawImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  SharedDtor(*this);
}
inline void PublishRawImuRequest::SharedDtor(MessageLite& self) {
  PublishRawImuRequest& this_ = static_cast<PublishRawImuRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.imu_;
  this_._impl_.~Impl_();
}

inline void* PublishRawImuRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishRawImuRequest(arena);
}
constexpr auto PublishRawImuRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishRawImuRequest),
                                            alignof(PublishRawImuRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishRawImuRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishRawImuRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishRawImuRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishRawImuRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishRawImuRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishRawImuRequest>(), &PublishRawImuRequest::ByteSizeLong,
            &PublishRawImuRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishRawImuRequest, _impl_._cached_size_),
        false,
    },
    &PublishRawImuRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishRawImuRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishRawImuRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishRawImuRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishRawImuRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.Imu imu = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishRawImuRequest, _impl_.imu_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.Imu imu = 1;
    {PROTOBUF_FIELD_OFFSET(PublishRawImuRequest, _impl_.imu_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Imu>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishRawImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.imu_ != nullptr);
    _impl_.imu_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishRawImuRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishRawImuRequest& this_ = static_cast<const PublishRawImuRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishRawImuRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishRawImuRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.Imu imu = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.imu_, this_._impl_.imu_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishRawImuRequest::ByteSizeLong(const MessageLite& base) {
          const PublishRawImuRequest& this_ = static_cast<const PublishRawImuRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishRawImuRequest::ByteSizeLong() const {
          const PublishRawImuRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.Imu imu = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.imu_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishRawImuRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishRawImuRequest*>(&to_msg);
  auto& from = static_cast<const PublishRawImuRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.imu_ != nullptr);
    if (_this->_impl_.imu_ == nullptr) {
      _this->_impl_.imu_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Imu>(arena, *from._impl_.imu_);
    } else {
      _this->_impl_.imu_->MergeFrom(*from._impl_.imu_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishRawImuRequest::CopyFrom(const PublishRawImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishRawImuRequest::InternalSwap(PublishRawImuRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.imu_, other->_impl_.imu_);
}

::google::protobuf::Metadata PublishRawImuRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishUnixEpochTimeRequest::_Internal {
 public:
};

PublishUnixEpochTimeRequest::PublishUnixEpochTimeRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
}
PublishUnixEpochTimeRequest::PublishUnixEpochTimeRequest(
    ::google::protobuf::Arena* arena, const PublishUnixEpochTimeRequest& from)
    : PublishUnixEpochTimeRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PublishUnixEpochTimeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishUnixEpochTimeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_us_ = {};
}
PublishUnixEpochTimeRequest::~PublishUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  SharedDtor(*this);
}
inline void PublishUnixEpochTimeRequest::SharedDtor(MessageLite& self) {
  PublishUnixEpochTimeRequest& this_ = static_cast<PublishUnixEpochTimeRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PublishUnixEpochTimeRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishUnixEpochTimeRequest(arena);
}
constexpr auto PublishUnixEpochTimeRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishUnixEpochTimeRequest),
                                            alignof(PublishUnixEpochTimeRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishUnixEpochTimeRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishUnixEpochTimeRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishUnixEpochTimeRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishUnixEpochTimeRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishUnixEpochTimeRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishUnixEpochTimeRequest>(), &PublishUnixEpochTimeRequest::ByteSizeLong,
            &PublishUnixEpochTimeRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeRequest, _impl_._cached_size_),
        false,
    },
    &PublishUnixEpochTimeRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishUnixEpochTimeRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> PublishUnixEpochTimeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 time_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PublishUnixEpochTimeRequest, _impl_.time_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeRequest, _impl_.time_us_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 time_us = 1;
    {PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeRequest, _impl_.time_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PublishUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_us_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishUnixEpochTimeRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishUnixEpochTimeRequest& this_ = static_cast<const PublishUnixEpochTimeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishUnixEpochTimeRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishUnixEpochTimeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 time_us = 1;
          if (this_._internal_time_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_time_us(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishUnixEpochTimeRequest::ByteSizeLong(const MessageLite& base) {
          const PublishUnixEpochTimeRequest& this_ = static_cast<const PublishUnixEpochTimeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishUnixEpochTimeRequest::ByteSizeLong() const {
          const PublishUnixEpochTimeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // uint64 time_us = 1;
            if (this_._internal_time_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_time_us());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishUnixEpochTimeRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishUnixEpochTimeRequest*>(&to_msg);
  auto& from = static_cast<const PublishUnixEpochTimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_us() != 0) {
    _this->_impl_.time_us_ = from._impl_.time_us_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishUnixEpochTimeRequest::CopyFrom(const PublishUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishUnixEpochTimeRequest::InternalSwap(PublishUnixEpochTimeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.time_us_, other->_impl_.time_us_);
}

::google::protobuf::Metadata PublishUnixEpochTimeRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishDistanceSensorRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishDistanceSensorRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishDistanceSensorRequest, _impl_._has_bits_);
};

PublishDistanceSensorRequest::PublishDistanceSensorRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishDistanceSensorRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishDistanceSensorRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishDistanceSensorRequest::PublishDistanceSensorRequest(
    ::google::protobuf::Arena* arena,
    const PublishDistanceSensorRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishDistanceSensorRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.distance_sensor_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::DistanceSensor>(
                              arena, *from._impl_.distance_sensor_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishDistanceSensorRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishDistanceSensorRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.distance_sensor_ = {};
}
PublishDistanceSensorRequest::~PublishDistanceSensorRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
  SharedDtor(*this);
}
inline void PublishDistanceSensorRequest::SharedDtor(MessageLite& self) {
  PublishDistanceSensorRequest& this_ = static_cast<PublishDistanceSensorRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.distance_sensor_;
  this_._impl_.~Impl_();
}

inline void* PublishDistanceSensorRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishDistanceSensorRequest(arena);
}
constexpr auto PublishDistanceSensorRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishDistanceSensorRequest),
                                            alignof(PublishDistanceSensorRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishDistanceSensorRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishDistanceSensorRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishDistanceSensorRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishDistanceSensorRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishDistanceSensorRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishDistanceSensorRequest>(), &PublishDistanceSensorRequest::ByteSizeLong,
            &PublishDistanceSensorRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishDistanceSensorRequest, _impl_._cached_size_),
        false,
    },
    &PublishDistanceSensorRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishDistanceSensorRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishDistanceSensorRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishDistanceSensorRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishDistanceSensorRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.DistanceSensor distance_sensor = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishDistanceSensorRequest, _impl_.distance_sensor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.DistanceSensor distance_sensor = 1;
    {PROTOBUF_FIELD_OFFSET(PublishDistanceSensorRequest, _impl_.distance_sensor_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::DistanceSensor>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishDistanceSensorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.distance_sensor_ != nullptr);
    _impl_.distance_sensor_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishDistanceSensorRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishDistanceSensorRequest& this_ = static_cast<const PublishDistanceSensorRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishDistanceSensorRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishDistanceSensorRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.DistanceSensor distance_sensor = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.distance_sensor_, this_._impl_.distance_sensor_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishDistanceSensorRequest::ByteSizeLong(const MessageLite& base) {
          const PublishDistanceSensorRequest& this_ = static_cast<const PublishDistanceSensorRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishDistanceSensorRequest::ByteSizeLong() const {
          const PublishDistanceSensorRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.DistanceSensor distance_sensor = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.distance_sensor_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishDistanceSensorRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishDistanceSensorRequest*>(&to_msg);
  auto& from = static_cast<const PublishDistanceSensorRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.distance_sensor_ != nullptr);
    if (_this->_impl_.distance_sensor_ == nullptr) {
      _this->_impl_.distance_sensor_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::DistanceSensor>(arena, *from._impl_.distance_sensor_);
    } else {
      _this->_impl_.distance_sensor_->MergeFrom(*from._impl_.distance_sensor_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishDistanceSensorRequest::CopyFrom(const PublishDistanceSensorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishDistanceSensorRequest::InternalSwap(PublishDistanceSensorRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.distance_sensor_, other->_impl_.distance_sensor_);
}

::google::protobuf::Metadata PublishDistanceSensorRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishAttitudeRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishAttitudeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_._has_bits_);
};

PublishAttitudeRequest::PublishAttitudeRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishAttitudeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishAttitudeRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishAttitudeRequest::PublishAttitudeRequest(
    ::google::protobuf::Arena* arena,
    const PublishAttitudeRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishAttitudeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.angle_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::EulerAngle>(
                              arena, *from._impl_.angle_)
                        : nullptr;
  _impl_.angular_velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(
                              arena, *from._impl_.angular_velocity_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishAttitudeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishAttitudeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, angle_),
           0,
           offsetof(Impl_, angular_velocity_) -
               offsetof(Impl_, angle_) +
               sizeof(Impl_::angular_velocity_));
}
PublishAttitudeRequest::~PublishAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
  SharedDtor(*this);
}
inline void PublishAttitudeRequest::SharedDtor(MessageLite& self) {
  PublishAttitudeRequest& this_ = static_cast<PublishAttitudeRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.angle_;
  delete this_._impl_.angular_velocity_;
  this_._impl_.~Impl_();
}

inline void* PublishAttitudeRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishAttitudeRequest(arena);
}
constexpr auto PublishAttitudeRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishAttitudeRequest),
                                            alignof(PublishAttitudeRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishAttitudeRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishAttitudeRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishAttitudeRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishAttitudeRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishAttitudeRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishAttitudeRequest>(), &PublishAttitudeRequest::ByteSizeLong,
            &PublishAttitudeRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_._cached_size_),
        false,
    },
    &PublishAttitudeRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishAttitudeRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PublishAttitudeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishAttitudeRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_.angular_velocity_)}},
    // .mavsdk.rpc.telemetry_server.EulerAngle angle = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_.angle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.EulerAngle angle = 1;
    {PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_.angle_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity = 2;
    {PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_.angular_velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::EulerAngle>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AngularVelocityBody>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.angle_ != nullptr);
      _impl_.angle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishAttitudeRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishAttitudeRequest& this_ = static_cast<const PublishAttitudeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishAttitudeRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishAttitudeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.EulerAngle angle = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.angle_, this_._impl_.angle_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.angular_velocity_, this_._impl_.angular_velocity_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishAttitudeRequest::ByteSizeLong(const MessageLite& base) {
          const PublishAttitudeRequest& this_ = static_cast<const PublishAttitudeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishAttitudeRequest::ByteSizeLong() const {
          const PublishAttitudeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.telemetry_server.EulerAngle angle = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angle_);
            }
            // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_velocity_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishAttitudeRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishAttitudeRequest*>(&to_msg);
  auto& from = static_cast<const PublishAttitudeRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.angle_ != nullptr);
      if (_this->_impl_.angle_ == nullptr) {
        _this->_impl_.angle_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::EulerAngle>(arena, *from._impl_.angle_);
      } else {
        _this->_impl_.angle_->MergeFrom(*from._impl_.angle_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.angular_velocity_ != nullptr);
      if (_this->_impl_.angular_velocity_ == nullptr) {
        _this->_impl_.angular_velocity_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(arena, *from._impl_.angular_velocity_);
      } else {
        _this->_impl_.angular_velocity_->MergeFrom(*from._impl_.angular_velocity_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishAttitudeRequest::CopyFrom(const PublishAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishAttitudeRequest::InternalSwap(PublishAttitudeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_.angular_velocity_)
      + sizeof(PublishAttitudeRequest::_impl_.angular_velocity_)
      - PROTOBUF_FIELD_OFFSET(PublishAttitudeRequest, _impl_.angle_)>(
          reinterpret_cast<char*>(&_impl_.angle_),
          reinterpret_cast<char*>(&other->_impl_.angle_));
}

::google::protobuf::Metadata PublishAttitudeRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishVisualFlightRulesHudRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishVisualFlightRulesHudRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudRequest, _impl_._has_bits_);
};

PublishVisualFlightRulesHudRequest::PublishVisualFlightRulesHudRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishVisualFlightRulesHudRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishVisualFlightRulesHudRequest::PublishVisualFlightRulesHudRequest(
    ::google::protobuf::Arena* arena,
    const PublishVisualFlightRulesHudRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishVisualFlightRulesHudRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.fixed_wing_metrics_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::FixedwingMetrics>(
                              arena, *from._impl_.fixed_wing_metrics_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
}
inline PROTOBUF_NDEBUG_INLINE PublishVisualFlightRulesHudRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishVisualFlightRulesHudRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.fixed_wing_metrics_ = {};
}
PublishVisualFlightRulesHudRequest::~PublishVisualFlightRulesHudRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
  SharedDtor(*this);
}
inline void PublishVisualFlightRulesHudRequest::SharedDtor(MessageLite& self) {
  PublishVisualFlightRulesHudRequest& this_ = static_cast<PublishVisualFlightRulesHudRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.fixed_wing_metrics_;
  this_._impl_.~Impl_();
}

inline void* PublishVisualFlightRulesHudRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishVisualFlightRulesHudRequest(arena);
}
constexpr auto PublishVisualFlightRulesHudRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishVisualFlightRulesHudRequest),
                                            alignof(PublishVisualFlightRulesHudRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishVisualFlightRulesHudRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishVisualFlightRulesHudRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishVisualFlightRulesHudRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishVisualFlightRulesHudRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishVisualFlightRulesHudRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishVisualFlightRulesHudRequest>(), &PublishVisualFlightRulesHudRequest::ByteSizeLong,
            &PublishVisualFlightRulesHudRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudRequest, _impl_._cached_size_),
        false,
    },
    &PublishVisualFlightRulesHudRequest::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishVisualFlightRulesHudRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishVisualFlightRulesHudRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.FixedwingMetrics fixed_wing_metrics = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudRequest, _impl_.fixed_wing_metrics_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.FixedwingMetrics fixed_wing_metrics = 1;
    {PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudRequest, _impl_.fixed_wing_metrics_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::FixedwingMetrics>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishVisualFlightRulesHudRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fixed_wing_metrics_ != nullptr);
    _impl_.fixed_wing_metrics_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishVisualFlightRulesHudRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishVisualFlightRulesHudRequest& this_ = static_cast<const PublishVisualFlightRulesHudRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishVisualFlightRulesHudRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishVisualFlightRulesHudRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.FixedwingMetrics fixed_wing_metrics = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.fixed_wing_metrics_, this_._impl_.fixed_wing_metrics_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishVisualFlightRulesHudRequest::ByteSizeLong(const MessageLite& base) {
          const PublishVisualFlightRulesHudRequest& this_ = static_cast<const PublishVisualFlightRulesHudRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishVisualFlightRulesHudRequest::ByteSizeLong() const {
          const PublishVisualFlightRulesHudRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.FixedwingMetrics fixed_wing_metrics = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fixed_wing_metrics_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishVisualFlightRulesHudRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishVisualFlightRulesHudRequest*>(&to_msg);
  auto& from = static_cast<const PublishVisualFlightRulesHudRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.fixed_wing_metrics_ != nullptr);
    if (_this->_impl_.fixed_wing_metrics_ == nullptr) {
      _this->_impl_.fixed_wing_metrics_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::FixedwingMetrics>(arena, *from._impl_.fixed_wing_metrics_);
    } else {
      _this->_impl_.fixed_wing_metrics_->MergeFrom(*from._impl_.fixed_wing_metrics_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishVisualFlightRulesHudRequest::CopyFrom(const PublishVisualFlightRulesHudRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishVisualFlightRulesHudRequest::InternalSwap(PublishVisualFlightRulesHudRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fixed_wing_metrics_, other->_impl_.fixed_wing_metrics_);
}

::google::protobuf::Metadata PublishVisualFlightRulesHudRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishPositionResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishPositionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishPositionResponse, _impl_._has_bits_);
};

PublishPositionResponse::PublishPositionResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishPositionResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishPositionResponse::PublishPositionResponse(
    ::google::protobuf::Arena* arena,
    const PublishPositionResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishPositionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishPositionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishPositionResponse::~PublishPositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  SharedDtor(*this);
}
inline void PublishPositionResponse::SharedDtor(MessageLite& self) {
  PublishPositionResponse& this_ = static_cast<PublishPositionResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishPositionResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishPositionResponse(arena);
}
constexpr auto PublishPositionResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishPositionResponse),
                                            alignof(PublishPositionResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishPositionResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishPositionResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishPositionResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishPositionResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishPositionResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishPositionResponse>(), &PublishPositionResponse::ByteSizeLong,
            &PublishPositionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishPositionResponse, _impl_._cached_size_),
        false,
    },
    &PublishPositionResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishPositionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishPositionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishPositionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishPositionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishPositionResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishPositionResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishPositionResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishPositionResponse& this_ = static_cast<const PublishPositionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishPositionResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishPositionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishPositionResponse::ByteSizeLong(const MessageLite& base) {
          const PublishPositionResponse& this_ = static_cast<const PublishPositionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishPositionResponse::ByteSizeLong() const {
          const PublishPositionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishPositionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishPositionResponse*>(&to_msg);
  auto& from = static_cast<const PublishPositionResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishPositionResponse::CopyFrom(const PublishPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishPositionResponse::InternalSwap(PublishPositionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishPositionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishHomeResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishHomeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishHomeResponse, _impl_._has_bits_);
};

PublishHomeResponse::PublishHomeResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishHomeResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishHomeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishHomeResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishHomeResponse::PublishHomeResponse(
    ::google::protobuf::Arena* arena,
    const PublishHomeResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishHomeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishHomeResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishHomeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishHomeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishHomeResponse::~PublishHomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  SharedDtor(*this);
}
inline void PublishHomeResponse::SharedDtor(MessageLite& self) {
  PublishHomeResponse& this_ = static_cast<PublishHomeResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishHomeResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishHomeResponse(arena);
}
constexpr auto PublishHomeResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishHomeResponse),
                                            alignof(PublishHomeResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishHomeResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishHomeResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishHomeResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishHomeResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishHomeResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishHomeResponse>(), &PublishHomeResponse::ByteSizeLong,
            &PublishHomeResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishHomeResponse, _impl_._cached_size_),
        false,
    },
    &PublishHomeResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishHomeResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishHomeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishHomeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishHomeResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishHomeResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishHomeResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishHomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishHomeResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishHomeResponse& this_ = static_cast<const PublishHomeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishHomeResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishHomeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishHomeResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishHomeResponse::ByteSizeLong(const MessageLite& base) {
          const PublishHomeResponse& this_ = static_cast<const PublishHomeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishHomeResponse::ByteSizeLong() const {
          const PublishHomeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishHomeResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishHomeResponse*>(&to_msg);
  auto& from = static_cast<const PublishHomeResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishHomeResponse::CopyFrom(const PublishHomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishHomeResponse::InternalSwap(PublishHomeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishHomeResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishSysStatusResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishSysStatusResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishSysStatusResponse, _impl_._has_bits_);
};

PublishSysStatusResponse::PublishSysStatusResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishSysStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishSysStatusResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishSysStatusResponse::PublishSysStatusResponse(
    ::google::protobuf::Arena* arena,
    const PublishSysStatusResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishSysStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishSysStatusResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishSysStatusResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishSysStatusResponse::~PublishSysStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  SharedDtor(*this);
}
inline void PublishSysStatusResponse::SharedDtor(MessageLite& self) {
  PublishSysStatusResponse& this_ = static_cast<PublishSysStatusResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishSysStatusResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishSysStatusResponse(arena);
}
constexpr auto PublishSysStatusResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishSysStatusResponse),
                                            alignof(PublishSysStatusResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishSysStatusResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishSysStatusResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishSysStatusResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishSysStatusResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishSysStatusResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishSysStatusResponse>(), &PublishSysStatusResponse::ByteSizeLong,
            &PublishSysStatusResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishSysStatusResponse, _impl_._cached_size_),
        false,
    },
    &PublishSysStatusResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishSysStatusResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishSysStatusResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishSysStatusResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishSysStatusResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishSysStatusResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishSysStatusResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishSysStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishSysStatusResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishSysStatusResponse& this_ = static_cast<const PublishSysStatusResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishSysStatusResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishSysStatusResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishSysStatusResponse::ByteSizeLong(const MessageLite& base) {
          const PublishSysStatusResponse& this_ = static_cast<const PublishSysStatusResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishSysStatusResponse::ByteSizeLong() const {
          const PublishSysStatusResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishSysStatusResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishSysStatusResponse*>(&to_msg);
  auto& from = static_cast<const PublishSysStatusResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishSysStatusResponse::CopyFrom(const PublishSysStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishSysStatusResponse::InternalSwap(PublishSysStatusResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishSysStatusResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishExtendedSysStateResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishExtendedSysStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateResponse, _impl_._has_bits_);
};

PublishExtendedSysStateResponse::PublishExtendedSysStateResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishExtendedSysStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishExtendedSysStateResponse::PublishExtendedSysStateResponse(
    ::google::protobuf::Arena* arena,
    const PublishExtendedSysStateResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishExtendedSysStateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishExtendedSysStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishExtendedSysStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishExtendedSysStateResponse::~PublishExtendedSysStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  SharedDtor(*this);
}
inline void PublishExtendedSysStateResponse::SharedDtor(MessageLite& self) {
  PublishExtendedSysStateResponse& this_ = static_cast<PublishExtendedSysStateResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishExtendedSysStateResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishExtendedSysStateResponse(arena);
}
constexpr auto PublishExtendedSysStateResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishExtendedSysStateResponse),
                                            alignof(PublishExtendedSysStateResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishExtendedSysStateResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishExtendedSysStateResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishExtendedSysStateResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishExtendedSysStateResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishExtendedSysStateResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishExtendedSysStateResponse>(), &PublishExtendedSysStateResponse::ByteSizeLong,
            &PublishExtendedSysStateResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateResponse, _impl_._cached_size_),
        false,
    },
    &PublishExtendedSysStateResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishExtendedSysStateResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishExtendedSysStateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishExtendedSysStateResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishExtendedSysStateResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishExtendedSysStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishExtendedSysStateResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishExtendedSysStateResponse& this_ = static_cast<const PublishExtendedSysStateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishExtendedSysStateResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishExtendedSysStateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishExtendedSysStateResponse::ByteSizeLong(const MessageLite& base) {
          const PublishExtendedSysStateResponse& this_ = static_cast<const PublishExtendedSysStateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishExtendedSysStateResponse::ByteSizeLong() const {
          const PublishExtendedSysStateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishExtendedSysStateResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishExtendedSysStateResponse*>(&to_msg);
  auto& from = static_cast<const PublishExtendedSysStateResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishExtendedSysStateResponse::CopyFrom(const PublishExtendedSysStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishExtendedSysStateResponse::InternalSwap(PublishExtendedSysStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishExtendedSysStateResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishRawGpsResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishRawGpsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishRawGpsResponse, _impl_._has_bits_);
};

PublishRawGpsResponse::PublishRawGpsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawGpsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishRawGpsResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishRawGpsResponse::PublishRawGpsResponse(
    ::google::protobuf::Arena* arena,
    const PublishRawGpsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishRawGpsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawGpsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishRawGpsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishRawGpsResponse::~PublishRawGpsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  SharedDtor(*this);
}
inline void PublishRawGpsResponse::SharedDtor(MessageLite& self) {
  PublishRawGpsResponse& this_ = static_cast<PublishRawGpsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishRawGpsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishRawGpsResponse(arena);
}
constexpr auto PublishRawGpsResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishRawGpsResponse),
                                            alignof(PublishRawGpsResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishRawGpsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishRawGpsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishRawGpsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishRawGpsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishRawGpsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishRawGpsResponse>(), &PublishRawGpsResponse::ByteSizeLong,
            &PublishRawGpsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishRawGpsResponse, _impl_._cached_size_),
        false,
    },
    &PublishRawGpsResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishRawGpsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishRawGpsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishRawGpsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishRawGpsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishRawGpsResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishRawGpsResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishRawGpsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishRawGpsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishRawGpsResponse& this_ = static_cast<const PublishRawGpsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishRawGpsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishRawGpsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishRawGpsResponse::ByteSizeLong(const MessageLite& base) {
          const PublishRawGpsResponse& this_ = static_cast<const PublishRawGpsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishRawGpsResponse::ByteSizeLong() const {
          const PublishRawGpsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishRawGpsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishRawGpsResponse*>(&to_msg);
  auto& from = static_cast<const PublishRawGpsResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishRawGpsResponse::CopyFrom(const PublishRawGpsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishRawGpsResponse::InternalSwap(PublishRawGpsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishRawGpsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishBatteryResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishBatteryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishBatteryResponse, _impl_._has_bits_);
};

PublishBatteryResponse::PublishBatteryResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishBatteryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishBatteryResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishBatteryResponse::PublishBatteryResponse(
    ::google::protobuf::Arena* arena,
    const PublishBatteryResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishBatteryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishBatteryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishBatteryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishBatteryResponse::~PublishBatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  SharedDtor(*this);
}
inline void PublishBatteryResponse::SharedDtor(MessageLite& self) {
  PublishBatteryResponse& this_ = static_cast<PublishBatteryResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishBatteryResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishBatteryResponse(arena);
}
constexpr auto PublishBatteryResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishBatteryResponse),
                                            alignof(PublishBatteryResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishBatteryResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishBatteryResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishBatteryResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishBatteryResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishBatteryResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishBatteryResponse>(), &PublishBatteryResponse::ByteSizeLong,
            &PublishBatteryResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishBatteryResponse, _impl_._cached_size_),
        false,
    },
    &PublishBatteryResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishBatteryResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishBatteryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishBatteryResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishBatteryResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishBatteryResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishBatteryResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishBatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishBatteryResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishBatteryResponse& this_ = static_cast<const PublishBatteryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishBatteryResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishBatteryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishBatteryResponse::ByteSizeLong(const MessageLite& base) {
          const PublishBatteryResponse& this_ = static_cast<const PublishBatteryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishBatteryResponse::ByteSizeLong() const {
          const PublishBatteryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishBatteryResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishBatteryResponse*>(&to_msg);
  auto& from = static_cast<const PublishBatteryResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishBatteryResponse::CopyFrom(const PublishBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishBatteryResponse::InternalSwap(PublishBatteryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishBatteryResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishStatusTextResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishStatusTextResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishStatusTextResponse, _impl_._has_bits_);
};

PublishStatusTextResponse::PublishStatusTextResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishStatusTextResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishStatusTextResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishStatusTextResponse::PublishStatusTextResponse(
    ::google::protobuf::Arena* arena,
    const PublishStatusTextResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishStatusTextResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishStatusTextResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishStatusTextResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishStatusTextResponse::~PublishStatusTextResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  SharedDtor(*this);
}
inline void PublishStatusTextResponse::SharedDtor(MessageLite& self) {
  PublishStatusTextResponse& this_ = static_cast<PublishStatusTextResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishStatusTextResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishStatusTextResponse(arena);
}
constexpr auto PublishStatusTextResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishStatusTextResponse),
                                            alignof(PublishStatusTextResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishStatusTextResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishStatusTextResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishStatusTextResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishStatusTextResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishStatusTextResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishStatusTextResponse>(), &PublishStatusTextResponse::ByteSizeLong,
            &PublishStatusTextResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishStatusTextResponse, _impl_._cached_size_),
        false,
    },
    &PublishStatusTextResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishStatusTextResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishStatusTextResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishStatusTextResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishStatusTextResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishStatusTextResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishStatusTextResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishStatusTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishStatusTextResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishStatusTextResponse& this_ = static_cast<const PublishStatusTextResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishStatusTextResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishStatusTextResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishStatusTextResponse::ByteSizeLong(const MessageLite& base) {
          const PublishStatusTextResponse& this_ = static_cast<const PublishStatusTextResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishStatusTextResponse::ByteSizeLong() const {
          const PublishStatusTextResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishStatusTextResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishStatusTextResponse*>(&to_msg);
  auto& from = static_cast<const PublishStatusTextResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishStatusTextResponse::CopyFrom(const PublishStatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishStatusTextResponse::InternalSwap(PublishStatusTextResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishStatusTextResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishOdometryResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishOdometryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishOdometryResponse, _impl_._has_bits_);
};

PublishOdometryResponse::PublishOdometryResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishOdometryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishOdometryResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishOdometryResponse::PublishOdometryResponse(
    ::google::protobuf::Arena* arena,
    const PublishOdometryResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishOdometryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishOdometryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishOdometryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishOdometryResponse::~PublishOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  SharedDtor(*this);
}
inline void PublishOdometryResponse::SharedDtor(MessageLite& self) {
  PublishOdometryResponse& this_ = static_cast<PublishOdometryResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishOdometryResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishOdometryResponse(arena);
}
constexpr auto PublishOdometryResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishOdometryResponse),
                                            alignof(PublishOdometryResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishOdometryResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishOdometryResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishOdometryResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishOdometryResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishOdometryResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishOdometryResponse>(), &PublishOdometryResponse::ByteSizeLong,
            &PublishOdometryResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishOdometryResponse, _impl_._cached_size_),
        false,
    },
    &PublishOdometryResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishOdometryResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishOdometryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishOdometryResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishOdometryResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishOdometryResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishOdometryResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishOdometryResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishOdometryResponse& this_ = static_cast<const PublishOdometryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishOdometryResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishOdometryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishOdometryResponse::ByteSizeLong(const MessageLite& base) {
          const PublishOdometryResponse& this_ = static_cast<const PublishOdometryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishOdometryResponse::ByteSizeLong() const {
          const PublishOdometryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishOdometryResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishOdometryResponse*>(&to_msg);
  auto& from = static_cast<const PublishOdometryResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishOdometryResponse::CopyFrom(const PublishOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishOdometryResponse::InternalSwap(PublishOdometryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishOdometryResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishPositionVelocityNedResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishPositionVelocityNedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedResponse, _impl_._has_bits_);
};

PublishPositionVelocityNedResponse::PublishPositionVelocityNedResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishPositionVelocityNedResponse::PublishPositionVelocityNedResponse(
    ::google::protobuf::Arena* arena,
    const PublishPositionVelocityNedResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishPositionVelocityNedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishPositionVelocityNedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishPositionVelocityNedResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishPositionVelocityNedResponse::~PublishPositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  SharedDtor(*this);
}
inline void PublishPositionVelocityNedResponse::SharedDtor(MessageLite& self) {
  PublishPositionVelocityNedResponse& this_ = static_cast<PublishPositionVelocityNedResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishPositionVelocityNedResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishPositionVelocityNedResponse(arena);
}
constexpr auto PublishPositionVelocityNedResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishPositionVelocityNedResponse),
                                            alignof(PublishPositionVelocityNedResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishPositionVelocityNedResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishPositionVelocityNedResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishPositionVelocityNedResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishPositionVelocityNedResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishPositionVelocityNedResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishPositionVelocityNedResponse>(), &PublishPositionVelocityNedResponse::ByteSizeLong,
            &PublishPositionVelocityNedResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedResponse, _impl_._cached_size_),
        false,
    },
    &PublishPositionVelocityNedResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishPositionVelocityNedResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishPositionVelocityNedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishPositionVelocityNedResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishPositionVelocityNedResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishPositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishPositionVelocityNedResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishPositionVelocityNedResponse& this_ = static_cast<const PublishPositionVelocityNedResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishPositionVelocityNedResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishPositionVelocityNedResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishPositionVelocityNedResponse::ByteSizeLong(const MessageLite& base) {
          const PublishPositionVelocityNedResponse& this_ = static_cast<const PublishPositionVelocityNedResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishPositionVelocityNedResponse::ByteSizeLong() const {
          const PublishPositionVelocityNedResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishPositionVelocityNedResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishPositionVelocityNedResponse*>(&to_msg);
  auto& from = static_cast<const PublishPositionVelocityNedResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishPositionVelocityNedResponse::CopyFrom(const PublishPositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishPositionVelocityNedResponse::InternalSwap(PublishPositionVelocityNedResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishPositionVelocityNedResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishGroundTruthResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishGroundTruthResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishGroundTruthResponse, _impl_._has_bits_);
};

PublishGroundTruthResponse::PublishGroundTruthResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishGroundTruthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishGroundTruthResponse::PublishGroundTruthResponse(
    ::google::protobuf::Arena* arena,
    const PublishGroundTruthResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishGroundTruthResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishGroundTruthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishGroundTruthResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishGroundTruthResponse::~PublishGroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  SharedDtor(*this);
}
inline void PublishGroundTruthResponse::SharedDtor(MessageLite& self) {
  PublishGroundTruthResponse& this_ = static_cast<PublishGroundTruthResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishGroundTruthResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishGroundTruthResponse(arena);
}
constexpr auto PublishGroundTruthResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishGroundTruthResponse),
                                            alignof(PublishGroundTruthResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishGroundTruthResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishGroundTruthResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishGroundTruthResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishGroundTruthResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishGroundTruthResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishGroundTruthResponse>(), &PublishGroundTruthResponse::ByteSizeLong,
            &PublishGroundTruthResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishGroundTruthResponse, _impl_._cached_size_),
        false,
    },
    &PublishGroundTruthResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishGroundTruthResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishGroundTruthResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishGroundTruthResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishGroundTruthResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishGroundTruthResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishGroundTruthResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishGroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishGroundTruthResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishGroundTruthResponse& this_ = static_cast<const PublishGroundTruthResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishGroundTruthResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishGroundTruthResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishGroundTruthResponse::ByteSizeLong(const MessageLite& base) {
          const PublishGroundTruthResponse& this_ = static_cast<const PublishGroundTruthResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishGroundTruthResponse::ByteSizeLong() const {
          const PublishGroundTruthResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishGroundTruthResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishGroundTruthResponse*>(&to_msg);
  auto& from = static_cast<const PublishGroundTruthResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishGroundTruthResponse::CopyFrom(const PublishGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishGroundTruthResponse::InternalSwap(PublishGroundTruthResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishGroundTruthResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishImuResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishImuResponse, _impl_._has_bits_);
};

PublishImuResponse::PublishImuResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishImuResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishImuResponse::PublishImuResponse(
    ::google::protobuf::Arena* arena,
    const PublishImuResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishImuResponse::~PublishImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishImuResponse)
  SharedDtor(*this);
}
inline void PublishImuResponse::SharedDtor(MessageLite& self) {
  PublishImuResponse& this_ = static_cast<PublishImuResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishImuResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishImuResponse(arena);
}
constexpr auto PublishImuResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishImuResponse),
                                            alignof(PublishImuResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishImuResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishImuResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishImuResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishImuResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishImuResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishImuResponse>(), &PublishImuResponse::ByteSizeLong,
            &PublishImuResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishImuResponse, _impl_._cached_size_),
        false,
    },
    &PublishImuResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishImuResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishImuResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishImuResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishImuResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishImuResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishImuResponse& this_ = static_cast<const PublishImuResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishImuResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishImuResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishImuResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishImuResponse::ByteSizeLong(const MessageLite& base) {
          const PublishImuResponse& this_ = static_cast<const PublishImuResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishImuResponse::ByteSizeLong() const {
          const PublishImuResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishImuResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishImuResponse*>(&to_msg);
  auto& from = static_cast<const PublishImuResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishImuResponse::CopyFrom(const PublishImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishImuResponse::InternalSwap(PublishImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishImuResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishScaledImuResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishScaledImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishScaledImuResponse, _impl_._has_bits_);
};

PublishScaledImuResponse::PublishScaledImuResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishScaledImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishScaledImuResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishScaledImuResponse::PublishScaledImuResponse(
    ::google::protobuf::Arena* arena,
    const PublishScaledImuResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishScaledImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishScaledImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishScaledImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishScaledImuResponse::~PublishScaledImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  SharedDtor(*this);
}
inline void PublishScaledImuResponse::SharedDtor(MessageLite& self) {
  PublishScaledImuResponse& this_ = static_cast<PublishScaledImuResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishScaledImuResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishScaledImuResponse(arena);
}
constexpr auto PublishScaledImuResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishScaledImuResponse),
                                            alignof(PublishScaledImuResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishScaledImuResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishScaledImuResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishScaledImuResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishScaledImuResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishScaledImuResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishScaledImuResponse>(), &PublishScaledImuResponse::ByteSizeLong,
            &PublishScaledImuResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishScaledImuResponse, _impl_._cached_size_),
        false,
    },
    &PublishScaledImuResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishScaledImuResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishScaledImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishScaledImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishScaledImuResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishScaledImuResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishScaledImuResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishScaledImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishScaledImuResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishScaledImuResponse& this_ = static_cast<const PublishScaledImuResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishScaledImuResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishScaledImuResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishScaledImuResponse::ByteSizeLong(const MessageLite& base) {
          const PublishScaledImuResponse& this_ = static_cast<const PublishScaledImuResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishScaledImuResponse::ByteSizeLong() const {
          const PublishScaledImuResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishScaledImuResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishScaledImuResponse*>(&to_msg);
  auto& from = static_cast<const PublishScaledImuResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishScaledImuResponse::CopyFrom(const PublishScaledImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishScaledImuResponse::InternalSwap(PublishScaledImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishScaledImuResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishRawImuResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishRawImuResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishRawImuResponse, _impl_._has_bits_);
};

PublishRawImuResponse::PublishRawImuResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishRawImuResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishRawImuResponse::PublishRawImuResponse(
    ::google::protobuf::Arena* arena,
    const PublishRawImuResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishRawImuResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishRawImuResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishRawImuResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishRawImuResponse::~PublishRawImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  SharedDtor(*this);
}
inline void PublishRawImuResponse::SharedDtor(MessageLite& self) {
  PublishRawImuResponse& this_ = static_cast<PublishRawImuResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishRawImuResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishRawImuResponse(arena);
}
constexpr auto PublishRawImuResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishRawImuResponse),
                                            alignof(PublishRawImuResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishRawImuResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishRawImuResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishRawImuResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishRawImuResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishRawImuResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishRawImuResponse>(), &PublishRawImuResponse::ByteSizeLong,
            &PublishRawImuResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishRawImuResponse, _impl_._cached_size_),
        false,
    },
    &PublishRawImuResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishRawImuResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishRawImuResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishRawImuResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishRawImuResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishRawImuResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishRawImuResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishRawImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishRawImuResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishRawImuResponse& this_ = static_cast<const PublishRawImuResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishRawImuResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishRawImuResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishRawImuResponse::ByteSizeLong(const MessageLite& base) {
          const PublishRawImuResponse& this_ = static_cast<const PublishRawImuResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishRawImuResponse::ByteSizeLong() const {
          const PublishRawImuResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishRawImuResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishRawImuResponse*>(&to_msg);
  auto& from = static_cast<const PublishRawImuResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishRawImuResponse::CopyFrom(const PublishRawImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishRawImuResponse::InternalSwap(PublishRawImuResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishRawImuResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishUnixEpochTimeResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishUnixEpochTimeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeResponse, _impl_._has_bits_);
};

PublishUnixEpochTimeResponse::PublishUnixEpochTimeResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishUnixEpochTimeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishUnixEpochTimeResponse::PublishUnixEpochTimeResponse(
    ::google::protobuf::Arena* arena,
    const PublishUnixEpochTimeResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishUnixEpochTimeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishUnixEpochTimeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishUnixEpochTimeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishUnixEpochTimeResponse::~PublishUnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  SharedDtor(*this);
}
inline void PublishUnixEpochTimeResponse::SharedDtor(MessageLite& self) {
  PublishUnixEpochTimeResponse& this_ = static_cast<PublishUnixEpochTimeResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishUnixEpochTimeResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishUnixEpochTimeResponse(arena);
}
constexpr auto PublishUnixEpochTimeResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishUnixEpochTimeResponse),
                                            alignof(PublishUnixEpochTimeResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishUnixEpochTimeResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishUnixEpochTimeResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishUnixEpochTimeResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishUnixEpochTimeResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishUnixEpochTimeResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishUnixEpochTimeResponse>(), &PublishUnixEpochTimeResponse::ByteSizeLong,
            &PublishUnixEpochTimeResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeResponse, _impl_._cached_size_),
        false,
    },
    &PublishUnixEpochTimeResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishUnixEpochTimeResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishUnixEpochTimeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishUnixEpochTimeResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishUnixEpochTimeResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishUnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishUnixEpochTimeResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishUnixEpochTimeResponse& this_ = static_cast<const PublishUnixEpochTimeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishUnixEpochTimeResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishUnixEpochTimeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishUnixEpochTimeResponse::ByteSizeLong(const MessageLite& base) {
          const PublishUnixEpochTimeResponse& this_ = static_cast<const PublishUnixEpochTimeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishUnixEpochTimeResponse::ByteSizeLong() const {
          const PublishUnixEpochTimeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishUnixEpochTimeResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishUnixEpochTimeResponse*>(&to_msg);
  auto& from = static_cast<const PublishUnixEpochTimeResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishUnixEpochTimeResponse::CopyFrom(const PublishUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishUnixEpochTimeResponse::InternalSwap(PublishUnixEpochTimeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishUnixEpochTimeResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishDistanceSensorResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishDistanceSensorResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishDistanceSensorResponse, _impl_._has_bits_);
};

PublishDistanceSensorResponse::PublishDistanceSensorResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishDistanceSensorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishDistanceSensorResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishDistanceSensorResponse::PublishDistanceSensorResponse(
    ::google::protobuf::Arena* arena,
    const PublishDistanceSensorResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishDistanceSensorResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishDistanceSensorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishDistanceSensorResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishDistanceSensorResponse::~PublishDistanceSensorResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
  SharedDtor(*this);
}
inline void PublishDistanceSensorResponse::SharedDtor(MessageLite& self) {
  PublishDistanceSensorResponse& this_ = static_cast<PublishDistanceSensorResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishDistanceSensorResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishDistanceSensorResponse(arena);
}
constexpr auto PublishDistanceSensorResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishDistanceSensorResponse),
                                            alignof(PublishDistanceSensorResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishDistanceSensorResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishDistanceSensorResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishDistanceSensorResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishDistanceSensorResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishDistanceSensorResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishDistanceSensorResponse>(), &PublishDistanceSensorResponse::ByteSizeLong,
            &PublishDistanceSensorResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishDistanceSensorResponse, _impl_._cached_size_),
        false,
    },
    &PublishDistanceSensorResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishDistanceSensorResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishDistanceSensorResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishDistanceSensorResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishDistanceSensorResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishDistanceSensorResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishDistanceSensorResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishDistanceSensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishDistanceSensorResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishDistanceSensorResponse& this_ = static_cast<const PublishDistanceSensorResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishDistanceSensorResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishDistanceSensorResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishDistanceSensorResponse::ByteSizeLong(const MessageLite& base) {
          const PublishDistanceSensorResponse& this_ = static_cast<const PublishDistanceSensorResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishDistanceSensorResponse::ByteSizeLong() const {
          const PublishDistanceSensorResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishDistanceSensorResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishDistanceSensorResponse*>(&to_msg);
  auto& from = static_cast<const PublishDistanceSensorResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishDistanceSensorResponse::CopyFrom(const PublishDistanceSensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishDistanceSensorResponse::InternalSwap(PublishDistanceSensorResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishDistanceSensorResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishAttitudeResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishAttitudeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishAttitudeResponse, _impl_._has_bits_);
};

PublishAttitudeResponse::PublishAttitudeResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishAttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishAttitudeResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishAttitudeResponse::PublishAttitudeResponse(
    ::google::protobuf::Arena* arena,
    const PublishAttitudeResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishAttitudeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishAttitudeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishAttitudeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishAttitudeResponse::~PublishAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
  SharedDtor(*this);
}
inline void PublishAttitudeResponse::SharedDtor(MessageLite& self) {
  PublishAttitudeResponse& this_ = static_cast<PublishAttitudeResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishAttitudeResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishAttitudeResponse(arena);
}
constexpr auto PublishAttitudeResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishAttitudeResponse),
                                            alignof(PublishAttitudeResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishAttitudeResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishAttitudeResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishAttitudeResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishAttitudeResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishAttitudeResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishAttitudeResponse>(), &PublishAttitudeResponse::ByteSizeLong,
            &PublishAttitudeResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishAttitudeResponse, _impl_._cached_size_),
        false,
    },
    &PublishAttitudeResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishAttitudeResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishAttitudeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishAttitudeResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishAttitudeResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishAttitudeResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishAttitudeResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishAttitudeResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishAttitudeResponse& this_ = static_cast<const PublishAttitudeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishAttitudeResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishAttitudeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishAttitudeResponse::ByteSizeLong(const MessageLite& base) {
          const PublishAttitudeResponse& this_ = static_cast<const PublishAttitudeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishAttitudeResponse::ByteSizeLong() const {
          const PublishAttitudeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishAttitudeResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishAttitudeResponse*>(&to_msg);
  auto& from = static_cast<const PublishAttitudeResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishAttitudeResponse::CopyFrom(const PublishAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishAttitudeResponse::InternalSwap(PublishAttitudeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishAttitudeResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PublishVisualFlightRulesHudResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PublishVisualFlightRulesHudResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudResponse, _impl_._has_bits_);
};

PublishVisualFlightRulesHudResponse::PublishVisualFlightRulesHudResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishVisualFlightRulesHudResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PublishVisualFlightRulesHudResponse::PublishVisualFlightRulesHudResponse(
    ::google::protobuf::Arena* arena,
    const PublishVisualFlightRulesHudResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PublishVisualFlightRulesHudResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.telemetry_server_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(
                              arena, *from._impl_.telemetry_server_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
}
inline PROTOBUF_NDEBUG_INLINE PublishVisualFlightRulesHudResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PublishVisualFlightRulesHudResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.telemetry_server_result_ = {};
}
PublishVisualFlightRulesHudResponse::~PublishVisualFlightRulesHudResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
  SharedDtor(*this);
}
inline void PublishVisualFlightRulesHudResponse::SharedDtor(MessageLite& self) {
  PublishVisualFlightRulesHudResponse& this_ = static_cast<PublishVisualFlightRulesHudResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.telemetry_server_result_;
  this_._impl_.~Impl_();
}

inline void* PublishVisualFlightRulesHudResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PublishVisualFlightRulesHudResponse(arena);
}
constexpr auto PublishVisualFlightRulesHudResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PublishVisualFlightRulesHudResponse),
                                            alignof(PublishVisualFlightRulesHudResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PublishVisualFlightRulesHudResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PublishVisualFlightRulesHudResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PublishVisualFlightRulesHudResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PublishVisualFlightRulesHudResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PublishVisualFlightRulesHudResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PublishVisualFlightRulesHudResponse>(), &PublishVisualFlightRulesHudResponse::ByteSizeLong,
            &PublishVisualFlightRulesHudResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudResponse, _impl_._cached_size_),
        false,
    },
    &PublishVisualFlightRulesHudResponse::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PublishVisualFlightRulesHudResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PublishVisualFlightRulesHudResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PublishVisualFlightRulesHudResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudResponse, _impl_.telemetry_server_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
    {PROTOBUF_FIELD_OFFSET(PublishVisualFlightRulesHudResponse, _impl_.telemetry_server_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PublishVisualFlightRulesHudResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.telemetry_server_result_ != nullptr);
    _impl_.telemetry_server_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PublishVisualFlightRulesHudResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PublishVisualFlightRulesHudResponse& this_ = static_cast<const PublishVisualFlightRulesHudResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PublishVisualFlightRulesHudResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PublishVisualFlightRulesHudResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.telemetry_server_result_, this_._impl_.telemetry_server_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PublishVisualFlightRulesHudResponse::ByteSizeLong(const MessageLite& base) {
          const PublishVisualFlightRulesHudResponse& this_ = static_cast<const PublishVisualFlightRulesHudResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PublishVisualFlightRulesHudResponse::ByteSizeLong() const {
          const PublishVisualFlightRulesHudResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.telemetry_server_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PublishVisualFlightRulesHudResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PublishVisualFlightRulesHudResponse*>(&to_msg);
  auto& from = static_cast<const PublishVisualFlightRulesHudResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.telemetry_server_result_ != nullptr);
    if (_this->_impl_.telemetry_server_result_ == nullptr) {
      _this->_impl_.telemetry_server_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(arena, *from._impl_.telemetry_server_result_);
    } else {
      _this->_impl_.telemetry_server_result_->MergeFrom(*from._impl_.telemetry_server_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PublishVisualFlightRulesHudResponse::CopyFrom(const PublishVisualFlightRulesHudResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PublishVisualFlightRulesHudResponse::InternalSwap(PublishVisualFlightRulesHudResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.telemetry_server_result_, other->_impl_.telemetry_server_result_);
}

::google::protobuf::Metadata PublishVisualFlightRulesHudResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Position)
}
Position::Position(
    ::google::protobuf::Arena* arena, const Position& from)
    : Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, relative_altitude_m_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::relative_altitude_m_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Position)
  SharedDtor(*this);
}
inline void Position::SharedDtor(MessageLite& self) {
  Position& this_ = static_cast<Position&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Position::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Position(arena);
}
constexpr auto Position::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Position),
                                            alignof(Position));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Position::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Position_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Position::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Position>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Position::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Position>(), &Position::ByteSizeLong,
            &Position::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Position, _impl_._cached_size_),
        false,
    },
    &Position::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Position::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.relative_altitude_m_)}},
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_deg_)}},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.longitude_deg_)}},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.absolute_altitude_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.relative_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Position)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.relative_altitude_m_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.relative_altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Position::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Position::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Position)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_latitude_deg(), target);
          }

          // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_longitude_deg(), target);
          }

          // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_absolute_altitude_m(), target);
          }

          // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_relative_altitude_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_relative_altitude_m(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Position)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Position::ByteSizeLong(const MessageLite& base) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Position::ByteSizeLong() const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Position)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude_deg()) != 0) {
              total_size += 9;
            }
            // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude_deg()) != 0) {
              total_size += 9;
            }
            // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
              total_size += 5;
            }
            // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_relative_altitude_m()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Position::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_latitude_deg()) != 0) {
    _this->_impl_.latitude_deg_ = from._impl_.latitude_deg_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude_deg()) != 0) {
    _this->_impl_.longitude_deg_ = from._impl_.longitude_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_absolute_altitude_m()) != 0) {
    _this->_impl_.absolute_altitude_m_ = from._impl_.absolute_altitude_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_relative_altitude_m()) != 0) {
    _this->_impl_.relative_altitude_m_ = from._impl_.relative_altitude_m_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.relative_altitude_m_)
      + sizeof(Position::_impl_.relative_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Heading::_Internal {
 public:
};

Heading::Heading(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Heading)
}
Heading::Heading(
    ::google::protobuf::Arena* arena, const Heading& from)
    : Heading(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Heading::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Heading::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.heading_deg_ = {};
}
Heading::~Heading() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Heading)
  SharedDtor(*this);
}
inline void Heading::SharedDtor(MessageLite& self) {
  Heading& this_ = static_cast<Heading&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Heading::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Heading(arena);
}
constexpr auto Heading::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Heading),
                                            alignof(Heading));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Heading::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Heading_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Heading::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Heading>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Heading::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Heading>(), &Heading::ByteSizeLong,
            &Heading::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Heading, _impl_._cached_size_),
        false,
    },
    &Heading::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Heading::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Heading::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Heading>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Heading, _impl_.heading_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Heading, _impl_.heading_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Heading)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.heading_deg_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Heading::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Heading& this_ = static_cast<const Heading&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Heading::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Heading& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Heading)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_heading_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_heading_deg(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Heading)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Heading::ByteSizeLong(const MessageLite& base) {
          const Heading& this_ = static_cast<const Heading&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Heading::ByteSizeLong() const {
          const Heading& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Heading)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_heading_deg()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Heading::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Heading*>(&to_msg);
  auto& from = static_cast<const Heading&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Heading)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_heading_deg()) != 0) {
    _this->_impl_.heading_deg_ = from._impl_.heading_deg_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Heading::InternalSwap(Heading* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.heading_deg_, other->_impl_.heading_deg_);
}

::google::protobuf::Metadata Heading::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Quaternion)
}
Quaternion::Quaternion(
    ::google::protobuf::Arena* arena, const Quaternion& from)
    : Quaternion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Quaternion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Quaternion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, w_),
           0,
           offsetof(Impl_, timestamp_us_) -
               offsetof(Impl_, w_) +
               sizeof(Impl_::timestamp_us_));
}
Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Quaternion)
  SharedDtor(*this);
}
inline void Quaternion::SharedDtor(MessageLite& self) {
  Quaternion& this_ = static_cast<Quaternion&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Quaternion::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Quaternion(arena);
}
constexpr auto Quaternion::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Quaternion),
                                            alignof(Quaternion));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Quaternion::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Quaternion_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Quaternion::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Quaternion>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Quaternion::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Quaternion>(), &Quaternion::ByteSizeLong,
            &Quaternion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Quaternion, _impl_._cached_size_),
        false,
    },
    &Quaternion::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Quaternion::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> Quaternion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Quaternion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)}},
    // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)}},
    // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_)}},
    // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_)}},
    // uint64 timestamp_us = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Quaternion, _impl_.timestamp_us_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.timestamp_us_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 timestamp_us = 5;
    {PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Quaternion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_us_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.timestamp_us_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Quaternion::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Quaternion& this_ = static_cast<const Quaternion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Quaternion::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Quaternion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Quaternion)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_w()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_w(), target);
          }

          // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_x(), target);
          }

          // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_y(), target);
          }

          // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_z(), target);
          }

          // uint64 timestamp_us = 5;
          if (this_._internal_timestamp_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_timestamp_us(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Quaternion)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Quaternion::ByteSizeLong(const MessageLite& base) {
          const Quaternion& this_ = static_cast<const Quaternion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Quaternion::ByteSizeLong() const {
          const Quaternion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Quaternion)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_w()) != 0) {
              total_size += 5;
            }
            // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
            // uint64 timestamp_us = 5;
            if (this_._internal_timestamp_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp_us());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Quaternion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Quaternion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_w()) != 0) {
    _this->_impl_.w_ = from._impl_.w_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_impl_.timestamp_us_ = from._impl_.timestamp_us_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Quaternion::InternalSwap(Quaternion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.timestamp_us_)
      + sizeof(Quaternion::_impl_.timestamp_us_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.EulerAngle)
}
EulerAngle::EulerAngle(
    ::google::protobuf::Arena* arena, const EulerAngle& from)
    : EulerAngle(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EulerAngle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EulerAngle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_deg_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, roll_deg_) +
               sizeof(Impl_::yaw_deg_));
}
EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.EulerAngle)
  SharedDtor(*this);
}
inline void EulerAngle::SharedDtor(MessageLite& self) {
  EulerAngle& this_ = static_cast<EulerAngle&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EulerAngle::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EulerAngle(arena);
}
constexpr auto EulerAngle::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EulerAngle),
                                            alignof(EulerAngle));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EulerAngle::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EulerAngle_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EulerAngle::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EulerAngle>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EulerAngle::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EulerAngle>(), &EulerAngle::ByteSizeLong,
            &EulerAngle::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_._cached_size_),
        false,
    },
    &EulerAngle::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EulerAngle::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> EulerAngle::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::EulerAngle>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 timestamp_us = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EulerAngle, _impl_.timestamp_us_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.timestamp_us_)}},
    // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)}},
    // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.pitch_deg_)}},
    // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.pitch_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 timestamp_us = 4;
    {PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.EulerAngle)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.roll_deg_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EulerAngle::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EulerAngle& this_ = static_cast<const EulerAngle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EulerAngle::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EulerAngle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.EulerAngle)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_roll_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_roll_deg(), target);
          }

          // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_pitch_deg(), target);
          }

          // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_yaw_deg(), target);
          }

          // uint64 timestamp_us = 4;
          if (this_._internal_timestamp_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_timestamp_us(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.EulerAngle)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EulerAngle::ByteSizeLong(const MessageLite& base) {
          const EulerAngle& this_ = static_cast<const EulerAngle&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EulerAngle::ByteSizeLong() const {
          const EulerAngle& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.EulerAngle)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_roll_deg()) != 0) {
              total_size += 5;
            }
            // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_deg()) != 0) {
              total_size += 5;
            }
            // uint64 timestamp_us = 4;
            if (this_._internal_timestamp_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp_us());
            }
            // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw_deg()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EulerAngle::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EulerAngle*>(&to_msg);
  auto& from = static_cast<const EulerAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.EulerAngle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_roll_deg()) != 0) {
    _this->_impl_.roll_deg_ = from._impl_.roll_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pitch_deg()) != 0) {
    _this->_impl_.pitch_deg_ = from._impl_.pitch_deg_;
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_impl_.timestamp_us_ = from._impl_.timestamp_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw_deg()) != 0) {
    _this->_impl_.yaw_deg_ = from._impl_.yaw_deg_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EulerAngle::InternalSwap(EulerAngle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.yaw_deg_)
      + sizeof(EulerAngle::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(EulerAngle, _impl_.roll_deg_)>(
          reinterpret_cast<char*>(&_impl_.roll_deg_),
          reinterpret_cast<char*>(&other->_impl_.roll_deg_));
}

::google::protobuf::Metadata EulerAngle::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(
    ::google::protobuf::Arena* arena, const AngularVelocityBody& from)
    : AngularVelocityBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AngularVelocityBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AngularVelocityBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roll_rad_s_),
           0,
           offsetof(Impl_, yaw_rad_s_) -
               offsetof(Impl_, roll_rad_s_) +
               sizeof(Impl_::yaw_rad_s_));
}
AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  SharedDtor(*this);
}
inline void AngularVelocityBody::SharedDtor(MessageLite& self) {
  AngularVelocityBody& this_ = static_cast<AngularVelocityBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AngularVelocityBody::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AngularVelocityBody(arena);
}
constexpr auto AngularVelocityBody::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AngularVelocityBody),
                                            alignof(AngularVelocityBody));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AngularVelocityBody::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AngularVelocityBody_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AngularVelocityBody::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AngularVelocityBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AngularVelocityBody::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AngularVelocityBody>(), &AngularVelocityBody::ByteSizeLong,
            &AngularVelocityBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_._cached_size_),
        false,
    },
    &AngularVelocityBody::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AngularVelocityBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AngularVelocityBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)}},
    // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.pitch_rad_s_)}},
    // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.pitch_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_rad_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_rad_s_) -
      reinterpret_cast<char*>(&_impl_.roll_rad_s_)) + sizeof(_impl_.yaw_rad_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AngularVelocityBody::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AngularVelocityBody& this_ = static_cast<const AngularVelocityBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AngularVelocityBody::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AngularVelocityBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_roll_rad_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_roll_rad_s(), target);
          }

          // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_rad_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_pitch_rad_s(), target);
          }

          // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw_rad_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_yaw_rad_s(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.AngularVelocityBody)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AngularVelocityBody::ByteSizeLong(const MessageLite& base) {
          const AngularVelocityBody& this_ = static_cast<const AngularVelocityBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AngularVelocityBody::ByteSizeLong() const {
          const AngularVelocityBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_roll_rad_s()) != 0) {
              total_size += 5;
            }
            // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_pitch_rad_s()) != 0) {
              total_size += 5;
            }
            // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw_rad_s()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AngularVelocityBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AngularVelocityBody*>(&to_msg);
  auto& from = static_cast<const AngularVelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_roll_rad_s()) != 0) {
    _this->_impl_.roll_rad_s_ = from._impl_.roll_rad_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pitch_rad_s()) != 0) {
    _this->_impl_.pitch_rad_s_ = from._impl_.pitch_rad_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw_rad_s()) != 0) {
    _this->_impl_.yaw_rad_s_ = from._impl_.yaw_rad_s_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AngularVelocityBody::InternalSwap(AngularVelocityBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.yaw_rad_s_)
      + sizeof(AngularVelocityBody::_impl_.yaw_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityBody, _impl_.roll_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.roll_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.roll_rad_s_));
}

::google::protobuf::Metadata AngularVelocityBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GpsInfo::_Internal {
 public:
};

GpsInfo::GpsInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.GpsInfo)
}
GpsInfo::GpsInfo(
    ::google::protobuf::Arena* arena, const GpsInfo& from)
    : GpsInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GpsInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GpsInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, num_satellites_),
           0,
           offsetof(Impl_, fix_type_) -
               offsetof(Impl_, num_satellites_) +
               sizeof(Impl_::fix_type_));
}
GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.GpsInfo)
  SharedDtor(*this);
}
inline void GpsInfo::SharedDtor(MessageLite& self) {
  GpsInfo& this_ = static_cast<GpsInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GpsInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GpsInfo(arena);
}
constexpr auto GpsInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GpsInfo),
                                            alignof(GpsInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GpsInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GpsInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GpsInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GpsInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GpsInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GpsInfo>(), &GpsInfo::ByteSizeLong,
            &GpsInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_._cached_size_),
        false,
    },
    &GpsInfo::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GpsInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> GpsInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::GpsInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GpsInfo, _impl_.fix_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.fix_type_)}},
    // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GpsInfo, _impl_.num_satellites_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.num_satellites_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.num_satellites_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
    {PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.fix_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GpsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.GpsInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_satellites_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fix_type_) -
      reinterpret_cast<char*>(&_impl_.num_satellites_)) + sizeof(_impl_.fix_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GpsInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GpsInfo& this_ = static_cast<const GpsInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GpsInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GpsInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.GpsInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
          if (this_._internal_num_satellites() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_num_satellites(), target);
          }

          // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
          if (this_._internal_fix_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_fix_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.GpsInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GpsInfo::ByteSizeLong(const MessageLite& base) {
          const GpsInfo& this_ = static_cast<const GpsInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GpsInfo::ByteSizeLong() const {
          const GpsInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.GpsInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
            if (this_._internal_num_satellites() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_satellites());
            }
            // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
            if (this_._internal_fix_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_fix_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GpsInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GpsInfo*>(&to_msg);
  auto& from = static_cast<const GpsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.GpsInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_satellites() != 0) {
    _this->_impl_.num_satellites_ = from._impl_.num_satellites_;
  }
  if (from._internal_fix_type() != 0) {
    _this->_impl_.fix_type_ = from._impl_.fix_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GpsInfo::InternalSwap(GpsInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.fix_type_)
      + sizeof(GpsInfo::_impl_.fix_type_)
      - PROTOBUF_FIELD_OFFSET(GpsInfo, _impl_.num_satellites_)>(
          reinterpret_cast<char*>(&_impl_.num_satellites_),
          reinterpret_cast<char*>(&other->_impl_.num_satellites_));
}

::google::protobuf::Metadata GpsInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RawGps::_Internal {
 public:
};

RawGps::RawGps(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.RawGps)
}
RawGps::RawGps(
    ::google::protobuf::Arena* arena, const RawGps& from)
    : RawGps(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RawGps::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RawGps::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           0,
           offsetof(Impl_, yaw_deg_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::yaw_deg_));
}
RawGps::~RawGps() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.RawGps)
  SharedDtor(*this);
}
inline void RawGps::SharedDtor(MessageLite& self) {
  RawGps& this_ = static_cast<RawGps&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* RawGps::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RawGps(arena);
}
constexpr auto RawGps::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RawGps),
                                            alignof(RawGps));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RawGps::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RawGps_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RawGps::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RawGps>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RawGps::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RawGps>(), &RawGps::ByteSizeLong,
            &RawGps::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RawGps, _impl_._cached_size_),
        false,
    },
    &RawGps::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RawGps::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 0, 2> RawGps::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::RawGps>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 timestamp_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RawGps, _impl_.timestamp_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.timestamp_us_)}},
    // double latitude_deg = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.latitude_deg_)}},
    // double longitude_deg = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.longitude_deg_)}},
    // float absolute_altitude_m = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.absolute_altitude_m_)}},
    // float hdop = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.hdop_)}},
    // float vdop = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vdop_)}},
    // float velocity_m_s = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_m_s_)}},
    // float cog_deg = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.cog_deg_)}},
    // float altitude_ellipsoid_m = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.altitude_ellipsoid_m_)}},
    // float horizontal_uncertainty_m = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.horizontal_uncertainty_m_)}},
    // float vertical_uncertainty_m = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vertical_uncertainty_m_)}},
    // float velocity_uncertainty_m_s = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_uncertainty_m_s_)}},
    // float heading_uncertainty_deg = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.heading_uncertainty_deg_)}},
    // float yaw_deg = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(RawGps, _impl_.yaw_deg_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 timestamp_us = 1;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // double latitude_deg = 2;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 3;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 4;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float hdop = 5;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.hdop_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vdop = 6;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vdop_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float velocity_m_s = 7;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cog_deg = 8;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.cog_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float altitude_ellipsoid_m = 9;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.altitude_ellipsoid_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float horizontal_uncertainty_m = 10;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.horizontal_uncertainty_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float vertical_uncertainty_m = 11;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.vertical_uncertainty_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float velocity_uncertainty_m_s = 12;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.velocity_uncertainty_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float heading_uncertainty_deg = 13;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.heading_uncertainty_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw_deg = 14;
    {PROTOBUF_FIELD_OFFSET(RawGps, _impl_.yaw_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RawGps::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.RawGps)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_deg_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.yaw_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RawGps::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RawGps& this_ = static_cast<const RawGps&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RawGps::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RawGps& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.RawGps)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 timestamp_us = 1;
          if (this_._internal_timestamp_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_timestamp_us(), target);
          }

          // double latitude_deg = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_latitude_deg(), target);
          }

          // double longitude_deg = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_longitude_deg(), target);
          }

          // float absolute_altitude_m = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_absolute_altitude_m(), target);
          }

          // float hdop = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_hdop()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_hdop(), target);
          }

          // float vdop = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_vdop()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_vdop(), target);
          }

          // float velocity_m_s = 7;
          if (::absl::bit_cast<::uint32_t>(this_._internal_velocity_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_velocity_m_s(), target);
          }

          // float cog_deg = 8;
          if (::absl::bit_cast<::uint32_t>(this_._internal_cog_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_cog_deg(), target);
          }

          // float altitude_ellipsoid_m = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_altitude_ellipsoid_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_altitude_ellipsoid_m(), target);
          }

          // float horizontal_uncertainty_m = 10;
          if (::absl::bit_cast<::uint32_t>(this_._internal_horizontal_uncertainty_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_horizontal_uncertainty_m(), target);
          }

          // float vertical_uncertainty_m = 11;
          if (::absl::bit_cast<::uint32_t>(this_._internal_vertical_uncertainty_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_vertical_uncertainty_m(), target);
          }

          // float velocity_uncertainty_m_s = 12;
          if (::absl::bit_cast<::uint32_t>(this_._internal_velocity_uncertainty_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_velocity_uncertainty_m_s(), target);
          }

          // float heading_uncertainty_deg = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_heading_uncertainty_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_heading_uncertainty_deg(), target);
          }

          // float yaw_deg = 14;
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_yaw_deg(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.RawGps)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RawGps::ByteSizeLong(const MessageLite& base) {
          const RawGps& this_ = static_cast<const RawGps&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RawGps::ByteSizeLong() const {
          const RawGps& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.RawGps)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint64 timestamp_us = 1;
            if (this_._internal_timestamp_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp_us());
            }
            // double latitude_deg = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude_deg()) != 0) {
              total_size += 9;
            }
            // double longitude_deg = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude_deg()) != 0) {
              total_size += 9;
            }
            // float absolute_altitude_m = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
              total_size += 5;
            }
            // float hdop = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_hdop()) != 0) {
              total_size += 5;
            }
            // float vdop = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_vdop()) != 0) {
              total_size += 5;
            }
            // float velocity_m_s = 7;
            if (::absl::bit_cast<::uint32_t>(this_._internal_velocity_m_s()) != 0) {
              total_size += 5;
            }
            // float cog_deg = 8;
            if (::absl::bit_cast<::uint32_t>(this_._internal_cog_deg()) != 0) {
              total_size += 5;
            }
            // float altitude_ellipsoid_m = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_altitude_ellipsoid_m()) != 0) {
              total_size += 5;
            }
            // float horizontal_uncertainty_m = 10;
            if (::absl::bit_cast<::uint32_t>(this_._internal_horizontal_uncertainty_m()) != 0) {
              total_size += 5;
            }
            // float vertical_uncertainty_m = 11;
            if (::absl::bit_cast<::uint32_t>(this_._internal_vertical_uncertainty_m()) != 0) {
              total_size += 5;
            }
            // float velocity_uncertainty_m_s = 12;
            if (::absl::bit_cast<::uint32_t>(this_._internal_velocity_uncertainty_m_s()) != 0) {
              total_size += 5;
            }
            // float heading_uncertainty_deg = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_heading_uncertainty_deg()) != 0) {
              total_size += 5;
            }
            // float yaw_deg = 14;
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw_deg()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RawGps::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RawGps*>(&to_msg);
  auto& from = static_cast<const RawGps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.RawGps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_us() != 0) {
    _this->_impl_.timestamp_us_ = from._impl_.timestamp_us_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_latitude_deg()) != 0) {
    _this->_impl_.latitude_deg_ = from._impl_.latitude_deg_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude_deg()) != 0) {
    _this->_impl_.longitude_deg_ = from._impl_.longitude_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_absolute_altitude_m()) != 0) {
    _this->_impl_.absolute_altitude_m_ = from._impl_.absolute_altitude_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_hdop()) != 0) {
    _this->_impl_.hdop_ = from._impl_.hdop_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_vdop()) != 0) {
    _this->_impl_.vdop_ = from._impl_.vdop_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_velocity_m_s()) != 0) {
    _this->_impl_.velocity_m_s_ = from._impl_.velocity_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_cog_deg()) != 0) {
    _this->_impl_.cog_deg_ = from._impl_.cog_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_altitude_ellipsoid_m()) != 0) {
    _this->_impl_.altitude_ellipsoid_m_ = from._impl_.altitude_ellipsoid_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_horizontal_uncertainty_m()) != 0) {
    _this->_impl_.horizontal_uncertainty_m_ = from._impl_.horizontal_uncertainty_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_vertical_uncertainty_m()) != 0) {
    _this->_impl_.vertical_uncertainty_m_ = from._impl_.vertical_uncertainty_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_velocity_uncertainty_m_s()) != 0) {
    _this->_impl_.velocity_uncertainty_m_s_ = from._impl_.velocity_uncertainty_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_heading_uncertainty_deg()) != 0) {
    _this->_impl_.heading_uncertainty_deg_ = from._impl_.heading_uncertainty_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw_deg()) != 0) {
    _this->_impl_.yaw_deg_ = from._impl_.yaw_deg_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RawGps::CopyFrom(const RawGps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.RawGps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RawGps::InternalSwap(RawGps* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawGps, _impl_.yaw_deg_)
      + sizeof(RawGps::_impl_.yaw_deg_)
      - PROTOBUF_FIELD_OFFSET(RawGps, _impl_.timestamp_us_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_us_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_us_));
}

::google::protobuf::Metadata RawGps::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Battery::_Internal {
 public:
};

Battery::Battery(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Battery)
}
Battery::Battery(
    ::google::protobuf::Arena* arena, const Battery& from)
    : Battery(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Battery::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Battery::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, voltage_v_),
           0,
           offsetof(Impl_, remaining_percent_) -
               offsetof(Impl_, voltage_v_) +
               sizeof(Impl_::remaining_percent_));
}
Battery::~Battery() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Battery)
  SharedDtor(*this);
}
inline void Battery::SharedDtor(MessageLite& self) {
  Battery& this_ = static_cast<Battery&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Battery::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Battery(arena);
}
constexpr auto Battery::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Battery),
                                            alignof(Battery));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Battery::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Battery_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Battery::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Battery>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Battery::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Battery>(), &Battery::ByteSizeLong,
            &Battery::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Battery, _impl_._cached_size_),
        false,
    },
    &Battery::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Battery::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Battery::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Battery>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.remaining_percent_)}},
    // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Battery, _impl_.voltage_v_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.voltage_v_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Battery, _impl_.remaining_percent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Battery)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.voltage_v_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.remaining_percent_) -
      reinterpret_cast<char*>(&_impl_.voltage_v_)) + sizeof(_impl_.remaining_percent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Battery::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Battery& this_ = static_cast<const Battery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Battery::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Battery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Battery)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_voltage_v()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_voltage_v(), target);
          }

          // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_remaining_percent()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_remaining_percent(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Battery)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Battery::ByteSizeLong(const MessageLite& base) {
          const Battery& this_ = static_cast<const Battery&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Battery::ByteSizeLong() const {
          const Battery& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Battery)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_voltage_v()) != 0) {
              total_size += 5;
            }
            // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_remaining_percent()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Battery::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Battery*>(&to_msg);
  auto& from = static_cast<const Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Battery)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_voltage_v()) != 0) {
    _this->_impl_.voltage_v_ = from._impl_.voltage_v_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_remaining_percent()) != 0) {
    _this->_impl_.remaining_percent_ = from._impl_.remaining_percent_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Battery::InternalSwap(Battery* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, _impl_.remaining_percent_)
      + sizeof(Battery::_impl_.remaining_percent_)
      - PROTOBUF_FIELD_OFFSET(Battery, _impl_.voltage_v_)>(
          reinterpret_cast<char*>(&_impl_.voltage_v_),
          reinterpret_cast<char*>(&other->_impl_.voltage_v_));
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RcStatus::_Internal {
 public:
};

RcStatus::RcStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.RcStatus)
}
RcStatus::RcStatus(
    ::google::protobuf::Arena* arena, const RcStatus& from)
    : RcStatus(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RcStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RcStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, was_available_once_),
           0,
           offsetof(Impl_, signal_strength_percent_) -
               offsetof(Impl_, was_available_once_) +
               sizeof(Impl_::signal_strength_percent_));
}
RcStatus::~RcStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.RcStatus)
  SharedDtor(*this);
}
inline void RcStatus::SharedDtor(MessageLite& self) {
  RcStatus& this_ = static_cast<RcStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* RcStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RcStatus(arena);
}
constexpr auto RcStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RcStatus),
                                            alignof(RcStatus));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RcStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RcStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RcStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RcStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RcStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RcStatus>(), &RcStatus::ByteSizeLong,
            &RcStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RcStatus, _impl_._cached_size_),
        false,
    },
    &RcStatus::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RcStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> RcStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::RcStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RcStatus, _impl_.was_available_once_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.was_available_once_)}},
    // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RcStatus, _impl_.is_available_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.is_available_)}},
    // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.signal_strength_percent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.was_available_once_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.is_available_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.signal_strength_percent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.RcStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.was_available_once_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.signal_strength_percent_) -
      reinterpret_cast<char*>(&_impl_.was_available_once_)) + sizeof(_impl_.signal_strength_percent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RcStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RcStatus& this_ = static_cast<const RcStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RcStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RcStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.RcStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
          if (this_._internal_was_available_once() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_was_available_once(), target);
          }

          // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
          if (this_._internal_is_available() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_is_available(), target);
          }

          // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_signal_strength_percent()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_signal_strength_percent(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.RcStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RcStatus::ByteSizeLong(const MessageLite& base) {
          const RcStatus& this_ = static_cast<const RcStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RcStatus::ByteSizeLong() const {
          const RcStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.RcStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
            if (this_._internal_was_available_once() != 0) {
              total_size += 2;
            }
            // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
            if (this_._internal_is_available() != 0) {
              total_size += 2;
            }
            // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_signal_strength_percent()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RcStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RcStatus*>(&to_msg);
  auto& from = static_cast<const RcStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.RcStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_was_available_once() != 0) {
    _this->_impl_.was_available_once_ = from._impl_.was_available_once_;
  }
  if (from._internal_is_available() != 0) {
    _this->_impl_.is_available_ = from._impl_.is_available_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_signal_strength_percent()) != 0) {
    _this->_impl_.signal_strength_percent_ = from._impl_.signal_strength_percent_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RcStatus::CopyFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RcStatus::InternalSwap(RcStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.signal_strength_percent_)
      + sizeof(RcStatus::_impl_.signal_strength_percent_)
      - PROTOBUF_FIELD_OFFSET(RcStatus, _impl_.was_available_once_)>(
          reinterpret_cast<char*>(&_impl_.was_available_once_),
          reinterpret_cast<char*>(&other->_impl_.was_available_once_));
}

::google::protobuf::Metadata RcStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StatusText::_Internal {
 public:
};

StatusText::StatusText(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.StatusText)
}
inline PROTOBUF_NDEBUG_INLINE StatusText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::StatusText& from_msg)
      : text_(arena, from.text_),
        _cached_size_{0} {}

StatusText::StatusText(
    ::google::protobuf::Arena* arena,
    const StatusText& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StatusText* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.StatusText)
}
inline PROTOBUF_NDEBUG_INLINE StatusText::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : text_(arena),
        _cached_size_{0} {}

inline void StatusText::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
StatusText::~StatusText() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.StatusText)
  SharedDtor(*this);
}
inline void StatusText::SharedDtor(MessageLite& self) {
  StatusText& this_ = static_cast<StatusText&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.text_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StatusText::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StatusText(arena);
}
constexpr auto StatusText::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StatusText),
                                            alignof(StatusText));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StatusText::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StatusText_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StatusText::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StatusText>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StatusText::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StatusText>(), &StatusText::ByteSizeLong,
            &StatusText::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StatusText, _impl_._cached_size_),
        false,
    },
    &StatusText::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StatusText::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 51, 2> StatusText::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::StatusText>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StatusText, _impl_.text_)}},
    // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StatusText, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StatusText, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
    {PROTOBUF_FIELD_OFFSET(StatusText, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(StatusText, _impl_.text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\4\0\0\0\0\0"
    "mavsdk.rpc.telemetry_server.StatusText"
    "text"
  }},
};

PROTOBUF_NOINLINE void StatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.StatusText)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StatusText::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StatusText& this_ = static_cast<const StatusText&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StatusText::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StatusText& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.StatusText)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // string text = 2;
          if (!this_._internal_text().empty()) {
            const std::string& _s = this_._internal_text();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.telemetry_server.StatusText.text");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.StatusText)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StatusText::ByteSizeLong(const MessageLite& base) {
          const StatusText& this_ = static_cast<const StatusText&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StatusText::ByteSizeLong() const {
          const StatusText& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.StatusText)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string text = 2;
            if (!this_._internal_text().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_text());
            }
            // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StatusText::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StatusText*>(&to_msg);
  auto& from = static_cast<const StatusText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.StatusText)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusText::CopyFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StatusText::InternalSwap(StatusText* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata StatusText::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ActuatorControlTarget::_Internal {
 public:
};

ActuatorControlTarget::ActuatorControlTarget(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorControlTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::ActuatorControlTarget& from_msg)
      : controls_{visibility, arena, from.controls_},
        _cached_size_{0} {}

ActuatorControlTarget::ActuatorControlTarget(
    ::google::protobuf::Arena* arena,
    const ActuatorControlTarget& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ActuatorControlTarget* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.group_ = from._impl_.group_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorControlTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : controls_{visibility, arena},
        _cached_size_{0} {}

inline void ActuatorControlTarget::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.group_ = {};
}
ActuatorControlTarget::~ActuatorControlTarget() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  SharedDtor(*this);
}
inline void ActuatorControlTarget::SharedDtor(MessageLite& self) {
  ActuatorControlTarget& this_ = static_cast<ActuatorControlTarget&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ActuatorControlTarget::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ActuatorControlTarget(arena);
}
constexpr auto ActuatorControlTarget::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.controls_) +
          decltype(ActuatorControlTarget::_impl_.controls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ActuatorControlTarget), alignof(ActuatorControlTarget), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ActuatorControlTarget::PlacementNew_,
                                 sizeof(ActuatorControlTarget),
                                 alignof(ActuatorControlTarget));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ActuatorControlTarget::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ActuatorControlTarget_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ActuatorControlTarget::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ActuatorControlTarget>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ActuatorControlTarget::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ActuatorControlTarget>(), &ActuatorControlTarget::ByteSizeLong,
            &ActuatorControlTarget::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_._cached_size_),
        false,
    },
    &ActuatorControlTarget::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ActuatorControlTarget::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ActuatorControlTarget::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::ActuatorControlTarget>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float controls = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.controls_)}},
    // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ActuatorControlTarget, _impl_.group_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.group_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.group_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated float controls = 2;
    {PROTOBUF_FIELD_OFFSET(ActuatorControlTarget, _impl_.controls_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ActuatorControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.controls_.Clear();
  _impl_.group_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ActuatorControlTarget::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ActuatorControlTarget& this_ = static_cast<const ActuatorControlTarget&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ActuatorControlTarget::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ActuatorControlTarget& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
          if (this_._internal_group() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_group(), target);
          }

          // repeated float controls = 2;
          if (this_._internal_controls_size() > 0) {
            target = stream->WriteFixedPacked(2, this_._internal_controls(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ActuatorControlTarget::ByteSizeLong(const MessageLite& base) {
          const ActuatorControlTarget& this_ = static_cast<const ActuatorControlTarget&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ActuatorControlTarget::ByteSizeLong() const {
          const ActuatorControlTarget& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float controls = 2;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_controls_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
            if (this_._internal_group() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_group());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ActuatorControlTarget::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ActuatorControlTarget*>(&to_msg);
  auto& from = static_cast<const ActuatorControlTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_controls()->MergeFrom(from._internal_controls());
  if (from._internal_group() != 0) {
    _this->_impl_.group_ = from._impl_.group_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorControlTarget::CopyFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ActuatorControlTarget::InternalSwap(ActuatorControlTarget* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.controls_.InternalSwap(&other->_impl_.controls_);
        swap(_impl_.group_, other->_impl_.group_);
}

::google::protobuf::Metadata ActuatorControlTarget::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ActuatorOutputStatus::_Internal {
 public:
};

ActuatorOutputStatus::ActuatorOutputStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorOutputStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::ActuatorOutputStatus& from_msg)
      : actuator_{visibility, arena, from.actuator_},
        _cached_size_{0} {}

ActuatorOutputStatus::ActuatorOutputStatus(
    ::google::protobuf::Arena* arena,
    const ActuatorOutputStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ActuatorOutputStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.active_ = from._impl_.active_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
}
inline PROTOBUF_NDEBUG_INLINE ActuatorOutputStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actuator_{visibility, arena},
        _cached_size_{0} {}

inline void ActuatorOutputStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.active_ = {};
}
ActuatorOutputStatus::~ActuatorOutputStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  SharedDtor(*this);
}
inline void ActuatorOutputStatus::SharedDtor(MessageLite& self) {
  ActuatorOutputStatus& this_ = static_cast<ActuatorOutputStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ActuatorOutputStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ActuatorOutputStatus(arena);
}
constexpr auto ActuatorOutputStatus::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.actuator_) +
          decltype(ActuatorOutputStatus::_impl_.actuator_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ActuatorOutputStatus), alignof(ActuatorOutputStatus), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ActuatorOutputStatus::PlacementNew_,
                                 sizeof(ActuatorOutputStatus),
                                 alignof(ActuatorOutputStatus));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ActuatorOutputStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ActuatorOutputStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ActuatorOutputStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ActuatorOutputStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ActuatorOutputStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ActuatorOutputStatus>(), &ActuatorOutputStatus::ByteSizeLong,
            &ActuatorOutputStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_._cached_size_),
        false,
    },
    &ActuatorOutputStatus::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ActuatorOutputStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ActuatorOutputStatus::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::ActuatorOutputStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float actuator = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.actuator_)}},
    // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ActuatorOutputStatus, _impl_.active_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.active_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
    {PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.active_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated float actuator = 2;
    {PROTOBUF_FIELD_OFFSET(ActuatorOutputStatus, _impl_.actuator_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ActuatorOutputStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actuator_.Clear();
  _impl_.active_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ActuatorOutputStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ActuatorOutputStatus& this_ = static_cast<const ActuatorOutputStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ActuatorOutputStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ActuatorOutputStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
          if (this_._internal_active() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_active(), target);
          }

          // repeated float actuator = 2;
          if (this_._internal_actuator_size() > 0) {
            target = stream->WriteFixedPacked(2, this_._internal_actuator(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ActuatorOutputStatus::ByteSizeLong(const MessageLite& base) {
          const ActuatorOutputStatus& this_ = static_cast<const ActuatorOutputStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ActuatorOutputStatus::ByteSizeLong() const {
          const ActuatorOutputStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float actuator = 2;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_actuator_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
            if (this_._internal_active() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_active());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ActuatorOutputStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ActuatorOutputStatus*>(&to_msg);
  auto& from = static_cast<const ActuatorOutputStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actuator()->MergeFrom(from._internal_actuator());
  if (from._internal_active() != 0) {
    _this->_impl_.active_ = from._impl_.active_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorOutputStatus::CopyFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ActuatorOutputStatus::InternalSwap(ActuatorOutputStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actuator_.InternalSwap(&other->_impl_.actuator_);
        swap(_impl_.active_, other->_impl_.active_);
}

::google::protobuf::Metadata ActuatorOutputStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Covariance::_Internal {
 public:
};

Covariance::Covariance(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Covariance)
}
inline PROTOBUF_NDEBUG_INLINE Covariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::Covariance& from_msg)
      : covariance_matrix_{visibility, arena, from.covariance_matrix_},
        _cached_size_{0} {}

Covariance::Covariance(
    ::google::protobuf::Arena* arena,
    const Covariance& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Covariance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Covariance)
}
inline PROTOBUF_NDEBUG_INLINE Covariance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : covariance_matrix_{visibility, arena},
        _cached_size_{0} {}

inline void Covariance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Covariance)
  SharedDtor(*this);
}
inline void Covariance::SharedDtor(MessageLite& self) {
  Covariance& this_ = static_cast<Covariance&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Covariance::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Covariance(arena);
}
constexpr auto Covariance::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Covariance, _impl_.covariance_matrix_) +
          decltype(Covariance::_impl_.covariance_matrix_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Covariance), alignof(Covariance), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Covariance::PlacementNew_,
                                 sizeof(Covariance),
                                 alignof(Covariance));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Covariance::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Covariance_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Covariance::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Covariance>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Covariance::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Covariance>(), &Covariance::ByteSizeLong,
            &Covariance::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Covariance, _impl_._cached_size_),
        false,
    },
    &Covariance::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Covariance::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Covariance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Covariance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float covariance_matrix = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Covariance, _impl_.covariance_matrix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float covariance_matrix = 1;
    {PROTOBUF_FIELD_OFFSET(Covariance, _impl_.covariance_matrix_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Covariance)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.covariance_matrix_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Covariance::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Covariance& this_ = static_cast<const Covariance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Covariance::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Covariance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Covariance)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float covariance_matrix = 1;
          if (this_._internal_covariance_matrix_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_covariance_matrix(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Covariance)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Covariance::ByteSizeLong(const MessageLite& base) {
          const Covariance& this_ = static_cast<const Covariance&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Covariance::ByteSizeLong() const {
          const Covariance& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Covariance)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float covariance_matrix = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_covariance_matrix_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Covariance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Covariance*>(&to_msg);
  auto& from = static_cast<const Covariance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Covariance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_covariance_matrix()->MergeFrom(from._internal_covariance_matrix());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Covariance::InternalSwap(Covariance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.covariance_matrix_.InternalSwap(&other->_impl_.covariance_matrix_);
}

::google::protobuf::Metadata Covariance::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VelocityBody::_Internal {
 public:
};

VelocityBody::VelocityBody(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.VelocityBody)
}
VelocityBody::VelocityBody(
    ::google::protobuf::Arena* arena, const VelocityBody& from)
    : VelocityBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VelocityBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VelocityBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_m_s_),
           0,
           offsetof(Impl_, z_m_s_) -
               offsetof(Impl_, x_m_s_) +
               sizeof(Impl_::z_m_s_));
}
VelocityBody::~VelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.VelocityBody)
  SharedDtor(*this);
}
inline void VelocityBody::SharedDtor(MessageLite& self) {
  VelocityBody& this_ = static_cast<VelocityBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VelocityBody::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VelocityBody(arena);
}
constexpr auto VelocityBody::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VelocityBody),
                                            alignof(VelocityBody));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VelocityBody::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VelocityBody_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VelocityBody::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VelocityBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VelocityBody::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VelocityBody>(), &VelocityBody::ByteSizeLong,
            &VelocityBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_._cached_size_),
        false,
    },
    &VelocityBody::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VelocityBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> VelocityBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::VelocityBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x_m_s = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.x_m_s_)}},
    // float y_m_s = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.y_m_s_)}},
    // float z_m_s = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.z_m_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x_m_s = 1;
    {PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.x_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_m_s = 2;
    {PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.y_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z_m_s = 3;
    {PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.z_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.VelocityBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_m_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_m_s_) -
      reinterpret_cast<char*>(&_impl_.x_m_s_)) + sizeof(_impl_.z_m_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VelocityBody::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VelocityBody& this_ = static_cast<const VelocityBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VelocityBody::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VelocityBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.VelocityBody)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x_m_s = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x_m_s(), target);
          }

          // float y_m_s = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y_m_s(), target);
          }

          // float z_m_s = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z_m_s(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.VelocityBody)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VelocityBody::ByteSizeLong(const MessageLite& base) {
          const VelocityBody& this_ = static_cast<const VelocityBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VelocityBody::ByteSizeLong() const {
          const VelocityBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.VelocityBody)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x_m_s = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x_m_s()) != 0) {
              total_size += 5;
            }
            // float y_m_s = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y_m_s()) != 0) {
              total_size += 5;
            }
            // float z_m_s = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z_m_s()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VelocityBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VelocityBody*>(&to_msg);
  auto& from = static_cast<const VelocityBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.VelocityBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x_m_s()) != 0) {
    _this->_impl_.x_m_s_ = from._impl_.x_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y_m_s()) != 0) {
    _this->_impl_.y_m_s_ = from._impl_.y_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z_m_s()) != 0) {
    _this->_impl_.z_m_s_ = from._impl_.z_m_s_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VelocityBody::CopyFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VelocityBody::InternalSwap(VelocityBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.z_m_s_)
      + sizeof(VelocityBody::_impl_.z_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityBody, _impl_.x_m_s_)>(
          reinterpret_cast<char*>(&_impl_.x_m_s_),
          reinterpret_cast<char*>(&other->_impl_.x_m_s_));
}

::google::protobuf::Metadata VelocityBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PositionBody)
}
PositionBody::PositionBody(
    ::google::protobuf::Arena* arena, const PositionBody& from)
    : PositionBody(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PositionBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionBody::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_m_),
           0,
           offsetof(Impl_, z_m_) -
               offsetof(Impl_, x_m_) +
               sizeof(Impl_::z_m_));
}
PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PositionBody)
  SharedDtor(*this);
}
inline void PositionBody::SharedDtor(MessageLite& self) {
  PositionBody& this_ = static_cast<PositionBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PositionBody::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PositionBody(arena);
}
constexpr auto PositionBody::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PositionBody),
                                            alignof(PositionBody));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PositionBody::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PositionBody_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PositionBody::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PositionBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PositionBody::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PositionBody>(), &PositionBody::ByteSizeLong,
            &PositionBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PositionBody, _impl_._cached_size_),
        false,
    },
    &PositionBody::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PositionBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PositionBody::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PositionBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x_m = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_)}},
    // float y_m = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.y_m_)}},
    // float z_m = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x_m = 1;
    {PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y_m = 2;
    {PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.y_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z_m = 3;
    {PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PositionBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_m_) -
      reinterpret_cast<char*>(&_impl_.x_m_)) + sizeof(_impl_.z_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PositionBody::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PositionBody& this_ = static_cast<const PositionBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PositionBody::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PositionBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PositionBody)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x_m = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x_m(), target);
          }

          // float y_m = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y_m(), target);
          }

          // float z_m = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z_m(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PositionBody)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PositionBody::ByteSizeLong(const MessageLite& base) {
          const PositionBody& this_ = static_cast<const PositionBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PositionBody::ByteSizeLong() const {
          const PositionBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PositionBody)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x_m = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x_m()) != 0) {
              total_size += 5;
            }
            // float y_m = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y_m()) != 0) {
              total_size += 5;
            }
            // float z_m = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z_m()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PositionBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionBody*>(&to_msg);
  auto& from = static_cast<const PositionBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PositionBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x_m()) != 0) {
    _this->_impl_.x_m_ = from._impl_.x_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y_m()) != 0) {
    _this->_impl_.y_m_ = from._impl_.y_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z_m()) != 0) {
    _this->_impl_.z_m_ = from._impl_.z_m_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionBody::InternalSwap(PositionBody* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.z_m_)
      + sizeof(PositionBody::_impl_.z_m_)
      - PROTOBUF_FIELD_OFFSET(PositionBody, _impl_.x_m_)>(
          reinterpret_cast<char*>(&_impl_.x_m_),
          reinterpret_cast<char*>(&other->_impl_.x_m_));
}

::google::protobuf::Metadata PositionBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Odometry::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Odometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_);
};

Odometry::Odometry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::Odometry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Odometry::Odometry(
    ::google::protobuf::Arena* arena,
    const Odometry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Odometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_body_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::PositionBody>(
                              arena, *from._impl_.position_body_)
                        : nullptr;
  _impl_.q_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Quaternion>(
                              arena, *from._impl_.q_)
                        : nullptr;
  _impl_.velocity_body_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::VelocityBody>(
                              arena, *from._impl_.velocity_body_)
                        : nullptr;
  _impl_.angular_velocity_body_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(
                              arena, *from._impl_.angular_velocity_body_)
                        : nullptr;
  _impl_.pose_covariance_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Covariance>(
                              arena, *from._impl_.pose_covariance_)
                        : nullptr;
  _impl_.velocity_covariance_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Covariance>(
                              arena, *from._impl_.velocity_covariance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_usec_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, time_usec_),
           offsetof(Impl_, child_frame_id_) -
               offsetof(Impl_, time_usec_) +
               sizeof(Impl_::child_frame_id_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Odometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_body_),
           0,
           offsetof(Impl_, child_frame_id_) -
               offsetof(Impl_, position_body_) +
               sizeof(Impl_::child_frame_id_));
}
Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Odometry)
  SharedDtor(*this);
}
inline void Odometry::SharedDtor(MessageLite& self) {
  Odometry& this_ = static_cast<Odometry&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_body_;
  delete this_._impl_.q_;
  delete this_._impl_.velocity_body_;
  delete this_._impl_.angular_velocity_body_;
  delete this_._impl_.pose_covariance_;
  delete this_._impl_.velocity_covariance_;
  this_._impl_.~Impl_();
}

inline void* Odometry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Odometry(arena);
}
constexpr auto Odometry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Odometry),
                                            alignof(Odometry));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Odometry::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Odometry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Odometry::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Odometry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Odometry::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Odometry>(), &Odometry::ByteSizeLong,
            &Odometry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Odometry, _impl_._cached_size_),
        false,
    },
    &Odometry::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Odometry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 6, 0, 2> Odometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Odometry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 time_usec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Odometry, _impl_.time_usec_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.time_usec_)}},
    // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Odometry, _impl_.frame_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.frame_id_)}},
    // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Odometry, _impl_.child_frame_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_)}},
    // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_)}},
    // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.q_)}},
    // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_body_)}},
    // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.angular_velocity_body_)}},
    // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_covariance_)}},
    // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 5, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_covariance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 time_usec = 1;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.time_usec_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.q_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_body_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.angular_velocity_body_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_covariance_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.velocity_covariance_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PositionBody>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Quaternion>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::VelocityBody>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AngularVelocityBody>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Covariance>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Covariance>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Odometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_body_ != nullptr);
      _impl_.position_body_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.q_ != nullptr);
      _impl_.q_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.velocity_body_ != nullptr);
      _impl_.velocity_body_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.angular_velocity_body_ != nullptr);
      _impl_.angular_velocity_body_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.pose_covariance_ != nullptr);
      _impl_.pose_covariance_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.velocity_covariance_ != nullptr);
      _impl_.velocity_covariance_->Clear();
    }
  }
  ::memset(&_impl_.time_usec_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.child_frame_id_) -
      reinterpret_cast<char*>(&_impl_.time_usec_)) + sizeof(_impl_.child_frame_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Odometry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Odometry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Odometry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 time_usec = 1;
          if (this_._internal_time_usec() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_time_usec(), target);
          }

          // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
          if (this_._internal_frame_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_frame_id(), target);
          }

          // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
          if (this_._internal_child_frame_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_child_frame_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.position_body_, this_._impl_.position_body_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.q_, this_._impl_.q_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.velocity_body_, this_._impl_.velocity_body_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.angular_velocity_body_, this_._impl_.angular_velocity_body_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.pose_covariance_, this_._impl_.pose_covariance_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.velocity_covariance_, this_._impl_.velocity_covariance_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Odometry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Odometry::ByteSizeLong(const MessageLite& base) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Odometry::ByteSizeLong() const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Odometry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_body_);
            }
            // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.q_);
            }
            // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_body_);
            }
            // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_velocity_body_);
            }
            // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_covariance_);
            }
            // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_covariance_);
            }
          }
           {
            // uint64 time_usec = 1;
            if (this_._internal_time_usec() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_time_usec());
            }
            // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
            if (this_._internal_frame_id() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_frame_id());
            }
            // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
            if (this_._internal_child_frame_id() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_child_frame_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Odometry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Odometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_body_ != nullptr);
      if (_this->_impl_.position_body_ == nullptr) {
        _this->_impl_.position_body_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::PositionBody>(arena, *from._impl_.position_body_);
      } else {
        _this->_impl_.position_body_->MergeFrom(*from._impl_.position_body_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.q_ != nullptr);
      if (_this->_impl_.q_ == nullptr) {
        _this->_impl_.q_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Quaternion>(arena, *from._impl_.q_);
      } else {
        _this->_impl_.q_->MergeFrom(*from._impl_.q_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.velocity_body_ != nullptr);
      if (_this->_impl_.velocity_body_ == nullptr) {
        _this->_impl_.velocity_body_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::VelocityBody>(arena, *from._impl_.velocity_body_);
      } else {
        _this->_impl_.velocity_body_->MergeFrom(*from._impl_.velocity_body_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.angular_velocity_body_ != nullptr);
      if (_this->_impl_.angular_velocity_body_ == nullptr) {
        _this->_impl_.angular_velocity_body_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(arena, *from._impl_.angular_velocity_body_);
      } else {
        _this->_impl_.angular_velocity_body_->MergeFrom(*from._impl_.angular_velocity_body_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.pose_covariance_ != nullptr);
      if (_this->_impl_.pose_covariance_ == nullptr) {
        _this->_impl_.pose_covariance_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Covariance>(arena, *from._impl_.pose_covariance_);
      } else {
        _this->_impl_.pose_covariance_->MergeFrom(*from._impl_.pose_covariance_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.velocity_covariance_ != nullptr);
      if (_this->_impl_.velocity_covariance_ == nullptr) {
        _this->_impl_.velocity_covariance_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::Covariance>(arena, *from._impl_.velocity_covariance_);
      } else {
        _this->_impl_.velocity_covariance_->MergeFrom(*from._impl_.velocity_covariance_);
      }
    }
  }
  if (from._internal_time_usec() != 0) {
    _this->_impl_.time_usec_ = from._impl_.time_usec_;
  }
  if (from._internal_frame_id() != 0) {
    _this->_impl_.frame_id_ = from._impl_.frame_id_;
  }
  if (from._internal_child_frame_id() != 0) {
    _this->_impl_.child_frame_id_ = from._impl_.child_frame_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Odometry::InternalSwap(Odometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.child_frame_id_)
      + sizeof(Odometry::_impl_.child_frame_id_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.position_body_)>(
          reinterpret_cast<char*>(&_impl_.position_body_),
          reinterpret_cast<char*>(&other->_impl_.position_body_));
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DistanceSensor::_Internal {
 public:
};

DistanceSensor::DistanceSensor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.DistanceSensor)
}
DistanceSensor::DistanceSensor(
    ::google::protobuf::Arena* arena, const DistanceSensor& from)
    : DistanceSensor(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DistanceSensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DistanceSensor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, minimum_distance_m_),
           0,
           offsetof(Impl_, current_distance_m_) -
               offsetof(Impl_, minimum_distance_m_) +
               sizeof(Impl_::current_distance_m_));
}
DistanceSensor::~DistanceSensor() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.DistanceSensor)
  SharedDtor(*this);
}
inline void DistanceSensor::SharedDtor(MessageLite& self) {
  DistanceSensor& this_ = static_cast<DistanceSensor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DistanceSensor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DistanceSensor(arena);
}
constexpr auto DistanceSensor::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DistanceSensor),
                                            alignof(DistanceSensor));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DistanceSensor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DistanceSensor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DistanceSensor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DistanceSensor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DistanceSensor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DistanceSensor>(), &DistanceSensor::ByteSizeLong,
            &DistanceSensor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_._cached_size_),
        false,
    },
    &DistanceSensor::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DistanceSensor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> DistanceSensor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::DistanceSensor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.minimum_distance_m_)}},
    // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.maximum_distance_m_)}},
    // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.current_distance_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.minimum_distance_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.maximum_distance_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.current_distance_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DistanceSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.minimum_distance_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.current_distance_m_) -
      reinterpret_cast<char*>(&_impl_.minimum_distance_m_)) + sizeof(_impl_.current_distance_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DistanceSensor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DistanceSensor& this_ = static_cast<const DistanceSensor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DistanceSensor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DistanceSensor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.DistanceSensor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_minimum_distance_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_minimum_distance_m(), target);
          }

          // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_maximum_distance_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_maximum_distance_m(), target);
          }

          // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_current_distance_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_current_distance_m(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.DistanceSensor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DistanceSensor::ByteSizeLong(const MessageLite& base) {
          const DistanceSensor& this_ = static_cast<const DistanceSensor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DistanceSensor::ByteSizeLong() const {
          const DistanceSensor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.DistanceSensor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_minimum_distance_m()) != 0) {
              total_size += 5;
            }
            // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_maximum_distance_m()) != 0) {
              total_size += 5;
            }
            // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_current_distance_m()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DistanceSensor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DistanceSensor*>(&to_msg);
  auto& from = static_cast<const DistanceSensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_minimum_distance_m()) != 0) {
    _this->_impl_.minimum_distance_m_ = from._impl_.minimum_distance_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_maximum_distance_m()) != 0) {
    _this->_impl_.maximum_distance_m_ = from._impl_.maximum_distance_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_current_distance_m()) != 0) {
    _this->_impl_.current_distance_m_ = from._impl_.current_distance_m_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceSensor::CopyFrom(const DistanceSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.DistanceSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DistanceSensor::InternalSwap(DistanceSensor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.current_distance_m_)
      + sizeof(DistanceSensor::_impl_.current_distance_m_)
      - PROTOBUF_FIELD_OFFSET(DistanceSensor, _impl_.minimum_distance_m_)>(
          reinterpret_cast<char*>(&_impl_.minimum_distance_m_),
          reinterpret_cast<char*>(&other->_impl_.minimum_distance_m_));
}

::google::protobuf::Metadata DistanceSensor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScaledPressure::_Internal {
 public:
};

ScaledPressure::ScaledPressure(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.ScaledPressure)
}
ScaledPressure::ScaledPressure(
    ::google::protobuf::Arena* arena, const ScaledPressure& from)
    : ScaledPressure(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ScaledPressure::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ScaledPressure::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           0,
           offsetof(Impl_, differential_pressure_temperature_deg_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::differential_pressure_temperature_deg_));
}
ScaledPressure::~ScaledPressure() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.ScaledPressure)
  SharedDtor(*this);
}
inline void ScaledPressure::SharedDtor(MessageLite& self) {
  ScaledPressure& this_ = static_cast<ScaledPressure&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ScaledPressure::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScaledPressure(arena);
}
constexpr auto ScaledPressure::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ScaledPressure),
                                            alignof(ScaledPressure));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScaledPressure::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScaledPressure_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScaledPressure::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScaledPressure>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScaledPressure::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScaledPressure>(), &ScaledPressure::ByteSizeLong,
            &ScaledPressure::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_._cached_size_),
        false,
    },
    &ScaledPressure::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScaledPressure::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> ScaledPressure::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::ScaledPressure>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 timestamp_us = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ScaledPressure, _impl_.timestamp_us_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.timestamp_us_)}},
    // float absolute_pressure_hpa = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.absolute_pressure_hpa_)}},
    // float differential_pressure_hpa = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_hpa_)}},
    // float temperature_deg = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.temperature_deg_)}},
    // float differential_pressure_temperature_deg = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_temperature_deg_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 timestamp_us = 1;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.timestamp_us_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // float absolute_pressure_hpa = 2;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.absolute_pressure_hpa_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float differential_pressure_hpa = 3;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_hpa_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float temperature_deg = 4;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.temperature_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float differential_pressure_temperature_deg = 5;
    {PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_temperature_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ScaledPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.differential_pressure_temperature_deg_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.differential_pressure_temperature_deg_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScaledPressure::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScaledPressure& this_ = static_cast<const ScaledPressure&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScaledPressure::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScaledPressure& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.ScaledPressure)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 timestamp_us = 1;
          if (this_._internal_timestamp_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_timestamp_us(), target);
          }

          // float absolute_pressure_hpa = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_pressure_hpa()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_absolute_pressure_hpa(), target);
          }

          // float differential_pressure_hpa = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_differential_pressure_hpa()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_differential_pressure_hpa(), target);
          }

          // float temperature_deg = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_temperature_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_temperature_deg(), target);
          }

          // float differential_pressure_temperature_deg = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_differential_pressure_temperature_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_differential_pressure_temperature_deg(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.ScaledPressure)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScaledPressure::ByteSizeLong(const MessageLite& base) {
          const ScaledPressure& this_ = static_cast<const ScaledPressure&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScaledPressure::ByteSizeLong() const {
          const ScaledPressure& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.ScaledPressure)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint64 timestamp_us = 1;
            if (this_._internal_timestamp_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp_us());
            }
            // float absolute_pressure_hpa = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_pressure_hpa()) != 0) {
              total_size += 5;
            }
            // float differential_pressure_hpa = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_differential_pressure_hpa()) != 0) {
              total_size += 5;
            }
            // float temperature_deg = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_temperature_deg()) != 0) {
              total_size += 5;
            }
            // float differential_pressure_temperature_deg = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_differential_pressure_temperature_deg()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScaledPressure::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScaledPressure*>(&to_msg);
  auto& from = static_cast<const ScaledPressure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_us() != 0) {
    _this->_impl_.timestamp_us_ = from._impl_.timestamp_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_absolute_pressure_hpa()) != 0) {
    _this->_impl_.absolute_pressure_hpa_ = from._impl_.absolute_pressure_hpa_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_differential_pressure_hpa()) != 0) {
    _this->_impl_.differential_pressure_hpa_ = from._impl_.differential_pressure_hpa_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_temperature_deg()) != 0) {
    _this->_impl_.temperature_deg_ = from._impl_.temperature_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_differential_pressure_temperature_deg()) != 0) {
    _this->_impl_.differential_pressure_temperature_deg_ = from._impl_.differential_pressure_temperature_deg_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScaledPressure::CopyFrom(const ScaledPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.ScaledPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScaledPressure::InternalSwap(ScaledPressure* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.differential_pressure_temperature_deg_)
      + sizeof(ScaledPressure::_impl_.differential_pressure_temperature_deg_)
      - PROTOBUF_FIELD_OFFSET(ScaledPressure, _impl_.timestamp_us_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_us_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_us_));
}

::google::protobuf::Metadata ScaledPressure::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionNed::_Internal {
 public:
};

PositionNed::PositionNed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PositionNed)
}
PositionNed::PositionNed(
    ::google::protobuf::Arena* arena, const PositionNed& from)
    : PositionNed(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PositionNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionNed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, north_m_),
           0,
           offsetof(Impl_, down_m_) -
               offsetof(Impl_, north_m_) +
               sizeof(Impl_::down_m_));
}
PositionNed::~PositionNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PositionNed)
  SharedDtor(*this);
}
inline void PositionNed::SharedDtor(MessageLite& self) {
  PositionNed& this_ = static_cast<PositionNed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PositionNed::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PositionNed(arena);
}
constexpr auto PositionNed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PositionNed),
                                            alignof(PositionNed));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PositionNed::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PositionNed_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PositionNed::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PositionNed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PositionNed::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PositionNed>(), &PositionNed::ByteSizeLong,
            &PositionNed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PositionNed, _impl_._cached_size_),
        false,
    },
    &PositionNed::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PositionNed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PositionNed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PositionNed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.north_m_)}},
    // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.east_m_)}},
    // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.down_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.north_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.east_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.down_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PositionNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PositionNed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.north_m_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_) -
      reinterpret_cast<char*>(&_impl_.north_m_)) + sizeof(_impl_.down_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PositionNed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PositionNed& this_ = static_cast<const PositionNed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PositionNed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PositionNed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PositionNed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_north_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_north_m(), target);
          }

          // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_east_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_east_m(), target);
          }

          // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_down_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_down_m(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PositionNed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PositionNed::ByteSizeLong(const MessageLite& base) {
          const PositionNed& this_ = static_cast<const PositionNed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PositionNed::ByteSizeLong() const {
          const PositionNed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PositionNed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_north_m()) != 0) {
              total_size += 5;
            }
            // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_east_m()) != 0) {
              total_size += 5;
            }
            // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_down_m()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PositionNed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionNed*>(&to_msg);
  auto& from = static_cast<const PositionNed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PositionNed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_north_m()) != 0) {
    _this->_impl_.north_m_ = from._impl_.north_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_east_m()) != 0) {
    _this->_impl_.east_m_ = from._impl_.east_m_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_down_m()) != 0) {
    _this->_impl_.down_m_ = from._impl_.down_m_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionNed::CopyFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionNed::InternalSwap(PositionNed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.down_m_)
      + sizeof(PositionNed::_impl_.down_m_)
      - PROTOBUF_FIELD_OFFSET(PositionNed, _impl_.north_m_)>(
          reinterpret_cast<char*>(&_impl_.north_m_),
          reinterpret_cast<char*>(&other->_impl_.north_m_));
}

::google::protobuf::Metadata PositionNed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VelocityNed::_Internal {
 public:
};

VelocityNed::VelocityNed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.VelocityNed)
}
VelocityNed::VelocityNed(
    ::google::protobuf::Arena* arena, const VelocityNed& from)
    : VelocityNed(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VelocityNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VelocityNed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, north_m_s_),
           0,
           offsetof(Impl_, down_m_s_) -
               offsetof(Impl_, north_m_s_) +
               sizeof(Impl_::down_m_s_));
}
VelocityNed::~VelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.VelocityNed)
  SharedDtor(*this);
}
inline void VelocityNed::SharedDtor(MessageLite& self) {
  VelocityNed& this_ = static_cast<VelocityNed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* VelocityNed::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) VelocityNed(arena);
}
constexpr auto VelocityNed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VelocityNed),
                                            alignof(VelocityNed));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull VelocityNed::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_VelocityNed_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &VelocityNed::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<VelocityNed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &VelocityNed::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<VelocityNed>(), &VelocityNed::ByteSizeLong,
            &VelocityNed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_._cached_size_),
        false,
    },
    &VelocityNed::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* VelocityNed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> VelocityNed::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::VelocityNed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float north_m_s = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.north_m_s_)}},
    // float east_m_s = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.east_m_s_)}},
    // float down_m_s = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.down_m_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float north_m_s = 1;
    {PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.north_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float east_m_s = 2;
    {PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.east_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_m_s = 3;
    {PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.down_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void VelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.VelocityNed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.north_m_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_s_) -
      reinterpret_cast<char*>(&_impl_.north_m_s_)) + sizeof(_impl_.down_m_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* VelocityNed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const VelocityNed& this_ = static_cast<const VelocityNed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* VelocityNed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const VelocityNed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.VelocityNed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float north_m_s = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_north_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_north_m_s(), target);
          }

          // float east_m_s = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_east_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_east_m_s(), target);
          }

          // float down_m_s = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_down_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_down_m_s(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.VelocityNed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t VelocityNed::ByteSizeLong(const MessageLite& base) {
          const VelocityNed& this_ = static_cast<const VelocityNed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t VelocityNed::ByteSizeLong() const {
          const VelocityNed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.VelocityNed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float north_m_s = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_north_m_s()) != 0) {
              total_size += 5;
            }
            // float east_m_s = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_east_m_s()) != 0) {
              total_size += 5;
            }
            // float down_m_s = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_down_m_s()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void VelocityNed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VelocityNed*>(&to_msg);
  auto& from = static_cast<const VelocityNed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.VelocityNed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_north_m_s()) != 0) {
    _this->_impl_.north_m_s_ = from._impl_.north_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_east_m_s()) != 0) {
    _this->_impl_.east_m_s_ = from._impl_.east_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_down_m_s()) != 0) {
    _this->_impl_.down_m_s_ = from._impl_.down_m_s_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VelocityNed::CopyFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VelocityNed::InternalSwap(VelocityNed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.down_m_s_)
      + sizeof(VelocityNed::_impl_.down_m_s_)
      - PROTOBUF_FIELD_OFFSET(VelocityNed, _impl_.north_m_s_)>(
          reinterpret_cast<char*>(&_impl_.north_m_s_),
          reinterpret_cast<char*>(&other->_impl_.north_m_s_));
}

::google::protobuf::Metadata VelocityNed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionVelocityNed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PositionVelocityNed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_._has_bits_);
};

PositionVelocityNed::PositionVelocityNed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.PositionVelocityNed)
}
inline PROTOBUF_NDEBUG_INLINE PositionVelocityNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PositionVelocityNed::PositionVelocityNed(
    ::google::protobuf::Arena* arena,
    const PositionVelocityNed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PositionVelocityNed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::PositionNed>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::VelocityNed>(
                              arena, *from._impl_.velocity_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.PositionVelocityNed)
}
inline PROTOBUF_NDEBUG_INLINE PositionVelocityNed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PositionVelocityNed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, velocity_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::velocity_));
}
PositionVelocityNed::~PositionVelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  SharedDtor(*this);
}
inline void PositionVelocityNed::SharedDtor(MessageLite& self) {
  PositionVelocityNed& this_ = static_cast<PositionVelocityNed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_;
  delete this_._impl_.velocity_;
  this_._impl_.~Impl_();
}

inline void* PositionVelocityNed::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PositionVelocityNed(arena);
}
constexpr auto PositionVelocityNed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PositionVelocityNed),
                                            alignof(PositionVelocityNed));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PositionVelocityNed::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PositionVelocityNed_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PositionVelocityNed::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PositionVelocityNed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PositionVelocityNed::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PositionVelocityNed>(), &PositionVelocityNed::ByteSizeLong,
            &PositionVelocityNed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_._cached_size_),
        false,
    },
    &PositionVelocityNed::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PositionVelocityNed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PositionVelocityNed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PositionVelocityNed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.velocity_)}},
    // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.position_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
    {PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
    {PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::PositionNed>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::VelocityNed>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PositionVelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PositionVelocityNed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PositionVelocityNed& this_ = static_cast<const PositionVelocityNed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PositionVelocityNed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PositionVelocityNed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.velocity_, this_._impl_.velocity_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.PositionVelocityNed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PositionVelocityNed::ByteSizeLong(const MessageLite& base) {
          const PositionVelocityNed& this_ = static_cast<const PositionVelocityNed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PositionVelocityNed::ByteSizeLong() const {
          const PositionVelocityNed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PositionVelocityNed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionVelocityNed*>(&to_msg);
  auto& from = static_cast<const PositionVelocityNed&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::PositionNed>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::VelocityNed>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionVelocityNed::CopyFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionVelocityNed::InternalSwap(PositionVelocityNed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.velocity_)
      + sizeof(PositionVelocityNed::_impl_.velocity_)
      - PROTOBUF_FIELD_OFFSET(PositionVelocityNed, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata PositionVelocityNed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.GroundTruth)
}
GroundTruth::GroundTruth(
    ::google::protobuf::Arena* arena, const GroundTruth& from)
    : GroundTruth(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GroundTruth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GroundTruth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_deg_),
           0,
           offsetof(Impl_, absolute_altitude_m_) -
               offsetof(Impl_, latitude_deg_) +
               sizeof(Impl_::absolute_altitude_m_));
}
GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.GroundTruth)
  SharedDtor(*this);
}
inline void GroundTruth::SharedDtor(MessageLite& self) {
  GroundTruth& this_ = static_cast<GroundTruth&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GroundTruth::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GroundTruth(arena);
}
constexpr auto GroundTruth::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GroundTruth),
                                            alignof(GroundTruth));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GroundTruth::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GroundTruth_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GroundTruth::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GroundTruth>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GroundTruth::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GroundTruth>(), &GroundTruth::ByteSizeLong,
            &GroundTruth::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_._cached_size_),
        false,
    },
    &GroundTruth::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GroundTruth::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GroundTruth::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::GroundTruth>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.latitude_deg_)}},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.longitude_deg_)}},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.absolute_altitude_m_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.latitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.longitude_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.GroundTruth)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_deg_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.absolute_altitude_m_) -
      reinterpret_cast<char*>(&_impl_.latitude_deg_)) + sizeof(_impl_.absolute_altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GroundTruth::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GroundTruth& this_ = static_cast<const GroundTruth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GroundTruth::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GroundTruth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.GroundTruth)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_latitude_deg(), target);
          }

          // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_longitude_deg(), target);
          }

          // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_absolute_altitude_m(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.GroundTruth)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GroundTruth::ByteSizeLong(const MessageLite& base) {
          const GroundTruth& this_ = static_cast<const GroundTruth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GroundTruth::ByteSizeLong() const {
          const GroundTruth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.GroundTruth)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude_deg()) != 0) {
              total_size += 9;
            }
            // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude_deg()) != 0) {
              total_size += 9;
            }
            // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GroundTruth::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GroundTruth*>(&to_msg);
  auto& from = static_cast<const GroundTruth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.GroundTruth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_latitude_deg()) != 0) {
    _this->_impl_.latitude_deg_ = from._impl_.latitude_deg_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude_deg()) != 0) {
    _this->_impl_.longitude_deg_ = from._impl_.longitude_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_absolute_altitude_m()) != 0) {
    _this->_impl_.absolute_altitude_m_ = from._impl_.absolute_altitude_m_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GroundTruth::InternalSwap(GroundTruth* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.absolute_altitude_m_)
      + sizeof(GroundTruth::_impl_.absolute_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(GroundTruth, _impl_.latitude_deg_)>(
          reinterpret_cast<char*>(&_impl_.latitude_deg_),
          reinterpret_cast<char*>(&other->_impl_.latitude_deg_));
}

::google::protobuf::Metadata GroundTruth::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FixedwingMetrics::_Internal {
 public:
};

FixedwingMetrics::FixedwingMetrics(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.FixedwingMetrics)
}
FixedwingMetrics::FixedwingMetrics(
    ::google::protobuf::Arena* arena, const FixedwingMetrics& from)
    : FixedwingMetrics(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FixedwingMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FixedwingMetrics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, airspeed_m_s_),
           0,
           offsetof(Impl_, absolute_altitude_m_) -
               offsetof(Impl_, airspeed_m_s_) +
               sizeof(Impl_::absolute_altitude_m_));
}
FixedwingMetrics::~FixedwingMetrics() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  SharedDtor(*this);
}
inline void FixedwingMetrics::SharedDtor(MessageLite& self) {
  FixedwingMetrics& this_ = static_cast<FixedwingMetrics&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* FixedwingMetrics::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FixedwingMetrics(arena);
}
constexpr auto FixedwingMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(FixedwingMetrics),
                                            alignof(FixedwingMetrics));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FixedwingMetrics::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FixedwingMetrics_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FixedwingMetrics::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FixedwingMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FixedwingMetrics::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FixedwingMetrics>(), &FixedwingMetrics::ByteSizeLong,
            &FixedwingMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_._cached_size_),
        false,
    },
    &FixedwingMetrics::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FixedwingMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> FixedwingMetrics::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::FixedwingMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.airspeed_m_s_)}},
    // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.throttle_percentage_)}},
    // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.climb_rate_m_s_)}},
    // float groundspeed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.groundspeed_m_s_)}},
    // float heading_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.heading_deg_)}},
    // float absolute_altitude_m = 6 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.absolute_altitude_m_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.airspeed_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.throttle_percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.climb_rate_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float groundspeed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.groundspeed_m_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float heading_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.heading_deg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float absolute_altitude_m = 6 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.absolute_altitude_m_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void FixedwingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.airspeed_m_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.absolute_altitude_m_) -
      reinterpret_cast<char*>(&_impl_.airspeed_m_s_)) + sizeof(_impl_.absolute_altitude_m_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FixedwingMetrics::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FixedwingMetrics& this_ = static_cast<const FixedwingMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FixedwingMetrics::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FixedwingMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_airspeed_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_airspeed_m_s(), target);
          }

          // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_throttle_percentage()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_throttle_percentage(), target);
          }

          // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_climb_rate_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_climb_rate_m_s(), target);
          }

          // float groundspeed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_groundspeed_m_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_groundspeed_m_s(), target);
          }

          // float heading_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_heading_deg()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_heading_deg(), target);
          }

          // float absolute_altitude_m = 6 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_absolute_altitude_m(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.FixedwingMetrics)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FixedwingMetrics::ByteSizeLong(const MessageLite& base) {
          const FixedwingMetrics& this_ = static_cast<const FixedwingMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FixedwingMetrics::ByteSizeLong() const {
          const FixedwingMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_airspeed_m_s()) != 0) {
              total_size += 5;
            }
            // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_throttle_percentage()) != 0) {
              total_size += 5;
            }
            // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_climb_rate_m_s()) != 0) {
              total_size += 5;
            }
            // float groundspeed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_groundspeed_m_s()) != 0) {
              total_size += 5;
            }
            // float heading_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_heading_deg()) != 0) {
              total_size += 5;
            }
            // float absolute_altitude_m = 6 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_absolute_altitude_m()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FixedwingMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FixedwingMetrics*>(&to_msg);
  auto& from = static_cast<const FixedwingMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_airspeed_m_s()) != 0) {
    _this->_impl_.airspeed_m_s_ = from._impl_.airspeed_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_throttle_percentage()) != 0) {
    _this->_impl_.throttle_percentage_ = from._impl_.throttle_percentage_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_climb_rate_m_s()) != 0) {
    _this->_impl_.climb_rate_m_s_ = from._impl_.climb_rate_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_groundspeed_m_s()) != 0) {
    _this->_impl_.groundspeed_m_s_ = from._impl_.groundspeed_m_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_heading_deg()) != 0) {
    _this->_impl_.heading_deg_ = from._impl_.heading_deg_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_absolute_altitude_m()) != 0) {
    _this->_impl_.absolute_altitude_m_ = from._impl_.absolute_altitude_m_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FixedwingMetrics::CopyFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FixedwingMetrics::InternalSwap(FixedwingMetrics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.absolute_altitude_m_)
      + sizeof(FixedwingMetrics::_impl_.absolute_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(FixedwingMetrics, _impl_.airspeed_m_s_)>(
          reinterpret_cast<char*>(&_impl_.airspeed_m_s_),
          reinterpret_cast<char*>(&other->_impl_.airspeed_m_s_));
}

::google::protobuf::Metadata FixedwingMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccelerationFrd::_Internal {
 public:
};

AccelerationFrd::AccelerationFrd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.AccelerationFrd)
}
AccelerationFrd::AccelerationFrd(
    ::google::protobuf::Arena* arena, const AccelerationFrd& from)
    : AccelerationFrd(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AccelerationFrd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AccelerationFrd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, forward_m_s2_),
           0,
           offsetof(Impl_, down_m_s2_) -
               offsetof(Impl_, forward_m_s2_) +
               sizeof(Impl_::down_m_s2_));
}
AccelerationFrd::~AccelerationFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.AccelerationFrd)
  SharedDtor(*this);
}
inline void AccelerationFrd::SharedDtor(MessageLite& self) {
  AccelerationFrd& this_ = static_cast<AccelerationFrd&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AccelerationFrd::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AccelerationFrd(arena);
}
constexpr auto AccelerationFrd::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AccelerationFrd),
                                            alignof(AccelerationFrd));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AccelerationFrd::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AccelerationFrd_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AccelerationFrd::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AccelerationFrd>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AccelerationFrd::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AccelerationFrd>(), &AccelerationFrd::ByteSizeLong,
            &AccelerationFrd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_._cached_size_),
        false,
    },
    &AccelerationFrd::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AccelerationFrd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AccelerationFrd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AccelerationFrd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.forward_m_s2_)}},
    // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.right_m_s2_)}},
    // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.down_m_s2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.forward_m_s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.right_m_s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.down_m_s2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AccelerationFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.forward_m_s2_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_m_s2_) -
      reinterpret_cast<char*>(&_impl_.forward_m_s2_)) + sizeof(_impl_.down_m_s2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AccelerationFrd::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AccelerationFrd& this_ = static_cast<const AccelerationFrd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AccelerationFrd::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AccelerationFrd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_forward_m_s2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_forward_m_s2(), target);
          }

          // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_right_m_s2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_right_m_s2(), target);
          }

          // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_down_m_s2()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_down_m_s2(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.AccelerationFrd)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AccelerationFrd::ByteSizeLong(const MessageLite& base) {
          const AccelerationFrd& this_ = static_cast<const AccelerationFrd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AccelerationFrd::ByteSizeLong() const {
          const AccelerationFrd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_forward_m_s2()) != 0) {
              total_size += 5;
            }
            // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_right_m_s2()) != 0) {
              total_size += 5;
            }
            // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_down_m_s2()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AccelerationFrd::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccelerationFrd*>(&to_msg);
  auto& from = static_cast<const AccelerationFrd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_forward_m_s2()) != 0) {
    _this->_impl_.forward_m_s2_ = from._impl_.forward_m_s2_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_right_m_s2()) != 0) {
    _this->_impl_.right_m_s2_ = from._impl_.right_m_s2_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_down_m_s2()) != 0) {
    _this->_impl_.down_m_s2_ = from._impl_.down_m_s2_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccelerationFrd::CopyFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccelerationFrd::InternalSwap(AccelerationFrd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.down_m_s2_)
      + sizeof(AccelerationFrd::_impl_.down_m_s2_)
      - PROTOBUF_FIELD_OFFSET(AccelerationFrd, _impl_.forward_m_s2_)>(
          reinterpret_cast<char*>(&_impl_.forward_m_s2_),
          reinterpret_cast<char*>(&other->_impl_.forward_m_s2_));
}

::google::protobuf::Metadata AccelerationFrd::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AngularVelocityFrd::_Internal {
 public:
};

AngularVelocityFrd::AngularVelocityFrd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
}
AngularVelocityFrd::AngularVelocityFrd(
    ::google::protobuf::Arena* arena, const AngularVelocityFrd& from)
    : AngularVelocityFrd(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AngularVelocityFrd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AngularVelocityFrd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, forward_rad_s_),
           0,
           offsetof(Impl_, down_rad_s_) -
               offsetof(Impl_, forward_rad_s_) +
               sizeof(Impl_::down_rad_s_));
}
AngularVelocityFrd::~AngularVelocityFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  SharedDtor(*this);
}
inline void AngularVelocityFrd::SharedDtor(MessageLite& self) {
  AngularVelocityFrd& this_ = static_cast<AngularVelocityFrd&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AngularVelocityFrd::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AngularVelocityFrd(arena);
}
constexpr auto AngularVelocityFrd::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AngularVelocityFrd),
                                            alignof(AngularVelocityFrd));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AngularVelocityFrd::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AngularVelocityFrd_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AngularVelocityFrd::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AngularVelocityFrd>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AngularVelocityFrd::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AngularVelocityFrd>(), &AngularVelocityFrd::ByteSizeLong,
            &AngularVelocityFrd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_._cached_size_),
        false,
    },
    &AngularVelocityFrd::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AngularVelocityFrd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AngularVelocityFrd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.forward_rad_s_)}},
    // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.right_rad_s_)}},
    // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.down_rad_s_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.forward_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.right_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.down_rad_s_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AngularVelocityFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.forward_rad_s_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_rad_s_) -
      reinterpret_cast<char*>(&_impl_.forward_rad_s_)) + sizeof(_impl_.down_rad_s_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AngularVelocityFrd::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AngularVelocityFrd& this_ = static_cast<const AngularVelocityFrd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AngularVelocityFrd::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AngularVelocityFrd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_forward_rad_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_forward_rad_s(), target);
          }

          // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_right_rad_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_right_rad_s(), target);
          }

          // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_down_rad_s()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_down_rad_s(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AngularVelocityFrd::ByteSizeLong(const MessageLite& base) {
          const AngularVelocityFrd& this_ = static_cast<const AngularVelocityFrd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AngularVelocityFrd::ByteSizeLong() const {
          const AngularVelocityFrd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_forward_rad_s()) != 0) {
              total_size += 5;
            }
            // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_right_rad_s()) != 0) {
              total_size += 5;
            }
            // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_down_rad_s()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AngularVelocityFrd::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AngularVelocityFrd*>(&to_msg);
  auto& from = static_cast<const AngularVelocityFrd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_forward_rad_s()) != 0) {
    _this->_impl_.forward_rad_s_ = from._impl_.forward_rad_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_right_rad_s()) != 0) {
    _this->_impl_.right_rad_s_ = from._impl_.right_rad_s_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_down_rad_s()) != 0) {
    _this->_impl_.down_rad_s_ = from._impl_.down_rad_s_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AngularVelocityFrd::CopyFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AngularVelocityFrd::InternalSwap(AngularVelocityFrd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.down_rad_s_)
      + sizeof(AngularVelocityFrd::_impl_.down_rad_s_)
      - PROTOBUF_FIELD_OFFSET(AngularVelocityFrd, _impl_.forward_rad_s_)>(
          reinterpret_cast<char*>(&_impl_.forward_rad_s_),
          reinterpret_cast<char*>(&other->_impl_.forward_rad_s_));
}

::google::protobuf::Metadata AngularVelocityFrd::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MagneticFieldFrd::_Internal {
 public:
};

MagneticFieldFrd::MagneticFieldFrd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
}
MagneticFieldFrd::MagneticFieldFrd(
    ::google::protobuf::Arena* arena, const MagneticFieldFrd& from)
    : MagneticFieldFrd(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MagneticFieldFrd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MagneticFieldFrd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, forward_gauss_),
           0,
           offsetof(Impl_, down_gauss_) -
               offsetof(Impl_, forward_gauss_) +
               sizeof(Impl_::down_gauss_));
}
MagneticFieldFrd::~MagneticFieldFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  SharedDtor(*this);
}
inline void MagneticFieldFrd::SharedDtor(MessageLite& self) {
  MagneticFieldFrd& this_ = static_cast<MagneticFieldFrd&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MagneticFieldFrd::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MagneticFieldFrd(arena);
}
constexpr auto MagneticFieldFrd::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MagneticFieldFrd),
                                            alignof(MagneticFieldFrd));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MagneticFieldFrd::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MagneticFieldFrd_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MagneticFieldFrd::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MagneticFieldFrd>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MagneticFieldFrd::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MagneticFieldFrd>(), &MagneticFieldFrd::ByteSizeLong,
            &MagneticFieldFrd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_._cached_size_),
        false,
    },
    &MagneticFieldFrd::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MagneticFieldFrd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> MagneticFieldFrd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.forward_gauss_)}},
    // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.right_gauss_)}},
    // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.down_gauss_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.forward_gauss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.right_gauss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.down_gauss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MagneticFieldFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.forward_gauss_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.down_gauss_) -
      reinterpret_cast<char*>(&_impl_.forward_gauss_)) + sizeof(_impl_.down_gauss_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MagneticFieldFrd::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MagneticFieldFrd& this_ = static_cast<const MagneticFieldFrd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MagneticFieldFrd::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MagneticFieldFrd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_forward_gauss()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_forward_gauss(), target);
          }

          // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_right_gauss()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_right_gauss(), target);
          }

          // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_down_gauss()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_down_gauss(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MagneticFieldFrd::ByteSizeLong(const MessageLite& base) {
          const MagneticFieldFrd& this_ = static_cast<const MagneticFieldFrd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MagneticFieldFrd::ByteSizeLong() const {
          const MagneticFieldFrd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_forward_gauss()) != 0) {
              total_size += 5;
            }
            // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_right_gauss()) != 0) {
              total_size += 5;
            }
            // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_down_gauss()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MagneticFieldFrd::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MagneticFieldFrd*>(&to_msg);
  auto& from = static_cast<const MagneticFieldFrd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_forward_gauss()) != 0) {
    _this->_impl_.forward_gauss_ = from._impl_.forward_gauss_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_right_gauss()) != 0) {
    _this->_impl_.right_gauss_ = from._impl_.right_gauss_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_down_gauss()) != 0) {
    _this->_impl_.down_gauss_ = from._impl_.down_gauss_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MagneticFieldFrd::CopyFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MagneticFieldFrd::InternalSwap(MagneticFieldFrd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.down_gauss_)
      + sizeof(MagneticFieldFrd::_impl_.down_gauss_)
      - PROTOBUF_FIELD_OFFSET(MagneticFieldFrd, _impl_.forward_gauss_)>(
          reinterpret_cast<char*>(&_impl_.forward_gauss_),
          reinterpret_cast<char*>(&other->_impl_.forward_gauss_));
}

::google::protobuf::Metadata MagneticFieldFrd::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Imu::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Imu>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_);
};

Imu::Imu(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::Imu& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Imu::Imu(
    ::google::protobuf::Arena* arena,
    const Imu& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Imu* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.acceleration_frd_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AccelerationFrd>(
                              arena, *from._impl_.acceleration_frd_)
                        : nullptr;
  _impl_.angular_velocity_frd_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>(
                              arena, *from._impl_.angular_velocity_frd_)
                        : nullptr;
  _impl_.magnetic_field_frd_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>(
                              arena, *from._impl_.magnetic_field_frd_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_us_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_us_),
           offsetof(Impl_, temperature_degc_) -
               offsetof(Impl_, timestamp_us_) +
               sizeof(Impl_::temperature_degc_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Imu::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, acceleration_frd_),
           0,
           offsetof(Impl_, temperature_degc_) -
               offsetof(Impl_, acceleration_frd_) +
               sizeof(Impl_::temperature_degc_));
}
Imu::~Imu() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.Imu)
  SharedDtor(*this);
}
inline void Imu::SharedDtor(MessageLite& self) {
  Imu& this_ = static_cast<Imu&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.acceleration_frd_;
  delete this_._impl_.angular_velocity_frd_;
  delete this_._impl_.magnetic_field_frd_;
  this_._impl_.~Impl_();
}

inline void* Imu::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Imu(arena);
}
constexpr auto Imu::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Imu),
                                            alignof(Imu));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Imu::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Imu_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Imu::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Imu>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Imu::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Imu>(), &Imu::ByteSizeLong,
            &Imu::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Imu, _impl_._cached_size_),
        false,
    },
    &Imu::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Imu::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> Imu::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::Imu>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_frd_)}},
    // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_frd_)}},
    // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Imu, _impl_.magnetic_field_frd_)}},
    // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_degc_)}},
    // uint64 timestamp_us = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Imu, _impl_.timestamp_us_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.timestamp_us_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_frd_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.angular_velocity_frd_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.magnetic_field_frd_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_degc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 timestamp_us = 5;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.timestamp_us_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AccelerationFrd>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.Imu)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.acceleration_frd_ != nullptr);
      _impl_.acceleration_frd_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.angular_velocity_frd_ != nullptr);
      _impl_.angular_velocity_frd_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.magnetic_field_frd_ != nullptr);
      _impl_.magnetic_field_frd_->Clear();
    }
  }
  ::memset(&_impl_.timestamp_us_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.temperature_degc_) -
      reinterpret_cast<char*>(&_impl_.timestamp_us_)) + sizeof(_impl_.temperature_degc_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Imu::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Imu& this_ = static_cast<const Imu&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Imu::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Imu& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.Imu)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.acceleration_frd_, this_._impl_.acceleration_frd_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.angular_velocity_frd_, this_._impl_.angular_velocity_frd_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.magnetic_field_frd_, this_._impl_.magnetic_field_frd_->GetCachedSize(), target,
                stream);
          }

          // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_temperature_degc()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_temperature_degc(), target);
          }

          // uint64 timestamp_us = 5;
          if (this_._internal_timestamp_us() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_timestamp_us(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.Imu)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Imu::ByteSizeLong(const MessageLite& base) {
          const Imu& this_ = static_cast<const Imu&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Imu::ByteSizeLong() const {
          const Imu& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.Imu)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.acceleration_frd_);
            }
            // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.angular_velocity_frd_);
            }
            // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.magnetic_field_frd_);
            }
          }
           {
            // uint64 timestamp_us = 5;
            if (this_._internal_timestamp_us() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp_us());
            }
            // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_temperature_degc()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Imu::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Imu*>(&to_msg);
  auto& from = static_cast<const Imu&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.Imu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.acceleration_frd_ != nullptr);
      if (_this->_impl_.acceleration_frd_ == nullptr) {
        _this->_impl_.acceleration_frd_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AccelerationFrd>(arena, *from._impl_.acceleration_frd_);
      } else {
        _this->_impl_.acceleration_frd_->MergeFrom(*from._impl_.acceleration_frd_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.angular_velocity_frd_ != nullptr);
      if (_this->_impl_.angular_velocity_frd_ == nullptr) {
        _this->_impl_.angular_velocity_frd_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>(arena, *from._impl_.angular_velocity_frd_);
      } else {
        _this->_impl_.angular_velocity_frd_->MergeFrom(*from._impl_.angular_velocity_frd_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.magnetic_field_frd_ != nullptr);
      if (_this->_impl_.magnetic_field_frd_ == nullptr) {
        _this->_impl_.magnetic_field_frd_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>(arena, *from._impl_.magnetic_field_frd_);
      } else {
        _this->_impl_.magnetic_field_frd_->MergeFrom(*from._impl_.magnetic_field_frd_);
      }
    }
  }
  if (from._internal_timestamp_us() != 0) {
    _this->_impl_.timestamp_us_ = from._impl_.timestamp_us_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_temperature_degc()) != 0) {
    _this->_impl_.temperature_degc_ = from._impl_.temperature_degc_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Imu::InternalSwap(Imu* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_degc_)
      + sizeof(Imu::_impl_.temperature_degc_)
      - PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_frd_)>(
          reinterpret_cast<char*>(&_impl_.acceleration_frd_),
          reinterpret_cast<char*>(&other->_impl_.acceleration_frd_));
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TelemetryServerResult::_Internal {
 public:
};

TelemetryServerResult::TelemetryServerResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.telemetry_server.TelemetryServerResult)
}
inline PROTOBUF_NDEBUG_INLINE TelemetryServerResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& from_msg)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

TelemetryServerResult::TelemetryServerResult(
    ::google::protobuf::Arena* arena,
    const TelemetryServerResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TelemetryServerResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry_server.TelemetryServerResult)
}
inline PROTOBUF_NDEBUG_INLINE TelemetryServerResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void TelemetryServerResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
TelemetryServerResult::~TelemetryServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  SharedDtor(*this);
}
inline void TelemetryServerResult::SharedDtor(MessageLite& self) {
  TelemetryServerResult& this_ = static_cast<TelemetryServerResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.result_str_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TelemetryServerResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TelemetryServerResult(arena);
}
constexpr auto TelemetryServerResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TelemetryServerResult),
                                            alignof(TelemetryServerResult));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TelemetryServerResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TelemetryServerResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TelemetryServerResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TelemetryServerResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TelemetryServerResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TelemetryServerResult>(), &TelemetryServerResult::ByteSizeLong,
            &TelemetryServerResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TelemetryServerResult, _impl_._cached_size_),
        false,
    },
    &TelemetryServerResult::kDescriptorMethods,
    &descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TelemetryServerResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 68, 2> TelemetryServerResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TelemetryServerResult, _impl_.result_str_)}},
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TelemetryServerResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TelemetryServerResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(TelemetryServerResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(TelemetryServerResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\61\0\12\0\0\0\0\0"
    "mavsdk.rpc.telemetry_server.TelemetryServerResult"
    "result_str"
  }},
};

PROTOBUF_NOINLINE void TelemetryServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TelemetryServerResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TelemetryServerResult& this_ = static_cast<const TelemetryServerResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TelemetryServerResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TelemetryServerResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
          if (this_._internal_result() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_result(), target);
          }

          // string result_str = 2;
          if (!this_._internal_result_str().empty()) {
            const std::string& _s = this_._internal_result_str();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry_server.TelemetryServerResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TelemetryServerResult::ByteSizeLong(const MessageLite& base) {
          const TelemetryServerResult& this_ = static_cast<const TelemetryServerResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TelemetryServerResult::ByteSizeLong() const {
          const TelemetryServerResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string result_str = 2;
            if (!this_._internal_result_str().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_result_str());
            }
            // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
            if (this_._internal_result() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_result());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TelemetryServerResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TelemetryServerResult*>(&to_msg);
  auto& from = static_cast<const TelemetryServerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryServerResult::CopyFrom(const TelemetryServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry_server.TelemetryServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TelemetryServerResult::InternalSwap(TelemetryServerResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata TelemetryServerResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
