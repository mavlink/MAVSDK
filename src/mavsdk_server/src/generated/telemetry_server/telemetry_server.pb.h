// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: telemetry_server/telemetry_server.proto
// Protobuf C++ Version: 5.29.1

#ifndef telemetry_5fserver_2ftelemetry_5fserver_2eproto_2epb_2eh
#define telemetry_5fserver_2ftelemetry_5fserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_telemetry_5fserver_2ftelemetry_5fserver_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace telemetry_server {
class AccelerationFrd;
struct AccelerationFrdDefaultTypeInternal;
extern AccelerationFrdDefaultTypeInternal _AccelerationFrd_default_instance_;
class ActuatorControlTarget;
struct ActuatorControlTargetDefaultTypeInternal;
extern ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;
class ActuatorOutputStatus;
struct ActuatorOutputStatusDefaultTypeInternal;
extern ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class AngularVelocityFrd;
struct AngularVelocityFrdDefaultTypeInternal;
extern AngularVelocityFrdDefaultTypeInternal _AngularVelocityFrd_default_instance_;
class Battery;
struct BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class Covariance;
struct CovarianceDefaultTypeInternal;
extern CovarianceDefaultTypeInternal _Covariance_default_instance_;
class DistanceSensor;
struct DistanceSensorDefaultTypeInternal;
extern DistanceSensorDefaultTypeInternal _DistanceSensor_default_instance_;
class EulerAngle;
struct EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class FixedwingMetrics;
struct FixedwingMetricsDefaultTypeInternal;
extern FixedwingMetricsDefaultTypeInternal _FixedwingMetrics_default_instance_;
class GpsInfo;
struct GpsInfoDefaultTypeInternal;
extern GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;
class GroundTruth;
struct GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
class Heading;
struct HeadingDefaultTypeInternal;
extern HeadingDefaultTypeInternal _Heading_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class MagneticFieldFrd;
struct MagneticFieldFrdDefaultTypeInternal;
extern MagneticFieldFrdDefaultTypeInternal _MagneticFieldFrd_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionBody;
struct PositionBodyDefaultTypeInternal;
extern PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
class PositionNed;
struct PositionNedDefaultTypeInternal;
extern PositionNedDefaultTypeInternal _PositionNed_default_instance_;
class PositionVelocityNed;
struct PositionVelocityNedDefaultTypeInternal;
extern PositionVelocityNedDefaultTypeInternal _PositionVelocityNed_default_instance_;
class PublishAttitudeRequest;
struct PublishAttitudeRequestDefaultTypeInternal;
extern PublishAttitudeRequestDefaultTypeInternal _PublishAttitudeRequest_default_instance_;
class PublishAttitudeResponse;
struct PublishAttitudeResponseDefaultTypeInternal;
extern PublishAttitudeResponseDefaultTypeInternal _PublishAttitudeResponse_default_instance_;
class PublishBatteryRequest;
struct PublishBatteryRequestDefaultTypeInternal;
extern PublishBatteryRequestDefaultTypeInternal _PublishBatteryRequest_default_instance_;
class PublishBatteryResponse;
struct PublishBatteryResponseDefaultTypeInternal;
extern PublishBatteryResponseDefaultTypeInternal _PublishBatteryResponse_default_instance_;
class PublishDistanceSensorRequest;
struct PublishDistanceSensorRequestDefaultTypeInternal;
extern PublishDistanceSensorRequestDefaultTypeInternal _PublishDistanceSensorRequest_default_instance_;
class PublishDistanceSensorResponse;
struct PublishDistanceSensorResponseDefaultTypeInternal;
extern PublishDistanceSensorResponseDefaultTypeInternal _PublishDistanceSensorResponse_default_instance_;
class PublishExtendedSysStateRequest;
struct PublishExtendedSysStateRequestDefaultTypeInternal;
extern PublishExtendedSysStateRequestDefaultTypeInternal _PublishExtendedSysStateRequest_default_instance_;
class PublishExtendedSysStateResponse;
struct PublishExtendedSysStateResponseDefaultTypeInternal;
extern PublishExtendedSysStateResponseDefaultTypeInternal _PublishExtendedSysStateResponse_default_instance_;
class PublishGroundTruthRequest;
struct PublishGroundTruthRequestDefaultTypeInternal;
extern PublishGroundTruthRequestDefaultTypeInternal _PublishGroundTruthRequest_default_instance_;
class PublishGroundTruthResponse;
struct PublishGroundTruthResponseDefaultTypeInternal;
extern PublishGroundTruthResponseDefaultTypeInternal _PublishGroundTruthResponse_default_instance_;
class PublishHomeRequest;
struct PublishHomeRequestDefaultTypeInternal;
extern PublishHomeRequestDefaultTypeInternal _PublishHomeRequest_default_instance_;
class PublishHomeResponse;
struct PublishHomeResponseDefaultTypeInternal;
extern PublishHomeResponseDefaultTypeInternal _PublishHomeResponse_default_instance_;
class PublishImuRequest;
struct PublishImuRequestDefaultTypeInternal;
extern PublishImuRequestDefaultTypeInternal _PublishImuRequest_default_instance_;
class PublishImuResponse;
struct PublishImuResponseDefaultTypeInternal;
extern PublishImuResponseDefaultTypeInternal _PublishImuResponse_default_instance_;
class PublishInAirRequest;
struct PublishInAirRequestDefaultTypeInternal;
extern PublishInAirRequestDefaultTypeInternal _PublishInAirRequest_default_instance_;
class PublishLandedStateRequest;
struct PublishLandedStateRequestDefaultTypeInternal;
extern PublishLandedStateRequestDefaultTypeInternal _PublishLandedStateRequest_default_instance_;
class PublishOdometryRequest;
struct PublishOdometryRequestDefaultTypeInternal;
extern PublishOdometryRequestDefaultTypeInternal _PublishOdometryRequest_default_instance_;
class PublishOdometryResponse;
struct PublishOdometryResponseDefaultTypeInternal;
extern PublishOdometryResponseDefaultTypeInternal _PublishOdometryResponse_default_instance_;
class PublishPositionRequest;
struct PublishPositionRequestDefaultTypeInternal;
extern PublishPositionRequestDefaultTypeInternal _PublishPositionRequest_default_instance_;
class PublishPositionResponse;
struct PublishPositionResponseDefaultTypeInternal;
extern PublishPositionResponseDefaultTypeInternal _PublishPositionResponse_default_instance_;
class PublishPositionVelocityNedRequest;
struct PublishPositionVelocityNedRequestDefaultTypeInternal;
extern PublishPositionVelocityNedRequestDefaultTypeInternal _PublishPositionVelocityNedRequest_default_instance_;
class PublishPositionVelocityNedResponse;
struct PublishPositionVelocityNedResponseDefaultTypeInternal;
extern PublishPositionVelocityNedResponseDefaultTypeInternal _PublishPositionVelocityNedResponse_default_instance_;
class PublishRawGpsRequest;
struct PublishRawGpsRequestDefaultTypeInternal;
extern PublishRawGpsRequestDefaultTypeInternal _PublishRawGpsRequest_default_instance_;
class PublishRawGpsResponse;
struct PublishRawGpsResponseDefaultTypeInternal;
extern PublishRawGpsResponseDefaultTypeInternal _PublishRawGpsResponse_default_instance_;
class PublishRawImuRequest;
struct PublishRawImuRequestDefaultTypeInternal;
extern PublishRawImuRequestDefaultTypeInternal _PublishRawImuRequest_default_instance_;
class PublishRawImuResponse;
struct PublishRawImuResponseDefaultTypeInternal;
extern PublishRawImuResponseDefaultTypeInternal _PublishRawImuResponse_default_instance_;
class PublishRcStatusRequest;
struct PublishRcStatusRequestDefaultTypeInternal;
extern PublishRcStatusRequestDefaultTypeInternal _PublishRcStatusRequest_default_instance_;
class PublishScaledImuRequest;
struct PublishScaledImuRequestDefaultTypeInternal;
extern PublishScaledImuRequestDefaultTypeInternal _PublishScaledImuRequest_default_instance_;
class PublishScaledImuResponse;
struct PublishScaledImuResponseDefaultTypeInternal;
extern PublishScaledImuResponseDefaultTypeInternal _PublishScaledImuResponse_default_instance_;
class PublishStatusTextRequest;
struct PublishStatusTextRequestDefaultTypeInternal;
extern PublishStatusTextRequestDefaultTypeInternal _PublishStatusTextRequest_default_instance_;
class PublishStatusTextResponse;
struct PublishStatusTextResponseDefaultTypeInternal;
extern PublishStatusTextResponseDefaultTypeInternal _PublishStatusTextResponse_default_instance_;
class PublishSysStatusRequest;
struct PublishSysStatusRequestDefaultTypeInternal;
extern PublishSysStatusRequestDefaultTypeInternal _PublishSysStatusRequest_default_instance_;
class PublishSysStatusResponse;
struct PublishSysStatusResponseDefaultTypeInternal;
extern PublishSysStatusResponseDefaultTypeInternal _PublishSysStatusResponse_default_instance_;
class PublishUnixEpochTimeRequest;
struct PublishUnixEpochTimeRequestDefaultTypeInternal;
extern PublishUnixEpochTimeRequestDefaultTypeInternal _PublishUnixEpochTimeRequest_default_instance_;
class PublishUnixEpochTimeResponse;
struct PublishUnixEpochTimeResponseDefaultTypeInternal;
extern PublishUnixEpochTimeResponseDefaultTypeInternal _PublishUnixEpochTimeResponse_default_instance_;
class PublishVisualFlightRulesHudRequest;
struct PublishVisualFlightRulesHudRequestDefaultTypeInternal;
extern PublishVisualFlightRulesHudRequestDefaultTypeInternal _PublishVisualFlightRulesHudRequest_default_instance_;
class PublishVisualFlightRulesHudResponse;
struct PublishVisualFlightRulesHudResponseDefaultTypeInternal;
extern PublishVisualFlightRulesHudResponseDefaultTypeInternal _PublishVisualFlightRulesHudResponse_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RawGps;
struct RawGpsDefaultTypeInternal;
extern RawGpsDefaultTypeInternal _RawGps_default_instance_;
class RcStatus;
struct RcStatusDefaultTypeInternal;
extern RcStatusDefaultTypeInternal _RcStatus_default_instance_;
class ScaledPressure;
struct ScaledPressureDefaultTypeInternal;
extern ScaledPressureDefaultTypeInternal _ScaledPressure_default_instance_;
class StatusText;
struct StatusTextDefaultTypeInternal;
extern StatusTextDefaultTypeInternal _StatusText_default_instance_;
class TelemetryServerResult;
struct TelemetryServerResultDefaultTypeInternal;
extern TelemetryServerResultDefaultTypeInternal _TelemetryServerResult_default_instance_;
class VelocityBody;
struct VelocityBodyDefaultTypeInternal;
extern VelocityBodyDefaultTypeInternal _VelocityBody_default_instance_;
class VelocityNed;
struct VelocityNedDefaultTypeInternal;
extern VelocityNedDefaultTypeInternal _VelocityNed_default_instance_;
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace telemetry_server {
enum Odometry_MavFrame : int {
  Odometry_MavFrame_MAV_FRAME_UNDEF = 0,
  Odometry_MavFrame_MAV_FRAME_BODY_NED = 8,
  Odometry_MavFrame_MAV_FRAME_VISION_NED = 16,
  Odometry_MavFrame_MAV_FRAME_ESTIM_NED = 18,
  Odometry_MavFrame_Odometry_MavFrame_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Odometry_MavFrame_Odometry_MavFrame_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Odometry_MavFrame_IsValid(int value);
extern const uint32_t Odometry_MavFrame_internal_data_[];
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MIN = static_cast<Odometry_MavFrame>(0);
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MAX = static_cast<Odometry_MavFrame>(18);
constexpr int Odometry_MavFrame_MavFrame_ARRAYSIZE = 18 + 1;
const ::google::protobuf::EnumDescriptor*
Odometry_MavFrame_descriptor();
template <typename T>
const std::string& Odometry_MavFrame_Name(T value) {
  static_assert(std::is_same<T, Odometry_MavFrame>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MavFrame_Name().");
  return ::google::protobuf::internal::NameOfEnum(Odometry_MavFrame_descriptor(), value);
}
inline bool Odometry_MavFrame_Parse(absl::string_view name, Odometry_MavFrame* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Odometry_MavFrame>(
      Odometry_MavFrame_descriptor(), name, value);
}
enum TelemetryServerResult_Result : int {
  TelemetryServerResult_Result_RESULT_UNKNOWN = 0,
  TelemetryServerResult_Result_RESULT_SUCCESS = 1,
  TelemetryServerResult_Result_RESULT_NO_SYSTEM = 2,
  TelemetryServerResult_Result_RESULT_CONNECTION_ERROR = 3,
  TelemetryServerResult_Result_RESULT_BUSY = 4,
  TelemetryServerResult_Result_RESULT_COMMAND_DENIED = 5,
  TelemetryServerResult_Result_RESULT_TIMEOUT = 6,
  TelemetryServerResult_Result_RESULT_UNSUPPORTED = 7,
  TelemetryServerResult_Result_TelemetryServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TelemetryServerResult_Result_TelemetryServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TelemetryServerResult_Result_IsValid(int value);
extern const uint32_t TelemetryServerResult_Result_internal_data_[];
constexpr TelemetryServerResult_Result TelemetryServerResult_Result_Result_MIN = static_cast<TelemetryServerResult_Result>(0);
constexpr TelemetryServerResult_Result TelemetryServerResult_Result_Result_MAX = static_cast<TelemetryServerResult_Result>(7);
constexpr int TelemetryServerResult_Result_Result_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
TelemetryServerResult_Result_descriptor();
template <typename T>
const std::string& TelemetryServerResult_Result_Name(T value) {
  static_assert(std::is_same<T, TelemetryServerResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return TelemetryServerResult_Result_Name(static_cast<TelemetryServerResult_Result>(value));
}
template <>
inline const std::string& TelemetryServerResult_Result_Name(TelemetryServerResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TelemetryServerResult_Result_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool TelemetryServerResult_Result_Parse(absl::string_view name, TelemetryServerResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TelemetryServerResult_Result>(
      TelemetryServerResult_Result_descriptor(), name, value);
}
enum FixType : int {
  FIX_TYPE_NO_GPS = 0,
  FIX_TYPE_NO_FIX = 1,
  FIX_TYPE_FIX_2D = 2,
  FIX_TYPE_FIX_3D = 3,
  FIX_TYPE_FIX_DGPS = 4,
  FIX_TYPE_RTK_FLOAT = 5,
  FIX_TYPE_RTK_FIXED = 6,
  FixType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FixType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FixType_IsValid(int value);
extern const uint32_t FixType_internal_data_[];
constexpr FixType FixType_MIN = static_cast<FixType>(0);
constexpr FixType FixType_MAX = static_cast<FixType>(6);
constexpr int FixType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
FixType_descriptor();
template <typename T>
const std::string& FixType_Name(T value) {
  static_assert(std::is_same<T, FixType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FixType_Name().");
  return FixType_Name(static_cast<FixType>(value));
}
template <>
inline const std::string& FixType_Name(FixType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FixType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool FixType_Parse(absl::string_view name, FixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FixType>(
      FixType_descriptor(), name, value);
}
enum VtolState : int {
  VTOL_STATE_UNDEFINED = 0,
  VTOL_STATE_TRANSITION_TO_FW = 1,
  VTOL_STATE_TRANSITION_TO_MC = 2,
  VTOL_STATE_MC = 3,
  VTOL_STATE_FW = 4,
  VtolState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VtolState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VtolState_IsValid(int value);
extern const uint32_t VtolState_internal_data_[];
constexpr VtolState VtolState_MIN = static_cast<VtolState>(0);
constexpr VtolState VtolState_MAX = static_cast<VtolState>(4);
constexpr int VtolState_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
VtolState_descriptor();
template <typename T>
const std::string& VtolState_Name(T value) {
  static_assert(std::is_same<T, VtolState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VtolState_Name().");
  return VtolState_Name(static_cast<VtolState>(value));
}
template <>
inline const std::string& VtolState_Name(VtolState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VtolState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VtolState_Parse(absl::string_view name, VtolState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VtolState>(
      VtolState_descriptor(), name, value);
}
enum StatusTextType : int {
  STATUS_TEXT_TYPE_DEBUG = 0,
  STATUS_TEXT_TYPE_INFO = 1,
  STATUS_TEXT_TYPE_NOTICE = 2,
  STATUS_TEXT_TYPE_WARNING = 3,
  STATUS_TEXT_TYPE_ERROR = 4,
  STATUS_TEXT_TYPE_CRITICAL = 5,
  STATUS_TEXT_TYPE_ALERT = 6,
  STATUS_TEXT_TYPE_EMERGENCY = 7,
  StatusTextType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusTextType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusTextType_IsValid(int value);
extern const uint32_t StatusTextType_internal_data_[];
constexpr StatusTextType StatusTextType_MIN = static_cast<StatusTextType>(0);
constexpr StatusTextType StatusTextType_MAX = static_cast<StatusTextType>(7);
constexpr int StatusTextType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
StatusTextType_descriptor();
template <typename T>
const std::string& StatusTextType_Name(T value) {
  static_assert(std::is_same<T, StatusTextType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StatusTextType_Name().");
  return StatusTextType_Name(static_cast<StatusTextType>(value));
}
template <>
inline const std::string& StatusTextType_Name(StatusTextType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusTextType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool StatusTextType_Parse(absl::string_view name, StatusTextType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusTextType>(
      StatusTextType_descriptor(), name, value);
}
enum LandedState : int {
  LANDED_STATE_UNKNOWN = 0,
  LANDED_STATE_ON_GROUND = 1,
  LANDED_STATE_IN_AIR = 2,
  LANDED_STATE_TAKING_OFF = 3,
  LANDED_STATE_LANDING = 4,
  LandedState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LandedState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LandedState_IsValid(int value);
extern const uint32_t LandedState_internal_data_[];
constexpr LandedState LandedState_MIN = static_cast<LandedState>(0);
constexpr LandedState LandedState_MAX = static_cast<LandedState>(4);
constexpr int LandedState_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
LandedState_descriptor();
template <typename T>
const std::string& LandedState_Name(T value) {
  static_assert(std::is_same<T, LandedState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LandedState_Name().");
  return LandedState_Name(static_cast<LandedState>(value));
}
template <>
inline const std::string& LandedState_Name(LandedState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LandedState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool LandedState_Parse(absl::string_view name, LandedState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LandedState>(
      LandedState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VelocityNed final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.VelocityNed) */ {
 public:
  inline VelocityNed() : VelocityNed(nullptr) {}
  ~VelocityNed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VelocityNed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VelocityNed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VelocityNed(
      ::google::protobuf::internal::ConstantInitialized);

  inline VelocityNed(const VelocityNed& from) : VelocityNed(nullptr, from) {}
  inline VelocityNed(VelocityNed&& from) noexcept
      : VelocityNed(nullptr, std::move(from)) {}
  inline VelocityNed& operator=(const VelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityNed& operator=(VelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityNed* internal_default_instance() {
    return reinterpret_cast<const VelocityNed*>(
        &_VelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 56;
  friend void swap(VelocityNed& a, VelocityNed& b) { a.Swap(&b); }
  inline void Swap(VelocityNed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityNed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityNed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VelocityNed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VelocityNed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VelocityNed& from) { VelocityNed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VelocityNed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.VelocityNed"; }

 protected:
  explicit VelocityNed(::google::protobuf::Arena* arena);
  VelocityNed(::google::protobuf::Arena* arena, const VelocityNed& from);
  VelocityNed(::google::protobuf::Arena* arena, VelocityNed&& from) noexcept
      : VelocityNed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
  };
  // float north_m_s = 1;
  void clear_north_m_s() ;
  float north_m_s() const;
  void set_north_m_s(float value);

  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);

  public:
  // float east_m_s = 2;
  void clear_east_m_s() ;
  float east_m_s() const;
  void set_east_m_s(float value);

  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);

  public:
  // float down_m_s = 3;
  void clear_down_m_s() ;
  float down_m_s() const;
  void set_down_m_s(float value);

  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.VelocityNed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VelocityNed& from_msg);
    float north_m_s_;
    float east_m_s_;
    float down_m_s_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class VelocityBody final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.VelocityBody) */ {
 public:
  inline VelocityBody() : VelocityBody(nullptr) {}
  ~VelocityBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VelocityBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VelocityBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VelocityBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline VelocityBody(const VelocityBody& from) : VelocityBody(nullptr, from) {}
  inline VelocityBody(VelocityBody&& from) noexcept
      : VelocityBody(nullptr, std::move(from)) {}
  inline VelocityBody& operator=(const VelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityBody& operator=(VelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const VelocityBody* internal_default_instance() {
    return reinterpret_cast<const VelocityBody*>(
        &_VelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(VelocityBody& a, VelocityBody& b) { a.Swap(&b); }
  inline void Swap(VelocityBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VelocityBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VelocityBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VelocityBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VelocityBody& from) { VelocityBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VelocityBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.VelocityBody"; }

 protected:
  explicit VelocityBody(::google::protobuf::Arena* arena);
  VelocityBody(::google::protobuf::Arena* arena, const VelocityBody& from);
  VelocityBody(::google::protobuf::Arena* arena, VelocityBody&& from) noexcept
      : VelocityBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXMSFieldNumber = 1,
    kYMSFieldNumber = 2,
    kZMSFieldNumber = 3,
  };
  // float x_m_s = 1;
  void clear_x_m_s() ;
  float x_m_s() const;
  void set_x_m_s(float value);

  private:
  float _internal_x_m_s() const;
  void _internal_set_x_m_s(float value);

  public:
  // float y_m_s = 2;
  void clear_y_m_s() ;
  float y_m_s() const;
  void set_y_m_s(float value);

  private:
  float _internal_y_m_s() const;
  void _internal_set_y_m_s(float value);

  public:
  // float z_m_s = 3;
  void clear_z_m_s() ;
  float z_m_s() const;
  void set_z_m_s(float value);

  private:
  float _internal_z_m_s() const;
  void _internal_set_z_m_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.VelocityBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VelocityBody& from_msg);
    float x_m_s_;
    float y_m_s_;
    float z_m_s_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class TelemetryServerResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.TelemetryServerResult) */ {
 public:
  inline TelemetryServerResult() : TelemetryServerResult(nullptr) {}
  ~TelemetryServerResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TelemetryServerResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TelemetryServerResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TelemetryServerResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline TelemetryServerResult(const TelemetryServerResult& from) : TelemetryServerResult(nullptr, from) {}
  inline TelemetryServerResult(TelemetryServerResult&& from) noexcept
      : TelemetryServerResult(nullptr, std::move(from)) {}
  inline TelemetryServerResult& operator=(const TelemetryServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryServerResult& operator=(TelemetryServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryServerResult* internal_default_instance() {
    return reinterpret_cast<const TelemetryServerResult*>(
        &_TelemetryServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 64;
  friend void swap(TelemetryServerResult& a, TelemetryServerResult& b) { a.Swap(&b); }
  inline void Swap(TelemetryServerResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryServerResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryServerResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TelemetryServerResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TelemetryServerResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TelemetryServerResult& from) { TelemetryServerResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TelemetryServerResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.TelemetryServerResult"; }

 protected:
  explicit TelemetryServerResult(::google::protobuf::Arena* arena);
  TelemetryServerResult(::google::protobuf::Arena* arena, const TelemetryServerResult& from);
  TelemetryServerResult(::google::protobuf::Arena* arena, TelemetryServerResult&& from) noexcept
      : TelemetryServerResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = TelemetryServerResult_Result;
  static constexpr Result RESULT_UNKNOWN = TelemetryServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = TelemetryServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM = TelemetryServerResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR = TelemetryServerResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY = TelemetryServerResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED = TelemetryServerResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT = TelemetryServerResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_UNSUPPORTED = TelemetryServerResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return TelemetryServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = TelemetryServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX = TelemetryServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = TelemetryServerResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return TelemetryServerResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return TelemetryServerResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return TelemetryServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result result() const;
  void set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value);

  private:
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.TelemetryServerResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TelemetryServerResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class StatusText final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.StatusText) */ {
 public:
  inline StatusText() : StatusText(nullptr) {}
  ~StatusText() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StatusText* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StatusText));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StatusText(
      ::google::protobuf::internal::ConstantInitialized);

  inline StatusText(const StatusText& from) : StatusText(nullptr, from) {}
  inline StatusText(StatusText&& from) noexcept
      : StatusText(nullptr, std::move(from)) {}
  inline StatusText& operator=(const StatusText& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusText& operator=(StatusText&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusText& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusText* internal_default_instance() {
    return reinterpret_cast<const StatusText*>(
        &_StatusText_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(StatusText& a, StatusText& b) { a.Swap(&b); }
  inline void Swap(StatusText* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusText* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusText* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StatusText>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StatusText& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StatusText& from) { StatusText::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StatusText* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.StatusText"; }

 protected:
  explicit StatusText(::google::protobuf::Arena* arena);
  StatusText(::google::protobuf::Arena* arena, const StatusText& from);
  StatusText(::google::protobuf::Arena* arena, StatusText&& from) noexcept
      : StatusText(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
  void clear_type() ;
  ::mavsdk::rpc::telemetry_server::StatusTextType type() const;
  void set_type(::mavsdk::rpc::telemetry_server::StatusTextType value);

  private:
  ::mavsdk::rpc::telemetry_server::StatusTextType _internal_type() const;
  void _internal_set_type(::mavsdk::rpc::telemetry_server::StatusTextType value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.StatusText)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StatusText& from_msg);
    ::google::protobuf::internal::ArenaStringPtr text_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ScaledPressure final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.ScaledPressure) */ {
 public:
  inline ScaledPressure() : ScaledPressure(nullptr) {}
  ~ScaledPressure() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ScaledPressure* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ScaledPressure));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScaledPressure(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScaledPressure(const ScaledPressure& from) : ScaledPressure(nullptr, from) {}
  inline ScaledPressure(ScaledPressure&& from) noexcept
      : ScaledPressure(nullptr, std::move(from)) {}
  inline ScaledPressure& operator=(const ScaledPressure& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaledPressure& operator=(ScaledPressure&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaledPressure& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaledPressure* internal_default_instance() {
    return reinterpret_cast<const ScaledPressure*>(
        &_ScaledPressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 54;
  friend void swap(ScaledPressure& a, ScaledPressure& b) { a.Swap(&b); }
  inline void Swap(ScaledPressure* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaledPressure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaledPressure* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ScaledPressure>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScaledPressure& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScaledPressure& from) { ScaledPressure::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ScaledPressure* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.ScaledPressure"; }

 protected:
  explicit ScaledPressure(::google::protobuf::Arena* arena);
  ScaledPressure(::google::protobuf::Arena* arena, const ScaledPressure& from);
  ScaledPressure(::google::protobuf::Arena* arena, ScaledPressure&& from) noexcept
      : ScaledPressure(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampUsFieldNumber = 1,
    kAbsolutePressureHpaFieldNumber = 2,
    kDifferentialPressureHpaFieldNumber = 3,
    kTemperatureDegFieldNumber = 4,
    kDifferentialPressureTemperatureDegFieldNumber = 5,
  };
  // uint64 timestamp_us = 1;
  void clear_timestamp_us() ;
  ::uint64_t timestamp_us() const;
  void set_timestamp_us(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::uint64_t value);

  public:
  // float absolute_pressure_hpa = 2;
  void clear_absolute_pressure_hpa() ;
  float absolute_pressure_hpa() const;
  void set_absolute_pressure_hpa(float value);

  private:
  float _internal_absolute_pressure_hpa() const;
  void _internal_set_absolute_pressure_hpa(float value);

  public:
  // float differential_pressure_hpa = 3;
  void clear_differential_pressure_hpa() ;
  float differential_pressure_hpa() const;
  void set_differential_pressure_hpa(float value);

  private:
  float _internal_differential_pressure_hpa() const;
  void _internal_set_differential_pressure_hpa(float value);

  public:
  // float temperature_deg = 4;
  void clear_temperature_deg() ;
  float temperature_deg() const;
  void set_temperature_deg(float value);

  private:
  float _internal_temperature_deg() const;
  void _internal_set_temperature_deg(float value);

  public:
  // float differential_pressure_temperature_deg = 5;
  void clear_differential_pressure_temperature_deg() ;
  float differential_pressure_temperature_deg() const;
  void set_differential_pressure_temperature_deg(float value);

  private:
  float _internal_differential_pressure_temperature_deg() const;
  void _internal_set_differential_pressure_temperature_deg(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.ScaledPressure)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScaledPressure& from_msg);
    ::uint64_t timestamp_us_;
    float absolute_pressure_hpa_;
    float differential_pressure_hpa_;
    float temperature_deg_;
    float differential_pressure_temperature_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RcStatus final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.RcStatus) */ {
 public:
  inline RcStatus() : RcStatus(nullptr) {}
  ~RcStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RcStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RcStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RcStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline RcStatus(const RcStatus& from) : RcStatus(nullptr, from) {}
  inline RcStatus(RcStatus&& from) noexcept
      : RcStatus(nullptr, std::move(from)) {}
  inline RcStatus& operator=(const RcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcStatus& operator=(RcStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcStatus* internal_default_instance() {
    return reinterpret_cast<const RcStatus*>(
        &_RcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(RcStatus& a, RcStatus& b) { a.Swap(&b); }
  inline void Swap(RcStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RcStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RcStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RcStatus& from) { RcStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RcStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.RcStatus"; }

 protected:
  explicit RcStatus(::google::protobuf::Arena* arena);
  RcStatus(::google::protobuf::Arena* arena, const RcStatus& from);
  RcStatus(::google::protobuf::Arena* arena, RcStatus&& from) noexcept
      : RcStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWasAvailableOnceFieldNumber = 1,
    kIsAvailableFieldNumber = 2,
    kSignalStrengthPercentFieldNumber = 3,
  };
  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  void clear_was_available_once() ;
  bool was_available_once() const;
  void set_was_available_once(bool value);

  private:
  bool _internal_was_available_once() const;
  void _internal_set_was_available_once(bool value);

  public:
  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  void clear_is_available() ;
  bool is_available() const;
  void set_is_available(bool value);

  private:
  bool _internal_is_available() const;
  void _internal_set_is_available(bool value);

  public:
  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_signal_strength_percent() ;
  float signal_strength_percent() const;
  void set_signal_strength_percent(float value);

  private:
  float _internal_signal_strength_percent() const;
  void _internal_set_signal_strength_percent(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.RcStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RcStatus& from_msg);
    bool was_available_once_;
    bool is_available_;
    float signal_strength_percent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RawGps final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.RawGps) */ {
 public:
  inline RawGps() : RawGps(nullptr) {}
  ~RawGps() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RawGps* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RawGps));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RawGps(
      ::google::protobuf::internal::ConstantInitialized);

  inline RawGps(const RawGps& from) : RawGps(nullptr, from) {}
  inline RawGps(RawGps&& from) noexcept
      : RawGps(nullptr, std::move(from)) {}
  inline RawGps& operator=(const RawGps& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawGps& operator=(RawGps&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawGps& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawGps* internal_default_instance() {
    return reinterpret_cast<const RawGps*>(
        &_RawGps_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(RawGps& a, RawGps& b) { a.Swap(&b); }
  inline void Swap(RawGps* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawGps* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RawGps* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RawGps>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RawGps& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RawGps& from) { RawGps::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RawGps* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.RawGps"; }

 protected:
  explicit RawGps(::google::protobuf::Arena* arena);
  RawGps(::google::protobuf::Arena* arena, const RawGps& from);
  RawGps(::google::protobuf::Arena* arena, RawGps&& from) noexcept
      : RawGps(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampUsFieldNumber = 1,
    kLatitudeDegFieldNumber = 2,
    kLongitudeDegFieldNumber = 3,
    kAbsoluteAltitudeMFieldNumber = 4,
    kHdopFieldNumber = 5,
    kVdopFieldNumber = 6,
    kVelocityMSFieldNumber = 7,
    kCogDegFieldNumber = 8,
    kAltitudeEllipsoidMFieldNumber = 9,
    kHorizontalUncertaintyMFieldNumber = 10,
    kVerticalUncertaintyMFieldNumber = 11,
    kVelocityUncertaintyMSFieldNumber = 12,
    kHeadingUncertaintyDegFieldNumber = 13,
    kYawDegFieldNumber = 14,
  };
  // uint64 timestamp_us = 1;
  void clear_timestamp_us() ;
  ::uint64_t timestamp_us() const;
  void set_timestamp_us(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::uint64_t value);

  public:
  // double latitude_deg = 2;
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // double longitude_deg = 3;
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // float absolute_altitude_m = 4;
  void clear_absolute_altitude_m() ;
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);

  public:
  // float hdop = 5;
  void clear_hdop() ;
  float hdop() const;
  void set_hdop(float value);

  private:
  float _internal_hdop() const;
  void _internal_set_hdop(float value);

  public:
  // float vdop = 6;
  void clear_vdop() ;
  float vdop() const;
  void set_vdop(float value);

  private:
  float _internal_vdop() const;
  void _internal_set_vdop(float value);

  public:
  // float velocity_m_s = 7;
  void clear_velocity_m_s() ;
  float velocity_m_s() const;
  void set_velocity_m_s(float value);

  private:
  float _internal_velocity_m_s() const;
  void _internal_set_velocity_m_s(float value);

  public:
  // float cog_deg = 8;
  void clear_cog_deg() ;
  float cog_deg() const;
  void set_cog_deg(float value);

  private:
  float _internal_cog_deg() const;
  void _internal_set_cog_deg(float value);

  public:
  // float altitude_ellipsoid_m = 9;
  void clear_altitude_ellipsoid_m() ;
  float altitude_ellipsoid_m() const;
  void set_altitude_ellipsoid_m(float value);

  private:
  float _internal_altitude_ellipsoid_m() const;
  void _internal_set_altitude_ellipsoid_m(float value);

  public:
  // float horizontal_uncertainty_m = 10;
  void clear_horizontal_uncertainty_m() ;
  float horizontal_uncertainty_m() const;
  void set_horizontal_uncertainty_m(float value);

  private:
  float _internal_horizontal_uncertainty_m() const;
  void _internal_set_horizontal_uncertainty_m(float value);

  public:
  // float vertical_uncertainty_m = 11;
  void clear_vertical_uncertainty_m() ;
  float vertical_uncertainty_m() const;
  void set_vertical_uncertainty_m(float value);

  private:
  float _internal_vertical_uncertainty_m() const;
  void _internal_set_vertical_uncertainty_m(float value);

  public:
  // float velocity_uncertainty_m_s = 12;
  void clear_velocity_uncertainty_m_s() ;
  float velocity_uncertainty_m_s() const;
  void set_velocity_uncertainty_m_s(float value);

  private:
  float _internal_velocity_uncertainty_m_s() const;
  void _internal_set_velocity_uncertainty_m_s(float value);

  public:
  // float heading_uncertainty_deg = 13;
  void clear_heading_uncertainty_deg() ;
  float heading_uncertainty_deg() const;
  void set_heading_uncertainty_deg(float value);

  private:
  float _internal_heading_uncertainty_deg() const;
  void _internal_set_heading_uncertainty_deg(float value);

  public:
  // float yaw_deg = 14;
  void clear_yaw_deg() ;
  float yaw_deg() const;
  void set_yaw_deg(float value);

  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.RawGps)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RawGps& from_msg);
    ::uint64_t timestamp_us_;
    double latitude_deg_;
    double longitude_deg_;
    float absolute_altitude_m_;
    float hdop_;
    float vdop_;
    float velocity_m_s_;
    float cog_deg_;
    float altitude_ellipsoid_m_;
    float horizontal_uncertainty_m_;
    float vertical_uncertainty_m_;
    float velocity_uncertainty_m_s_;
    float heading_uncertainty_deg_;
    float yaw_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Quaternion* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Quaternion));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Quaternion(
      ::google::protobuf::internal::ConstantInitialized);

  inline Quaternion(const Quaternion& from) : Quaternion(nullptr, from) {}
  inline Quaternion(Quaternion&& from) noexcept
      : Quaternion(nullptr, std::move(from)) {}
  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
        &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(Quaternion& a, Quaternion& b) { a.Swap(&b); }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Quaternion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Quaternion& from) { Quaternion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Quaternion* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Quaternion"; }

 protected:
  explicit Quaternion(::google::protobuf::Arena* arena);
  Quaternion(::google::protobuf::Arena* arena, const Quaternion& from);
  Quaternion(::google::protobuf::Arena* arena, Quaternion&& from) noexcept
      : Quaternion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kTimestampUsFieldNumber = 5,
  };
  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // uint64 timestamp_us = 5;
  void clear_timestamp_us() ;
  ::uint64_t timestamp_us() const;
  void set_timestamp_us(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Quaternion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Quaternion& from_msg);
    float w_;
    float x_;
    float y_;
    float z_;
    ::uint64_t timestamp_us_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishUnixEpochTimeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest) */ {
 public:
  inline PublishUnixEpochTimeRequest() : PublishUnixEpochTimeRequest(nullptr) {}
  ~PublishUnixEpochTimeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishUnixEpochTimeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishUnixEpochTimeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishUnixEpochTimeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishUnixEpochTimeRequest(const PublishUnixEpochTimeRequest& from) : PublishUnixEpochTimeRequest(nullptr, from) {}
  inline PublishUnixEpochTimeRequest(PublishUnixEpochTimeRequest&& from) noexcept
      : PublishUnixEpochTimeRequest(nullptr, std::move(from)) {}
  inline PublishUnixEpochTimeRequest& operator=(const PublishUnixEpochTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishUnixEpochTimeRequest& operator=(PublishUnixEpochTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishUnixEpochTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishUnixEpochTimeRequest* internal_default_instance() {
    return reinterpret_cast<const PublishUnixEpochTimeRequest*>(
        &_PublishUnixEpochTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(PublishUnixEpochTimeRequest& a, PublishUnixEpochTimeRequest& b) { a.Swap(&b); }
  inline void Swap(PublishUnixEpochTimeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishUnixEpochTimeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishUnixEpochTimeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishUnixEpochTimeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishUnixEpochTimeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishUnixEpochTimeRequest& from) { PublishUnixEpochTimeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishUnixEpochTimeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest"; }

 protected:
  explicit PublishUnixEpochTimeRequest(::google::protobuf::Arena* arena);
  PublishUnixEpochTimeRequest(::google::protobuf::Arena* arena, const PublishUnixEpochTimeRequest& from);
  PublishUnixEpochTimeRequest(::google::protobuf::Arena* arena, PublishUnixEpochTimeRequest&& from) noexcept
      : PublishUnixEpochTimeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeUsFieldNumber = 1,
  };
  // uint64 time_us = 1;
  void clear_time_us() ;
  ::uint64_t time_us() const;
  void set_time_us(::uint64_t value);

  private:
  ::uint64_t _internal_time_us() const;
  void _internal_set_time_us(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishUnixEpochTimeRequest& from_msg);
    ::uint64_t time_us_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishLandedStateRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishLandedStateRequest) */ {
 public:
  inline PublishLandedStateRequest() : PublishLandedStateRequest(nullptr) {}
  ~PublishLandedStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishLandedStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishLandedStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishLandedStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishLandedStateRequest(const PublishLandedStateRequest& from) : PublishLandedStateRequest(nullptr, from) {}
  inline PublishLandedStateRequest(PublishLandedStateRequest&& from) noexcept
      : PublishLandedStateRequest(nullptr, std::move(from)) {}
  inline PublishLandedStateRequest& operator=(const PublishLandedStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishLandedStateRequest& operator=(PublishLandedStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishLandedStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishLandedStateRequest* internal_default_instance() {
    return reinterpret_cast<const PublishLandedStateRequest*>(
        &_PublishLandedStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(PublishLandedStateRequest& a, PublishLandedStateRequest& b) { a.Swap(&b); }
  inline void Swap(PublishLandedStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishLandedStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishLandedStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishLandedStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishLandedStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishLandedStateRequest& from) { PublishLandedStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishLandedStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishLandedStateRequest"; }

 protected:
  explicit PublishLandedStateRequest(::google::protobuf::Arena* arena);
  PublishLandedStateRequest(::google::protobuf::Arena* arena, const PublishLandedStateRequest& from);
  PublishLandedStateRequest(::google::protobuf::Arena* arena, PublishLandedStateRequest&& from) noexcept
      : PublishLandedStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLandedStateFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
  void clear_landed_state() ;
  ::mavsdk::rpc::telemetry_server::LandedState landed_state() const;
  void set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);

  private:
  ::mavsdk::rpc::telemetry_server::LandedState _internal_landed_state() const;
  void _internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishLandedStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishLandedStateRequest& from_msg);
    int landed_state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishInAirRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishInAirRequest) */ {
 public:
  inline PublishInAirRequest() : PublishInAirRequest(nullptr) {}
  ~PublishInAirRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishInAirRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishInAirRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishInAirRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishInAirRequest(const PublishInAirRequest& from) : PublishInAirRequest(nullptr, from) {}
  inline PublishInAirRequest(PublishInAirRequest&& from) noexcept
      : PublishInAirRequest(nullptr, std::move(from)) {}
  inline PublishInAirRequest& operator=(const PublishInAirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishInAirRequest& operator=(PublishInAirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishInAirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishInAirRequest* internal_default_instance() {
    return reinterpret_cast<const PublishInAirRequest*>(
        &_PublishInAirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PublishInAirRequest& a, PublishInAirRequest& b) { a.Swap(&b); }
  inline void Swap(PublishInAirRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishInAirRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishInAirRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishInAirRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishInAirRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishInAirRequest& from) { PublishInAirRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishInAirRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishInAirRequest"; }

 protected:
  explicit PublishInAirRequest(::google::protobuf::Arena* arena);
  PublishInAirRequest(::google::protobuf::Arena* arena, const PublishInAirRequest& from);
  PublishInAirRequest(::google::protobuf::Arena* arena, PublishInAirRequest&& from) noexcept
      : PublishInAirRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIsInAirFieldNumber = 1,
  };
  // bool is_in_air = 1;
  void clear_is_in_air() ;
  bool is_in_air() const;
  void set_is_in_air(bool value);

  private:
  bool _internal_is_in_air() const;
  void _internal_set_is_in_air(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishInAirRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishInAirRequest& from_msg);
    bool is_in_air_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishExtendedSysStateRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest) */ {
 public:
  inline PublishExtendedSysStateRequest() : PublishExtendedSysStateRequest(nullptr) {}
  ~PublishExtendedSysStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishExtendedSysStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishExtendedSysStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishExtendedSysStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishExtendedSysStateRequest(const PublishExtendedSysStateRequest& from) : PublishExtendedSysStateRequest(nullptr, from) {}
  inline PublishExtendedSysStateRequest(PublishExtendedSysStateRequest&& from) noexcept
      : PublishExtendedSysStateRequest(nullptr, std::move(from)) {}
  inline PublishExtendedSysStateRequest& operator=(const PublishExtendedSysStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishExtendedSysStateRequest& operator=(PublishExtendedSysStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishExtendedSysStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishExtendedSysStateRequest* internal_default_instance() {
    return reinterpret_cast<const PublishExtendedSysStateRequest*>(
        &_PublishExtendedSysStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PublishExtendedSysStateRequest& a, PublishExtendedSysStateRequest& b) { a.Swap(&b); }
  inline void Swap(PublishExtendedSysStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishExtendedSysStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishExtendedSysStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishExtendedSysStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishExtendedSysStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishExtendedSysStateRequest& from) { PublishExtendedSysStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishExtendedSysStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest"; }

 protected:
  explicit PublishExtendedSysStateRequest(::google::protobuf::Arena* arena);
  PublishExtendedSysStateRequest(::google::protobuf::Arena* arena, const PublishExtendedSysStateRequest& from);
  PublishExtendedSysStateRequest(::google::protobuf::Arena* arena, PublishExtendedSysStateRequest&& from) noexcept
      : PublishExtendedSysStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVtolStateFieldNumber = 1,
    kLandedStateFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
  void clear_vtol_state() ;
  ::mavsdk::rpc::telemetry_server::VtolState vtol_state() const;
  void set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value);

  private:
  ::mavsdk::rpc::telemetry_server::VtolState _internal_vtol_state() const;
  void _internal_set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value);

  public:
  // .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
  void clear_landed_state() ;
  ::mavsdk::rpc::telemetry_server::LandedState landed_state() const;
  void set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);

  private:
  ::mavsdk::rpc::telemetry_server::LandedState _internal_landed_state() const;
  void _internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishExtendedSysStateRequest& from_msg);
    int vtol_state_;
    int landed_state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PositionNed final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PositionNed) */ {
 public:
  inline PositionNed() : PositionNed(nullptr) {}
  ~PositionNed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PositionNed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PositionNed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionNed(
      ::google::protobuf::internal::ConstantInitialized);

  inline PositionNed(const PositionNed& from) : PositionNed(nullptr, from) {}
  inline PositionNed(PositionNed&& from) noexcept
      : PositionNed(nullptr, std::move(from)) {}
  inline PositionNed& operator=(const PositionNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionNed& operator=(PositionNed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionNed* internal_default_instance() {
    return reinterpret_cast<const PositionNed*>(
        &_PositionNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 55;
  friend void swap(PositionNed& a, PositionNed& b) { a.Swap(&b); }
  inline void Swap(PositionNed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionNed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionNed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PositionNed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionNed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PositionNed& from) { PositionNed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PositionNed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PositionNed"; }

 protected:
  explicit PositionNed(::google::protobuf::Arena* arena);
  PositionNed(::google::protobuf::Arena* arena, const PositionNed& from);
  PositionNed(::google::protobuf::Arena* arena, PositionNed&& from) noexcept
      : PositionNed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNorthMFieldNumber = 1,
    kEastMFieldNumber = 2,
    kDownMFieldNumber = 3,
  };
  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_north_m() ;
  float north_m() const;
  void set_north_m(float value);

  private:
  float _internal_north_m() const;
  void _internal_set_north_m(float value);

  public:
  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_east_m() ;
  float east_m() const;
  void set_east_m(float value);

  private:
  float _internal_east_m() const;
  void _internal_set_east_m(float value);

  public:
  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_m() ;
  float down_m() const;
  void set_down_m(float value);

  private:
  float _internal_down_m() const;
  void _internal_set_down_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PositionNed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PositionNed& from_msg);
    float north_m_;
    float east_m_;
    float down_m_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PositionBody final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PositionBody) */ {
 public:
  inline PositionBody() : PositionBody(nullptr) {}
  ~PositionBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PositionBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PositionBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline PositionBody(const PositionBody& from) : PositionBody(nullptr, from) {}
  inline PositionBody(PositionBody&& from) noexcept
      : PositionBody(nullptr, std::move(from)) {}
  inline PositionBody& operator=(const PositionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBody& operator=(PositionBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionBody* internal_default_instance() {
    return reinterpret_cast<const PositionBody*>(
        &_PositionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(PositionBody& a, PositionBody& b) { a.Swap(&b); }
  inline void Swap(PositionBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PositionBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PositionBody& from) { PositionBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PositionBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PositionBody"; }

 protected:
  explicit PositionBody(::google::protobuf::Arena* arena);
  PositionBody(::google::protobuf::Arena* arena, const PositionBody& from);
  PositionBody(::google::protobuf::Arena* arena, PositionBody&& from) noexcept
      : PositionBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // float x_m = 1;
  void clear_x_m() ;
  float x_m() const;
  void set_x_m(float value);

  private:
  float _internal_x_m() const;
  void _internal_set_x_m(float value);

  public:
  // float y_m = 2;
  void clear_y_m() ;
  float y_m() const;
  void set_y_m(float value);

  private:
  float _internal_y_m() const;
  void _internal_set_y_m(float value);

  public:
  // float z_m = 3;
  void clear_z_m() ;
  float z_m() const;
  void set_z_m(float value);

  private:
  float _internal_z_m() const;
  void _internal_set_z_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PositionBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PositionBody& from_msg);
    float x_m_;
    float y_m_;
    float z_m_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Position final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Position* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Position));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Position(
      ::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from) : Position(nullptr, from) {}
  inline Position(Position&& from) noexcept
      : Position(nullptr, std::move(from)) {}
  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
        &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Position& a, Position& b) { a.Swap(&b); }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Position& from) { Position::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Position* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Position"; }

 protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  Position(::google::protobuf::Arena* arena, Position&& from) noexcept
      : Position(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m() ;
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);

  public:
  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_relative_altitude_m() ;
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);

  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Position)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Position& from_msg);
    double latitude_deg_;
    double longitude_deg_;
    float absolute_altitude_m_;
    float relative_altitude_m_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class MagneticFieldFrd final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.MagneticFieldFrd) */ {
 public:
  inline MagneticFieldFrd() : MagneticFieldFrd(nullptr) {}
  ~MagneticFieldFrd() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MagneticFieldFrd* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MagneticFieldFrd));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MagneticFieldFrd(
      ::google::protobuf::internal::ConstantInitialized);

  inline MagneticFieldFrd(const MagneticFieldFrd& from) : MagneticFieldFrd(nullptr, from) {}
  inline MagneticFieldFrd(MagneticFieldFrd&& from) noexcept
      : MagneticFieldFrd(nullptr, std::move(from)) {}
  inline MagneticFieldFrd& operator=(const MagneticFieldFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagneticFieldFrd& operator=(MagneticFieldFrd&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MagneticFieldFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagneticFieldFrd* internal_default_instance() {
    return reinterpret_cast<const MagneticFieldFrd*>(
        &_MagneticFieldFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 62;
  friend void swap(MagneticFieldFrd& a, MagneticFieldFrd& b) { a.Swap(&b); }
  inline void Swap(MagneticFieldFrd* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagneticFieldFrd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MagneticFieldFrd* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MagneticFieldFrd>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MagneticFieldFrd& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MagneticFieldFrd& from) { MagneticFieldFrd::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MagneticFieldFrd* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.MagneticFieldFrd"; }

 protected:
  explicit MagneticFieldFrd(::google::protobuf::Arena* arena);
  MagneticFieldFrd(::google::protobuf::Arena* arena, const MagneticFieldFrd& from);
  MagneticFieldFrd(::google::protobuf::Arena* arena, MagneticFieldFrd&& from) noexcept
      : MagneticFieldFrd(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kForwardGaussFieldNumber = 1,
    kRightGaussFieldNumber = 2,
    kDownGaussFieldNumber = 3,
  };
  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_gauss() ;
  float forward_gauss() const;
  void set_forward_gauss(float value);

  private:
  float _internal_forward_gauss() const;
  void _internal_set_forward_gauss(float value);

  public:
  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_gauss() ;
  float right_gauss() const;
  void set_right_gauss(float value);

  private:
  float _internal_right_gauss() const;
  void _internal_set_right_gauss(float value);

  public:
  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_gauss() ;
  float down_gauss() const;
  void set_down_gauss(float value);

  private:
  float _internal_down_gauss() const;
  void _internal_set_down_gauss(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.MagneticFieldFrd)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MagneticFieldFrd& from_msg);
    float forward_gauss_;
    float right_gauss_;
    float down_gauss_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Heading final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Heading) */ {
 public:
  inline Heading() : Heading(nullptr) {}
  ~Heading() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Heading* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Heading));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Heading(
      ::google::protobuf::internal::ConstantInitialized);

  inline Heading(const Heading& from) : Heading(nullptr, from) {}
  inline Heading(Heading&& from) noexcept
      : Heading(nullptr, std::move(from)) {}
  inline Heading& operator=(const Heading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heading& operator=(Heading&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heading& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heading* internal_default_instance() {
    return reinterpret_cast<const Heading*>(
        &_Heading_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(Heading& a, Heading& b) { a.Swap(&b); }
  inline void Swap(Heading* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heading* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heading* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Heading>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Heading& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Heading& from) { Heading::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Heading* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Heading"; }

 protected:
  explicit Heading(::google::protobuf::Arena* arena);
  Heading(::google::protobuf::Arena* arena, const Heading& from);
  Heading(::google::protobuf::Arena* arena, Heading&& from) noexcept
      : Heading(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeadingDegFieldNumber = 1,
  };
  // double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_heading_deg() ;
  double heading_deg() const;
  void set_heading_deg(double value);

  private:
  double _internal_heading_deg() const;
  void _internal_set_heading_deg(double value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Heading)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Heading& from_msg);
    double heading_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GroundTruth final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.GroundTruth) */ {
 public:
  inline GroundTruth() : GroundTruth(nullptr) {}
  ~GroundTruth() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GroundTruth* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GroundTruth));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GroundTruth(
      ::google::protobuf::internal::ConstantInitialized);

  inline GroundTruth(const GroundTruth& from) : GroundTruth(nullptr, from) {}
  inline GroundTruth(GroundTruth&& from) noexcept
      : GroundTruth(nullptr, std::move(from)) {}
  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroundTruth& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
        &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 58;
  friend void swap(GroundTruth& a, GroundTruth& b) { a.Swap(&b); }
  inline void Swap(GroundTruth* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroundTruth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroundTruth* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GroundTruth>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroundTruth& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GroundTruth& from) { GroundTruth::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GroundTruth* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.GroundTruth"; }

 protected:
  explicit GroundTruth(::google::protobuf::Arena* arena);
  GroundTruth(::google::protobuf::Arena* arena, const GroundTruth& from);
  GroundTruth(::google::protobuf::Arena* arena, GroundTruth&& from) noexcept
      : GroundTruth(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m() ;
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.GroundTruth)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GroundTruth& from_msg);
    double latitude_deg_;
    double longitude_deg_;
    float absolute_altitude_m_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GpsInfo final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.GpsInfo) */ {
 public:
  inline GpsInfo() : GpsInfo(nullptr) {}
  ~GpsInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GpsInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GpsInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GpsInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GpsInfo(const GpsInfo& from) : GpsInfo(nullptr, from) {}
  inline GpsInfo(GpsInfo&& from) noexcept
      : GpsInfo(nullptr, std::move(from)) {}
  inline GpsInfo& operator=(const GpsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsInfo& operator=(GpsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpsInfo* internal_default_instance() {
    return reinterpret_cast<const GpsInfo*>(
        &_GpsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(GpsInfo& a, GpsInfo& b) { a.Swap(&b); }
  inline void Swap(GpsInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpsInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GpsInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GpsInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GpsInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GpsInfo& from) { GpsInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GpsInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.GpsInfo"; }

 protected:
  explicit GpsInfo(::google::protobuf::Arena* arena);
  GpsInfo(::google::protobuf::Arena* arena, const GpsInfo& from);
  GpsInfo(::google::protobuf::Arena* arena, GpsInfo&& from) noexcept
      : GpsInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumSatellitesFieldNumber = 1,
    kFixTypeFieldNumber = 2,
  };
  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_num_satellites() ;
  ::int32_t num_satellites() const;
  void set_num_satellites(::int32_t value);

  private:
  ::int32_t _internal_num_satellites() const;
  void _internal_set_num_satellites(::int32_t value);

  public:
  // .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
  void clear_fix_type() ;
  ::mavsdk::rpc::telemetry_server::FixType fix_type() const;
  void set_fix_type(::mavsdk::rpc::telemetry_server::FixType value);

  private:
  ::mavsdk::rpc::telemetry_server::FixType _internal_fix_type() const;
  void _internal_set_fix_type(::mavsdk::rpc::telemetry_server::FixType value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.GpsInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GpsInfo& from_msg);
    ::int32_t num_satellites_;
    int fix_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FixedwingMetrics final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.FixedwingMetrics) */ {
 public:
  inline FixedwingMetrics() : FixedwingMetrics(nullptr) {}
  ~FixedwingMetrics() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FixedwingMetrics* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FixedwingMetrics));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FixedwingMetrics(
      ::google::protobuf::internal::ConstantInitialized);

  inline FixedwingMetrics(const FixedwingMetrics& from) : FixedwingMetrics(nullptr, from) {}
  inline FixedwingMetrics(FixedwingMetrics&& from) noexcept
      : FixedwingMetrics(nullptr, std::move(from)) {}
  inline FixedwingMetrics& operator=(const FixedwingMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedwingMetrics& operator=(FixedwingMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedwingMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedwingMetrics* internal_default_instance() {
    return reinterpret_cast<const FixedwingMetrics*>(
        &_FixedwingMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 59;
  friend void swap(FixedwingMetrics& a, FixedwingMetrics& b) { a.Swap(&b); }
  inline void Swap(FixedwingMetrics* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedwingMetrics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedwingMetrics* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FixedwingMetrics>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FixedwingMetrics& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FixedwingMetrics& from) { FixedwingMetrics::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FixedwingMetrics* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.FixedwingMetrics"; }

 protected:
  explicit FixedwingMetrics(::google::protobuf::Arena* arena);
  FixedwingMetrics(::google::protobuf::Arena* arena, const FixedwingMetrics& from);
  FixedwingMetrics(::google::protobuf::Arena* arena, FixedwingMetrics&& from) noexcept
      : FixedwingMetrics(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAirspeedMSFieldNumber = 1,
    kThrottlePercentageFieldNumber = 2,
    kClimbRateMSFieldNumber = 3,
    kGroundspeedMSFieldNumber = 4,
    kHeadingDegFieldNumber = 5,
    kAbsoluteAltitudeMFieldNumber = 6,
  };
  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_airspeed_m_s() ;
  float airspeed_m_s() const;
  void set_airspeed_m_s(float value);

  private:
  float _internal_airspeed_m_s() const;
  void _internal_set_airspeed_m_s(float value);

  public:
  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_throttle_percentage() ;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  private:
  float _internal_throttle_percentage() const;
  void _internal_set_throttle_percentage(float value);

  public:
  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_climb_rate_m_s() ;
  float climb_rate_m_s() const;
  void set_climb_rate_m_s(float value);

  private:
  float _internal_climb_rate_m_s() const;
  void _internal_set_climb_rate_m_s(float value);

  public:
  // float groundspeed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_groundspeed_m_s() ;
  float groundspeed_m_s() const;
  void set_groundspeed_m_s(float value);

  private:
  float _internal_groundspeed_m_s() const;
  void _internal_set_groundspeed_m_s(float value);

  public:
  // float heading_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
  void clear_heading_deg() ;
  float heading_deg() const;
  void set_heading_deg(float value);

  private:
  float _internal_heading_deg() const;
  void _internal_set_heading_deg(float value);

  public:
  // float absolute_altitude_m = 6 [(.mavsdk.options.default_value) = "NaN"];
  void clear_absolute_altitude_m() ;
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.FixedwingMetrics)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FixedwingMetrics& from_msg);
    float airspeed_m_s_;
    float throttle_percentage_;
    float climb_rate_m_s_;
    float groundspeed_m_s_;
    float heading_deg_;
    float absolute_altitude_m_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.EulerAngle) */ {
 public:
  inline EulerAngle() : EulerAngle(nullptr) {}
  ~EulerAngle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EulerAngle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EulerAngle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EulerAngle(
      ::google::protobuf::internal::ConstantInitialized);

  inline EulerAngle(const EulerAngle& from) : EulerAngle(nullptr, from) {}
  inline EulerAngle(EulerAngle&& from) noexcept
      : EulerAngle(nullptr, std::move(from)) {}
  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
        &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(EulerAngle& a, EulerAngle& b) { a.Swap(&b); }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerAngle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerAngle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EulerAngle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EulerAngle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EulerAngle& from) { EulerAngle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EulerAngle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.EulerAngle"; }

 protected:
  explicit EulerAngle(::google::protobuf::Arena* arena);
  EulerAngle(::google::protobuf::Arena* arena, const EulerAngle& from);
  EulerAngle(::google::protobuf::Arena* arena, EulerAngle&& from) noexcept
      : EulerAngle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kTimestampUsFieldNumber = 4,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_deg() ;
  float roll_deg() const;
  void set_roll_deg(float value);

  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);

  public:
  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_deg() ;
  float pitch_deg() const;
  void set_pitch_deg(float value);

  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);

  public:
  // uint64 timestamp_us = 4;
  void clear_timestamp_us() ;
  ::uint64_t timestamp_us() const;
  void set_timestamp_us(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::uint64_t value);

  public:
  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_deg() ;
  float yaw_deg() const;
  void set_yaw_deg(float value);

  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.EulerAngle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EulerAngle& from_msg);
    float roll_deg_;
    float pitch_deg_;
    ::uint64_t timestamp_us_;
    float yaw_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class DistanceSensor final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.DistanceSensor) */ {
 public:
  inline DistanceSensor() : DistanceSensor(nullptr) {}
  ~DistanceSensor() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DistanceSensor* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DistanceSensor));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DistanceSensor(
      ::google::protobuf::internal::ConstantInitialized);

  inline DistanceSensor(const DistanceSensor& from) : DistanceSensor(nullptr, from) {}
  inline DistanceSensor(DistanceSensor&& from) noexcept
      : DistanceSensor(nullptr, std::move(from)) {}
  inline DistanceSensor& operator=(const DistanceSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceSensor& operator=(DistanceSensor&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceSensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceSensor* internal_default_instance() {
    return reinterpret_cast<const DistanceSensor*>(
        &_DistanceSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 53;
  friend void swap(DistanceSensor& a, DistanceSensor& b) { a.Swap(&b); }
  inline void Swap(DistanceSensor* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceSensor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceSensor* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DistanceSensor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistanceSensor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DistanceSensor& from) { DistanceSensor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DistanceSensor* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.DistanceSensor"; }

 protected:
  explicit DistanceSensor(::google::protobuf::Arena* arena);
  DistanceSensor(::google::protobuf::Arena* arena, const DistanceSensor& from);
  DistanceSensor(::google::protobuf::Arena* arena, DistanceSensor&& from) noexcept
      : DistanceSensor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMinimumDistanceMFieldNumber = 1,
    kMaximumDistanceMFieldNumber = 2,
    kCurrentDistanceMFieldNumber = 3,
  };
  // float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_minimum_distance_m() ;
  float minimum_distance_m() const;
  void set_minimum_distance_m(float value);

  private:
  float _internal_minimum_distance_m() const;
  void _internal_set_minimum_distance_m(float value);

  public:
  // float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_maximum_distance_m() ;
  float maximum_distance_m() const;
  void set_maximum_distance_m(float value);

  private:
  float _internal_maximum_distance_m() const;
  void _internal_set_maximum_distance_m(float value);

  public:
  // float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_current_distance_m() ;
  float current_distance_m() const;
  void set_current_distance_m(float value);

  private:
  float _internal_current_distance_m() const;
  void _internal_set_current_distance_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.DistanceSensor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DistanceSensor& from_msg);
    float minimum_distance_m_;
    float maximum_distance_m_;
    float current_distance_m_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Covariance final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Covariance) */ {
 public:
  inline Covariance() : Covariance(nullptr) {}
  ~Covariance() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Covariance* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Covariance));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Covariance(
      ::google::protobuf::internal::ConstantInitialized);

  inline Covariance(const Covariance& from) : Covariance(nullptr, from) {}
  inline Covariance(Covariance&& from) noexcept
      : Covariance(nullptr, std::move(from)) {}
  inline Covariance& operator=(const Covariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Covariance& operator=(Covariance&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Covariance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Covariance* internal_default_instance() {
    return reinterpret_cast<const Covariance*>(
        &_Covariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(Covariance& a, Covariance& b) { a.Swap(&b); }
  inline void Swap(Covariance* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Covariance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Covariance* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Covariance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Covariance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Covariance& from) { Covariance::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Covariance* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Covariance"; }

 protected:
  explicit Covariance(::google::protobuf::Arena* arena);
  Covariance(::google::protobuf::Arena* arena, const Covariance& from);
  Covariance(::google::protobuf::Arena* arena, Covariance&& from) noexcept
      : Covariance(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCovarianceMatrixFieldNumber = 1,
  };
  // repeated float covariance_matrix = 1;
  int covariance_matrix_size() const;
  private:
  int _internal_covariance_matrix_size() const;

  public:
  void clear_covariance_matrix() ;
  float covariance_matrix(int index) const;
  void set_covariance_matrix(int index, float value);
  void add_covariance_matrix(float value);
  const ::google::protobuf::RepeatedField<float>& covariance_matrix() const;
  ::google::protobuf::RepeatedField<float>* mutable_covariance_matrix();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_covariance_matrix() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_covariance_matrix();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Covariance)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Covariance& from_msg);
    ::google::protobuf::RepeatedField<float> covariance_matrix_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Battery final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  ~Battery() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Battery* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Battery));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Battery(
      ::google::protobuf::internal::ConstantInitialized);

  inline Battery(const Battery& from) : Battery(nullptr, from) {}
  inline Battery(Battery&& from) noexcept
      : Battery(nullptr, std::move(from)) {}
  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
        &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(Battery& a, Battery& b) { a.Swap(&b); }
  inline void Swap(Battery* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Battery* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Battery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Battery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Battery& from) { Battery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Battery* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Battery"; }

 protected:
  explicit Battery(::google::protobuf::Arena* arena);
  Battery(::google::protobuf::Arena* arena, const Battery& from);
  Battery(::google::protobuf::Arena* arena, Battery&& from) noexcept
      : Battery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoltageVFieldNumber = 1,
    kRemainingPercentFieldNumber = 2,
  };
  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_voltage_v() ;
  float voltage_v() const;
  void set_voltage_v(float value);

  private:
  float _internal_voltage_v() const;
  void _internal_set_voltage_v(float value);

  public:
  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_remaining_percent() ;
  float remaining_percent() const;
  void set_remaining_percent(float value);

  private:
  float _internal_remaining_percent() const;
  void _internal_set_remaining_percent(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Battery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Battery& from_msg);
    float voltage_v_;
    float remaining_percent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityFrd final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.AngularVelocityFrd) */ {
 public:
  inline AngularVelocityFrd() : AngularVelocityFrd(nullptr) {}
  ~AngularVelocityFrd() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AngularVelocityFrd* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AngularVelocityFrd));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AngularVelocityFrd(
      ::google::protobuf::internal::ConstantInitialized);

  inline AngularVelocityFrd(const AngularVelocityFrd& from) : AngularVelocityFrd(nullptr, from) {}
  inline AngularVelocityFrd(AngularVelocityFrd&& from) noexcept
      : AngularVelocityFrd(nullptr, std::move(from)) {}
  inline AngularVelocityFrd& operator=(const AngularVelocityFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityFrd& operator=(AngularVelocityFrd&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityFrd* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityFrd*>(
        &_AngularVelocityFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 61;
  friend void swap(AngularVelocityFrd& a, AngularVelocityFrd& b) { a.Swap(&b); }
  inline void Swap(AngularVelocityFrd* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityFrd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityFrd* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AngularVelocityFrd>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AngularVelocityFrd& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AngularVelocityFrd& from) { AngularVelocityFrd::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AngularVelocityFrd* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.AngularVelocityFrd"; }

 protected:
  explicit AngularVelocityFrd(::google::protobuf::Arena* arena);
  AngularVelocityFrd(::google::protobuf::Arena* arena, const AngularVelocityFrd& from);
  AngularVelocityFrd(::google::protobuf::Arena* arena, AngularVelocityFrd&& from) noexcept
      : AngularVelocityFrd(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kForwardRadSFieldNumber = 1,
    kRightRadSFieldNumber = 2,
    kDownRadSFieldNumber = 3,
  };
  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_rad_s() ;
  float forward_rad_s() const;
  void set_forward_rad_s(float value);

  private:
  float _internal_forward_rad_s() const;
  void _internal_set_forward_rad_s(float value);

  public:
  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_rad_s() ;
  float right_rad_s() const;
  void set_right_rad_s(float value);

  private:
  float _internal_right_rad_s() const;
  void _internal_set_right_rad_s(float value);

  public:
  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_rad_s() ;
  float down_rad_s() const;
  void set_down_rad_s(float value);

  private:
  float _internal_down_rad_s() const;
  void _internal_set_down_rad_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.AngularVelocityFrd)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AngularVelocityFrd& from_msg);
    float forward_rad_s_;
    float right_rad_s_;
    float down_rad_s_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AngularVelocityBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AngularVelocityBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline AngularVelocityBody(const AngularVelocityBody& from) : AngularVelocityBody(nullptr, from) {}
  inline AngularVelocityBody(AngularVelocityBody&& from) noexcept
      : AngularVelocityBody(nullptr, std::move(from)) {}
  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
        &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) { a.Swap(&b); }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AngularVelocityBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AngularVelocityBody& from) { AngularVelocityBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AngularVelocityBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.AngularVelocityBody"; }

 protected:
  explicit AngularVelocityBody(::google::protobuf::Arena* arena);
  AngularVelocityBody(::google::protobuf::Arena* arena, const AngularVelocityBody& from);
  AngularVelocityBody(::google::protobuf::Arena* arena, AngularVelocityBody&& from) noexcept
      : AngularVelocityBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_rad_s() ;
  float roll_rad_s() const;
  void set_roll_rad_s(float value);

  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);

  public:
  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_rad_s() ;
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);

  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);

  public:
  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_rad_s() ;
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);

  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.AngularVelocityBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AngularVelocityBody& from_msg);
    float roll_rad_s_;
    float pitch_rad_s_;
    float yaw_rad_s_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ActuatorOutputStatus final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.ActuatorOutputStatus) */ {
 public:
  inline ActuatorOutputStatus() : ActuatorOutputStatus(nullptr) {}
  ~ActuatorOutputStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ActuatorOutputStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ActuatorOutputStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ActuatorOutputStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline ActuatorOutputStatus(const ActuatorOutputStatus& from) : ActuatorOutputStatus(nullptr, from) {}
  inline ActuatorOutputStatus(ActuatorOutputStatus&& from) noexcept
      : ActuatorOutputStatus(nullptr, std::move(from)) {}
  inline ActuatorOutputStatus& operator=(const ActuatorOutputStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOutputStatus& operator=(ActuatorOutputStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorOutputStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorOutputStatus* internal_default_instance() {
    return reinterpret_cast<const ActuatorOutputStatus*>(
        &_ActuatorOutputStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(ActuatorOutputStatus& a, ActuatorOutputStatus& b) { a.Swap(&b); }
  inline void Swap(ActuatorOutputStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorOutputStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorOutputStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ActuatorOutputStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActuatorOutputStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ActuatorOutputStatus& from) { ActuatorOutputStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ActuatorOutputStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.ActuatorOutputStatus"; }

 protected:
  explicit ActuatorOutputStatus(::google::protobuf::Arena* arena);
  ActuatorOutputStatus(::google::protobuf::Arena* arena, const ActuatorOutputStatus& from);
  ActuatorOutputStatus(::google::protobuf::Arena* arena, ActuatorOutputStatus&& from) noexcept
      : ActuatorOutputStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActuatorFieldNumber = 2,
    kActiveFieldNumber = 1,
  };
  // repeated float actuator = 2;
  int actuator_size() const;
  private:
  int _internal_actuator_size() const;

  public:
  void clear_actuator() ;
  float actuator(int index) const;
  void set_actuator(int index, float value);
  void add_actuator(float value);
  const ::google::protobuf::RepeatedField<float>& actuator() const;
  ::google::protobuf::RepeatedField<float>* mutable_actuator();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_actuator() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_actuator();

  public:
  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_active() ;
  ::uint32_t active() const;
  void set_active(::uint32_t value);

  private:
  ::uint32_t _internal_active() const;
  void _internal_set_active(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.ActuatorOutputStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ActuatorOutputStatus& from_msg);
    ::google::protobuf::RepeatedField<float> actuator_;
    ::uint32_t active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlTarget final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.ActuatorControlTarget) */ {
 public:
  inline ActuatorControlTarget() : ActuatorControlTarget(nullptr) {}
  ~ActuatorControlTarget() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ActuatorControlTarget* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ActuatorControlTarget));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ActuatorControlTarget(
      ::google::protobuf::internal::ConstantInitialized);

  inline ActuatorControlTarget(const ActuatorControlTarget& from) : ActuatorControlTarget(nullptr, from) {}
  inline ActuatorControlTarget(ActuatorControlTarget&& from) noexcept
      : ActuatorControlTarget(nullptr, std::move(from)) {}
  inline ActuatorControlTarget& operator=(const ActuatorControlTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlTarget& operator=(ActuatorControlTarget&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorControlTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorControlTarget* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlTarget*>(
        &_ActuatorControlTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(ActuatorControlTarget& a, ActuatorControlTarget& b) { a.Swap(&b); }
  inline void Swap(ActuatorControlTarget* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorControlTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorControlTarget* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ActuatorControlTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActuatorControlTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ActuatorControlTarget& from) { ActuatorControlTarget::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ActuatorControlTarget* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.ActuatorControlTarget"; }

 protected:
  explicit ActuatorControlTarget(::google::protobuf::Arena* arena);
  ActuatorControlTarget(::google::protobuf::Arena* arena, const ActuatorControlTarget& from);
  ActuatorControlTarget(::google::protobuf::Arena* arena, ActuatorControlTarget&& from) noexcept
      : ActuatorControlTarget(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlsFieldNumber = 2,
    kGroupFieldNumber = 1,
  };
  // repeated float controls = 2;
  int controls_size() const;
  private:
  int _internal_controls_size() const;

  public:
  void clear_controls() ;
  float controls(int index) const;
  void set_controls(int index, float value);
  void add_controls(float value);
  const ::google::protobuf::RepeatedField<float>& controls() const;
  ::google::protobuf::RepeatedField<float>* mutable_controls();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_controls() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_controls();

  public:
  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  void clear_group() ;
  ::int32_t group() const;
  void set_group(::int32_t value);

  private:
  ::int32_t _internal_group() const;
  void _internal_set_group(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.ActuatorControlTarget)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ActuatorControlTarget& from_msg);
    ::google::protobuf::RepeatedField<float> controls_;
    ::int32_t group_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class AccelerationFrd final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.AccelerationFrd) */ {
 public:
  inline AccelerationFrd() : AccelerationFrd(nullptr) {}
  ~AccelerationFrd() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccelerationFrd* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccelerationFrd));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccelerationFrd(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccelerationFrd(const AccelerationFrd& from) : AccelerationFrd(nullptr, from) {}
  inline AccelerationFrd(AccelerationFrd&& from) noexcept
      : AccelerationFrd(nullptr, std::move(from)) {}
  inline AccelerationFrd& operator=(const AccelerationFrd& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerationFrd& operator=(AccelerationFrd&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccelerationFrd& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccelerationFrd* internal_default_instance() {
    return reinterpret_cast<const AccelerationFrd*>(
        &_AccelerationFrd_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 60;
  friend void swap(AccelerationFrd& a, AccelerationFrd& b) { a.Swap(&b); }
  inline void Swap(AccelerationFrd* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelerationFrd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccelerationFrd* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccelerationFrd>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccelerationFrd& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccelerationFrd& from) { AccelerationFrd::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccelerationFrd* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.AccelerationFrd"; }

 protected:
  explicit AccelerationFrd(::google::protobuf::Arena* arena);
  AccelerationFrd(::google::protobuf::Arena* arena, const AccelerationFrd& from);
  AccelerationFrd(::google::protobuf::Arena* arena, AccelerationFrd&& from) noexcept
      : AccelerationFrd(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kForwardMS2FieldNumber = 1,
    kRightMS2FieldNumber = 2,
    kDownMS2FieldNumber = 3,
  };
  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_forward_m_s2() ;
  float forward_m_s2() const;
  void set_forward_m_s2(float value);

  private:
  float _internal_forward_m_s2() const;
  void _internal_set_forward_m_s2(float value);

  public:
  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_right_m_s2() ;
  float right_m_s2() const;
  void set_right_m_s2(float value);

  private:
  float _internal_right_m_s2() const;
  void _internal_set_right_m_s2(float value);

  public:
  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_down_m_s2() ;
  float down_m_s2() const;
  void set_down_m_s2(float value);

  private:
  float _internal_down_m_s2() const;
  void _internal_set_down_m_s2(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.AccelerationFrd)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccelerationFrd& from_msg);
    float forward_m_s2_;
    float right_m_s2_;
    float down_m_s2_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishVisualFlightRulesHudResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse) */ {
 public:
  inline PublishVisualFlightRulesHudResponse() : PublishVisualFlightRulesHudResponse(nullptr) {}
  ~PublishVisualFlightRulesHudResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishVisualFlightRulesHudResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishVisualFlightRulesHudResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishVisualFlightRulesHudResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishVisualFlightRulesHudResponse(const PublishVisualFlightRulesHudResponse& from) : PublishVisualFlightRulesHudResponse(nullptr, from) {}
  inline PublishVisualFlightRulesHudResponse(PublishVisualFlightRulesHudResponse&& from) noexcept
      : PublishVisualFlightRulesHudResponse(nullptr, std::move(from)) {}
  inline PublishVisualFlightRulesHudResponse& operator=(const PublishVisualFlightRulesHudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishVisualFlightRulesHudResponse& operator=(PublishVisualFlightRulesHudResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishVisualFlightRulesHudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishVisualFlightRulesHudResponse* internal_default_instance() {
    return reinterpret_cast<const PublishVisualFlightRulesHudResponse*>(
        &_PublishVisualFlightRulesHudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(PublishVisualFlightRulesHudResponse& a, PublishVisualFlightRulesHudResponse& b) { a.Swap(&b); }
  inline void Swap(PublishVisualFlightRulesHudResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishVisualFlightRulesHudResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishVisualFlightRulesHudResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishVisualFlightRulesHudResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishVisualFlightRulesHudResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishVisualFlightRulesHudResponse& from) { PublishVisualFlightRulesHudResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishVisualFlightRulesHudResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse"; }

 protected:
  explicit PublishVisualFlightRulesHudResponse(::google::protobuf::Arena* arena);
  PublishVisualFlightRulesHudResponse(::google::protobuf::Arena* arena, const PublishVisualFlightRulesHudResponse& from);
  PublishVisualFlightRulesHudResponse(::google::protobuf::Arena* arena, PublishVisualFlightRulesHudResponse&& from) noexcept
      : PublishVisualFlightRulesHudResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishVisualFlightRulesHudResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishVisualFlightRulesHudRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest) */ {
 public:
  inline PublishVisualFlightRulesHudRequest() : PublishVisualFlightRulesHudRequest(nullptr) {}
  ~PublishVisualFlightRulesHudRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishVisualFlightRulesHudRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishVisualFlightRulesHudRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishVisualFlightRulesHudRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishVisualFlightRulesHudRequest(const PublishVisualFlightRulesHudRequest& from) : PublishVisualFlightRulesHudRequest(nullptr, from) {}
  inline PublishVisualFlightRulesHudRequest(PublishVisualFlightRulesHudRequest&& from) noexcept
      : PublishVisualFlightRulesHudRequest(nullptr, std::move(from)) {}
  inline PublishVisualFlightRulesHudRequest& operator=(const PublishVisualFlightRulesHudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishVisualFlightRulesHudRequest& operator=(PublishVisualFlightRulesHudRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishVisualFlightRulesHudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishVisualFlightRulesHudRequest* internal_default_instance() {
    return reinterpret_cast<const PublishVisualFlightRulesHudRequest*>(
        &_PublishVisualFlightRulesHudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(PublishVisualFlightRulesHudRequest& a, PublishVisualFlightRulesHudRequest& b) { a.Swap(&b); }
  inline void Swap(PublishVisualFlightRulesHudRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishVisualFlightRulesHudRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishVisualFlightRulesHudRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishVisualFlightRulesHudRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishVisualFlightRulesHudRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishVisualFlightRulesHudRequest& from) { PublishVisualFlightRulesHudRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishVisualFlightRulesHudRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest"; }

 protected:
  explicit PublishVisualFlightRulesHudRequest(::google::protobuf::Arena* arena);
  PublishVisualFlightRulesHudRequest(::google::protobuf::Arena* arena, const PublishVisualFlightRulesHudRequest& from);
  PublishVisualFlightRulesHudRequest(::google::protobuf::Arena* arena, PublishVisualFlightRulesHudRequest&& from) noexcept
      : PublishVisualFlightRulesHudRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFixedWingMetricsFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.FixedwingMetrics fixed_wing_metrics = 1;
  bool has_fixed_wing_metrics() const;
  void clear_fixed_wing_metrics() ;
  const ::mavsdk::rpc::telemetry_server::FixedwingMetrics& fixed_wing_metrics() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::FixedwingMetrics* release_fixed_wing_metrics();
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics* mutable_fixed_wing_metrics();
  void set_allocated_fixed_wing_metrics(::mavsdk::rpc::telemetry_server::FixedwingMetrics* value);
  void unsafe_arena_set_allocated_fixed_wing_metrics(::mavsdk::rpc::telemetry_server::FixedwingMetrics* value);
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics* unsafe_arena_release_fixed_wing_metrics();

  private:
  const ::mavsdk::rpc::telemetry_server::FixedwingMetrics& _internal_fixed_wing_metrics() const;
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics* _internal_mutable_fixed_wing_metrics();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishVisualFlightRulesHudRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::FixedwingMetrics* fixed_wing_metrics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishUnixEpochTimeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse) */ {
 public:
  inline PublishUnixEpochTimeResponse() : PublishUnixEpochTimeResponse(nullptr) {}
  ~PublishUnixEpochTimeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishUnixEpochTimeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishUnixEpochTimeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishUnixEpochTimeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishUnixEpochTimeResponse(const PublishUnixEpochTimeResponse& from) : PublishUnixEpochTimeResponse(nullptr, from) {}
  inline PublishUnixEpochTimeResponse(PublishUnixEpochTimeResponse&& from) noexcept
      : PublishUnixEpochTimeResponse(nullptr, std::move(from)) {}
  inline PublishUnixEpochTimeResponse& operator=(const PublishUnixEpochTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishUnixEpochTimeResponse& operator=(PublishUnixEpochTimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishUnixEpochTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishUnixEpochTimeResponse* internal_default_instance() {
    return reinterpret_cast<const PublishUnixEpochTimeResponse*>(
        &_PublishUnixEpochTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(PublishUnixEpochTimeResponse& a, PublishUnixEpochTimeResponse& b) { a.Swap(&b); }
  inline void Swap(PublishUnixEpochTimeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishUnixEpochTimeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishUnixEpochTimeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishUnixEpochTimeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishUnixEpochTimeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishUnixEpochTimeResponse& from) { PublishUnixEpochTimeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishUnixEpochTimeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse"; }

 protected:
  explicit PublishUnixEpochTimeResponse(::google::protobuf::Arena* arena);
  PublishUnixEpochTimeResponse(::google::protobuf::Arena* arena, const PublishUnixEpochTimeResponse& from);
  PublishUnixEpochTimeResponse(::google::protobuf::Arena* arena, PublishUnixEpochTimeResponse&& from) noexcept
      : PublishUnixEpochTimeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishUnixEpochTimeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishSysStatusResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishSysStatusResponse) */ {
 public:
  inline PublishSysStatusResponse() : PublishSysStatusResponse(nullptr) {}
  ~PublishSysStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishSysStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishSysStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishSysStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishSysStatusResponse(const PublishSysStatusResponse& from) : PublishSysStatusResponse(nullptr, from) {}
  inline PublishSysStatusResponse(PublishSysStatusResponse&& from) noexcept
      : PublishSysStatusResponse(nullptr, std::move(from)) {}
  inline PublishSysStatusResponse& operator=(const PublishSysStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishSysStatusResponse& operator=(PublishSysStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishSysStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishSysStatusResponse* internal_default_instance() {
    return reinterpret_cast<const PublishSysStatusResponse*>(
        &_PublishSysStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(PublishSysStatusResponse& a, PublishSysStatusResponse& b) { a.Swap(&b); }
  inline void Swap(PublishSysStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishSysStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishSysStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishSysStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishSysStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishSysStatusResponse& from) { PublishSysStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishSysStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishSysStatusResponse"; }

 protected:
  explicit PublishSysStatusResponse(::google::protobuf::Arena* arena);
  PublishSysStatusResponse(::google::protobuf::Arena* arena, const PublishSysStatusResponse& from);
  PublishSysStatusResponse(::google::protobuf::Arena* arena, PublishSysStatusResponse&& from) noexcept
      : PublishSysStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishSysStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishSysStatusResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishSysStatusRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishSysStatusRequest) */ {
 public:
  inline PublishSysStatusRequest() : PublishSysStatusRequest(nullptr) {}
  ~PublishSysStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishSysStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishSysStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishSysStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishSysStatusRequest(const PublishSysStatusRequest& from) : PublishSysStatusRequest(nullptr, from) {}
  inline PublishSysStatusRequest(PublishSysStatusRequest&& from) noexcept
      : PublishSysStatusRequest(nullptr, std::move(from)) {}
  inline PublishSysStatusRequest& operator=(const PublishSysStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishSysStatusRequest& operator=(PublishSysStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishSysStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishSysStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PublishSysStatusRequest*>(
        &_PublishSysStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PublishSysStatusRequest& a, PublishSysStatusRequest& b) { a.Swap(&b); }
  inline void Swap(PublishSysStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishSysStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishSysStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishSysStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishSysStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishSysStatusRequest& from) { PublishSysStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishSysStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishSysStatusRequest"; }

 protected:
  explicit PublishSysStatusRequest(::google::protobuf::Arena* arena);
  PublishSysStatusRequest(::google::protobuf::Arena* arena, const PublishSysStatusRequest& from);
  PublishSysStatusRequest(::google::protobuf::Arena* arena, PublishSysStatusRequest&& from) noexcept
      : PublishSysStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBatteryFieldNumber = 1,
    kRcReceiverStatusFieldNumber = 2,
    kGyroStatusFieldNumber = 3,
    kAccelStatusFieldNumber = 4,
    kMagStatusFieldNumber = 5,
    kGpsStatusFieldNumber = 6,
  };
  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  bool has_battery() const;
  void clear_battery() ;
  const ::mavsdk::rpc::telemetry_server::Battery& battery() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Battery* release_battery();
  ::mavsdk::rpc::telemetry_server::Battery* mutable_battery();
  void set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value);
  void unsafe_arena_set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value);
  ::mavsdk::rpc::telemetry_server::Battery* unsafe_arena_release_battery();

  private:
  const ::mavsdk::rpc::telemetry_server::Battery& _internal_battery() const;
  ::mavsdk::rpc::telemetry_server::Battery* _internal_mutable_battery();

  public:
  // bool rc_receiver_status = 2;
  void clear_rc_receiver_status() ;
  bool rc_receiver_status() const;
  void set_rc_receiver_status(bool value);

  private:
  bool _internal_rc_receiver_status() const;
  void _internal_set_rc_receiver_status(bool value);

  public:
  // bool gyro_status = 3;
  void clear_gyro_status() ;
  bool gyro_status() const;
  void set_gyro_status(bool value);

  private:
  bool _internal_gyro_status() const;
  void _internal_set_gyro_status(bool value);

  public:
  // bool accel_status = 4;
  void clear_accel_status() ;
  bool accel_status() const;
  void set_accel_status(bool value);

  private:
  bool _internal_accel_status() const;
  void _internal_set_accel_status(bool value);

  public:
  // bool mag_status = 5;
  void clear_mag_status() ;
  bool mag_status() const;
  void set_mag_status(bool value);

  private:
  bool _internal_mag_status() const;
  void _internal_set_mag_status(bool value);

  public:
  // bool gps_status = 6;
  void clear_gps_status() ;
  bool gps_status() const;
  void set_gps_status(bool value);

  private:
  bool _internal_gps_status() const;
  void _internal_set_gps_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishSysStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishSysStatusRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Battery* battery_;
    bool rc_receiver_status_;
    bool gyro_status_;
    bool accel_status_;
    bool mag_status_;
    bool gps_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishStatusTextResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishStatusTextResponse) */ {
 public:
  inline PublishStatusTextResponse() : PublishStatusTextResponse(nullptr) {}
  ~PublishStatusTextResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishStatusTextResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishStatusTextResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishStatusTextResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishStatusTextResponse(const PublishStatusTextResponse& from) : PublishStatusTextResponse(nullptr, from) {}
  inline PublishStatusTextResponse(PublishStatusTextResponse&& from) noexcept
      : PublishStatusTextResponse(nullptr, std::move(from)) {}
  inline PublishStatusTextResponse& operator=(const PublishStatusTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishStatusTextResponse& operator=(PublishStatusTextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishStatusTextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishStatusTextResponse* internal_default_instance() {
    return reinterpret_cast<const PublishStatusTextResponse*>(
        &_PublishStatusTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(PublishStatusTextResponse& a, PublishStatusTextResponse& b) { a.Swap(&b); }
  inline void Swap(PublishStatusTextResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishStatusTextResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishStatusTextResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishStatusTextResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishStatusTextResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishStatusTextResponse& from) { PublishStatusTextResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishStatusTextResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishStatusTextResponse"; }

 protected:
  explicit PublishStatusTextResponse(::google::protobuf::Arena* arena);
  PublishStatusTextResponse(::google::protobuf::Arena* arena, const PublishStatusTextResponse& from);
  PublishStatusTextResponse(::google::protobuf::Arena* arena, PublishStatusTextResponse&& from) noexcept
      : PublishStatusTextResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishStatusTextResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishStatusTextResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishStatusTextRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishStatusTextRequest) */ {
 public:
  inline PublishStatusTextRequest() : PublishStatusTextRequest(nullptr) {}
  ~PublishStatusTextRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishStatusTextRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishStatusTextRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishStatusTextRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishStatusTextRequest(const PublishStatusTextRequest& from) : PublishStatusTextRequest(nullptr, from) {}
  inline PublishStatusTextRequest(PublishStatusTextRequest&& from) noexcept
      : PublishStatusTextRequest(nullptr, std::move(from)) {}
  inline PublishStatusTextRequest& operator=(const PublishStatusTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishStatusTextRequest& operator=(PublishStatusTextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishStatusTextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishStatusTextRequest* internal_default_instance() {
    return reinterpret_cast<const PublishStatusTextRequest*>(
        &_PublishStatusTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(PublishStatusTextRequest& a, PublishStatusTextRequest& b) { a.Swap(&b); }
  inline void Swap(PublishStatusTextRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishStatusTextRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishStatusTextRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishStatusTextRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishStatusTextRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishStatusTextRequest& from) { PublishStatusTextRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishStatusTextRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishStatusTextRequest"; }

 protected:
  explicit PublishStatusTextRequest(::google::protobuf::Arena* arena);
  PublishStatusTextRequest(::google::protobuf::Arena* arena, const PublishStatusTextRequest& from);
  PublishStatusTextRequest(::google::protobuf::Arena* arena, PublishStatusTextRequest&& from) noexcept
      : PublishStatusTextRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusTextFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
  bool has_status_text() const;
  void clear_status_text() ;
  const ::mavsdk::rpc::telemetry_server::StatusText& status_text() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::StatusText* release_status_text();
  ::mavsdk::rpc::telemetry_server::StatusText* mutable_status_text();
  void set_allocated_status_text(::mavsdk::rpc::telemetry_server::StatusText* value);
  void unsafe_arena_set_allocated_status_text(::mavsdk::rpc::telemetry_server::StatusText* value);
  ::mavsdk::rpc::telemetry_server::StatusText* unsafe_arena_release_status_text();

  private:
  const ::mavsdk::rpc::telemetry_server::StatusText& _internal_status_text() const;
  ::mavsdk::rpc::telemetry_server::StatusText* _internal_mutable_status_text();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishStatusTextRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishStatusTextRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::StatusText* status_text_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishScaledImuResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishScaledImuResponse) */ {
 public:
  inline PublishScaledImuResponse() : PublishScaledImuResponse(nullptr) {}
  ~PublishScaledImuResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishScaledImuResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishScaledImuResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishScaledImuResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishScaledImuResponse(const PublishScaledImuResponse& from) : PublishScaledImuResponse(nullptr, from) {}
  inline PublishScaledImuResponse(PublishScaledImuResponse&& from) noexcept
      : PublishScaledImuResponse(nullptr, std::move(from)) {}
  inline PublishScaledImuResponse& operator=(const PublishScaledImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishScaledImuResponse& operator=(PublishScaledImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishScaledImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishScaledImuResponse* internal_default_instance() {
    return reinterpret_cast<const PublishScaledImuResponse*>(
        &_PublishScaledImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(PublishScaledImuResponse& a, PublishScaledImuResponse& b) { a.Swap(&b); }
  inline void Swap(PublishScaledImuResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishScaledImuResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishScaledImuResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishScaledImuResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishScaledImuResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishScaledImuResponse& from) { PublishScaledImuResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishScaledImuResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishScaledImuResponse"; }

 protected:
  explicit PublishScaledImuResponse(::google::protobuf::Arena* arena);
  PublishScaledImuResponse(::google::protobuf::Arena* arena, const PublishScaledImuResponse& from);
  PublishScaledImuResponse(::google::protobuf::Arena* arena, PublishScaledImuResponse&& from) noexcept
      : PublishScaledImuResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishScaledImuResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishScaledImuResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRcStatusRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRcStatusRequest) */ {
 public:
  inline PublishRcStatusRequest() : PublishRcStatusRequest(nullptr) {}
  ~PublishRcStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishRcStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishRcStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRcStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishRcStatusRequest(const PublishRcStatusRequest& from) : PublishRcStatusRequest(nullptr, from) {}
  inline PublishRcStatusRequest(PublishRcStatusRequest&& from) noexcept
      : PublishRcStatusRequest(nullptr, std::move(from)) {}
  inline PublishRcStatusRequest& operator=(const PublishRcStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRcStatusRequest& operator=(PublishRcStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRcStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRcStatusRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRcStatusRequest*>(
        &_PublishRcStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(PublishRcStatusRequest& a, PublishRcStatusRequest& b) { a.Swap(&b); }
  inline void Swap(PublishRcStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRcStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRcStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishRcStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRcStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishRcStatusRequest& from) { PublishRcStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishRcStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishRcStatusRequest"; }

 protected:
  explicit PublishRcStatusRequest(::google::protobuf::Arena* arena);
  PublishRcStatusRequest(::google::protobuf::Arena* arena, const PublishRcStatusRequest& from);
  PublishRcStatusRequest(::google::protobuf::Arena* arena, PublishRcStatusRequest&& from) noexcept
      : PublishRcStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRcStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
  bool has_rc_status() const;
  void clear_rc_status() ;
  const ::mavsdk::rpc::telemetry_server::RcStatus& rc_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::RcStatus* release_rc_status();
  ::mavsdk::rpc::telemetry_server::RcStatus* mutable_rc_status();
  void set_allocated_rc_status(::mavsdk::rpc::telemetry_server::RcStatus* value);
  void unsafe_arena_set_allocated_rc_status(::mavsdk::rpc::telemetry_server::RcStatus* value);
  ::mavsdk::rpc::telemetry_server::RcStatus* unsafe_arena_release_rc_status();

  private:
  const ::mavsdk::rpc::telemetry_server::RcStatus& _internal_rc_status() const;
  ::mavsdk::rpc::telemetry_server::RcStatus* _internal_mutable_rc_status();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRcStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishRcStatusRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::RcStatus* rc_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawImuResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawImuResponse) */ {
 public:
  inline PublishRawImuResponse() : PublishRawImuResponse(nullptr) {}
  ~PublishRawImuResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishRawImuResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishRawImuResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRawImuResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishRawImuResponse(const PublishRawImuResponse& from) : PublishRawImuResponse(nullptr, from) {}
  inline PublishRawImuResponse(PublishRawImuResponse&& from) noexcept
      : PublishRawImuResponse(nullptr, std::move(from)) {}
  inline PublishRawImuResponse& operator=(const PublishRawImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawImuResponse& operator=(PublishRawImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawImuResponse* internal_default_instance() {
    return reinterpret_cast<const PublishRawImuResponse*>(
        &_PublishRawImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(PublishRawImuResponse& a, PublishRawImuResponse& b) { a.Swap(&b); }
  inline void Swap(PublishRawImuResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawImuResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawImuResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishRawImuResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRawImuResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishRawImuResponse& from) { PublishRawImuResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishRawImuResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishRawImuResponse"; }

 protected:
  explicit PublishRawImuResponse(::google::protobuf::Arena* arena);
  PublishRawImuResponse(::google::protobuf::Arena* arena, const PublishRawImuResponse& from);
  PublishRawImuResponse(::google::protobuf::Arena* arena, PublishRawImuResponse&& from) noexcept
      : PublishRawImuResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawImuResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishRawImuResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawGpsResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawGpsResponse) */ {
 public:
  inline PublishRawGpsResponse() : PublishRawGpsResponse(nullptr) {}
  ~PublishRawGpsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishRawGpsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishRawGpsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRawGpsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishRawGpsResponse(const PublishRawGpsResponse& from) : PublishRawGpsResponse(nullptr, from) {}
  inline PublishRawGpsResponse(PublishRawGpsResponse&& from) noexcept
      : PublishRawGpsResponse(nullptr, std::move(from)) {}
  inline PublishRawGpsResponse& operator=(const PublishRawGpsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawGpsResponse& operator=(PublishRawGpsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawGpsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawGpsResponse* internal_default_instance() {
    return reinterpret_cast<const PublishRawGpsResponse*>(
        &_PublishRawGpsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(PublishRawGpsResponse& a, PublishRawGpsResponse& b) { a.Swap(&b); }
  inline void Swap(PublishRawGpsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawGpsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawGpsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishRawGpsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRawGpsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishRawGpsResponse& from) { PublishRawGpsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishRawGpsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishRawGpsResponse"; }

 protected:
  explicit PublishRawGpsResponse(::google::protobuf::Arena* arena);
  PublishRawGpsResponse(::google::protobuf::Arena* arena, const PublishRawGpsResponse& from);
  PublishRawGpsResponse(::google::protobuf::Arena* arena, PublishRawGpsResponse&& from) noexcept
      : PublishRawGpsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawGpsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishRawGpsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawGpsRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawGpsRequest) */ {
 public:
  inline PublishRawGpsRequest() : PublishRawGpsRequest(nullptr) {}
  ~PublishRawGpsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishRawGpsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishRawGpsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRawGpsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishRawGpsRequest(const PublishRawGpsRequest& from) : PublishRawGpsRequest(nullptr, from) {}
  inline PublishRawGpsRequest(PublishRawGpsRequest&& from) noexcept
      : PublishRawGpsRequest(nullptr, std::move(from)) {}
  inline PublishRawGpsRequest& operator=(const PublishRawGpsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawGpsRequest& operator=(PublishRawGpsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawGpsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawGpsRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRawGpsRequest*>(
        &_PublishRawGpsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PublishRawGpsRequest& a, PublishRawGpsRequest& b) { a.Swap(&b); }
  inline void Swap(PublishRawGpsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawGpsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawGpsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishRawGpsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRawGpsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishRawGpsRequest& from) { PublishRawGpsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishRawGpsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishRawGpsRequest"; }

 protected:
  explicit PublishRawGpsRequest(::google::protobuf::Arena* arena);
  PublishRawGpsRequest(::google::protobuf::Arena* arena, const PublishRawGpsRequest& from);
  PublishRawGpsRequest(::google::protobuf::Arena* arena, PublishRawGpsRequest&& from) noexcept
      : PublishRawGpsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRawGpsFieldNumber = 1,
    kGpsInfoFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
  bool has_raw_gps() const;
  void clear_raw_gps() ;
  const ::mavsdk::rpc::telemetry_server::RawGps& raw_gps() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::RawGps* release_raw_gps();
  ::mavsdk::rpc::telemetry_server::RawGps* mutable_raw_gps();
  void set_allocated_raw_gps(::mavsdk::rpc::telemetry_server::RawGps* value);
  void unsafe_arena_set_allocated_raw_gps(::mavsdk::rpc::telemetry_server::RawGps* value);
  ::mavsdk::rpc::telemetry_server::RawGps* unsafe_arena_release_raw_gps();

  private:
  const ::mavsdk::rpc::telemetry_server::RawGps& _internal_raw_gps() const;
  ::mavsdk::rpc::telemetry_server::RawGps* _internal_mutable_raw_gps();

  public:
  // .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
  bool has_gps_info() const;
  void clear_gps_info() ;
  const ::mavsdk::rpc::telemetry_server::GpsInfo& gps_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::GpsInfo* release_gps_info();
  ::mavsdk::rpc::telemetry_server::GpsInfo* mutable_gps_info();
  void set_allocated_gps_info(::mavsdk::rpc::telemetry_server::GpsInfo* value);
  void unsafe_arena_set_allocated_gps_info(::mavsdk::rpc::telemetry_server::GpsInfo* value);
  ::mavsdk::rpc::telemetry_server::GpsInfo* unsafe_arena_release_gps_info();

  private:
  const ::mavsdk::rpc::telemetry_server::GpsInfo& _internal_gps_info() const;
  ::mavsdk::rpc::telemetry_server::GpsInfo* _internal_mutable_gps_info();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawGpsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishRawGpsRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::RawGps* raw_gps_;
    ::mavsdk::rpc::telemetry_server::GpsInfo* gps_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionVelocityNedResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse) */ {
 public:
  inline PublishPositionVelocityNedResponse() : PublishPositionVelocityNedResponse(nullptr) {}
  ~PublishPositionVelocityNedResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishPositionVelocityNedResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishPositionVelocityNedResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishPositionVelocityNedResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishPositionVelocityNedResponse(const PublishPositionVelocityNedResponse& from) : PublishPositionVelocityNedResponse(nullptr, from) {}
  inline PublishPositionVelocityNedResponse(PublishPositionVelocityNedResponse&& from) noexcept
      : PublishPositionVelocityNedResponse(nullptr, std::move(from)) {}
  inline PublishPositionVelocityNedResponse& operator=(const PublishPositionVelocityNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionVelocityNedResponse& operator=(PublishPositionVelocityNedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionVelocityNedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionVelocityNedResponse* internal_default_instance() {
    return reinterpret_cast<const PublishPositionVelocityNedResponse*>(
        &_PublishPositionVelocityNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(PublishPositionVelocityNedResponse& a, PublishPositionVelocityNedResponse& b) { a.Swap(&b); }
  inline void Swap(PublishPositionVelocityNedResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionVelocityNedResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionVelocityNedResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishPositionVelocityNedResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishPositionVelocityNedResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishPositionVelocityNedResponse& from) { PublishPositionVelocityNedResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishPositionVelocityNedResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse"; }

 protected:
  explicit PublishPositionVelocityNedResponse(::google::protobuf::Arena* arena);
  PublishPositionVelocityNedResponse(::google::protobuf::Arena* arena, const PublishPositionVelocityNedResponse& from);
  PublishPositionVelocityNedResponse(::google::protobuf::Arena* arena, PublishPositionVelocityNedResponse&& from) noexcept
      : PublishPositionVelocityNedResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishPositionVelocityNedResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionResponse) */ {
 public:
  inline PublishPositionResponse() : PublishPositionResponse(nullptr) {}
  ~PublishPositionResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishPositionResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishPositionResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishPositionResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishPositionResponse(const PublishPositionResponse& from) : PublishPositionResponse(nullptr, from) {}
  inline PublishPositionResponse(PublishPositionResponse&& from) noexcept
      : PublishPositionResponse(nullptr, std::move(from)) {}
  inline PublishPositionResponse& operator=(const PublishPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionResponse& operator=(PublishPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionResponse* internal_default_instance() {
    return reinterpret_cast<const PublishPositionResponse*>(
        &_PublishPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(PublishPositionResponse& a, PublishPositionResponse& b) { a.Swap(&b); }
  inline void Swap(PublishPositionResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishPositionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishPositionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishPositionResponse& from) { PublishPositionResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishPositionResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishPositionResponse"; }

 protected:
  explicit PublishPositionResponse(::google::protobuf::Arena* arena);
  PublishPositionResponse(::google::protobuf::Arena* arena, const PublishPositionResponse& from);
  PublishPositionResponse(::google::protobuf::Arena* arena, PublishPositionResponse&& from) noexcept
      : PublishPositionResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishPositionResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionRequest) */ {
 public:
  inline PublishPositionRequest() : PublishPositionRequest(nullptr) {}
  ~PublishPositionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishPositionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishPositionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishPositionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishPositionRequest(const PublishPositionRequest& from) : PublishPositionRequest(nullptr, from) {}
  inline PublishPositionRequest(PublishPositionRequest&& from) noexcept
      : PublishPositionRequest(nullptr, std::move(from)) {}
  inline PublishPositionRequest& operator=(const PublishPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionRequest& operator=(PublishPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionRequest* internal_default_instance() {
    return reinterpret_cast<const PublishPositionRequest*>(
        &_PublishPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PublishPositionRequest& a, PublishPositionRequest& b) { a.Swap(&b); }
  inline void Swap(PublishPositionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishPositionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishPositionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishPositionRequest& from) { PublishPositionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishPositionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishPositionRequest"; }

 protected:
  explicit PublishPositionRequest(::google::protobuf::Arena* arena);
  PublishPositionRequest(::google::protobuf::Arena* arena, const PublishPositionRequest& from);
  PublishPositionRequest(::google::protobuf::Arena* arena, PublishPositionRequest&& from) noexcept
      : PublishPositionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kVelocityNedFieldNumber = 2,
    kHeadingFieldNumber = 3,
  };
  // .mavsdk.rpc.telemetry_server.Position position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::mavsdk::rpc::telemetry_server::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Position* release_position();
  ::mavsdk::rpc::telemetry_server::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry_server::Position* value);
  void unsafe_arena_set_allocated_position(::mavsdk::rpc::telemetry_server::Position* value);
  ::mavsdk::rpc::telemetry_server::Position* unsafe_arena_release_position();

  private:
  const ::mavsdk::rpc::telemetry_server::Position& _internal_position() const;
  ::mavsdk::rpc::telemetry_server::Position* _internal_mutable_position();

  public:
  // .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
  bool has_velocity_ned() const;
  void clear_velocity_ned() ;
  const ::mavsdk::rpc::telemetry_server::VelocityNed& velocity_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::VelocityNed* release_velocity_ned();
  ::mavsdk::rpc::telemetry_server::VelocityNed* mutable_velocity_ned();
  void set_allocated_velocity_ned(::mavsdk::rpc::telemetry_server::VelocityNed* value);
  void unsafe_arena_set_allocated_velocity_ned(::mavsdk::rpc::telemetry_server::VelocityNed* value);
  ::mavsdk::rpc::telemetry_server::VelocityNed* unsafe_arena_release_velocity_ned();

  private:
  const ::mavsdk::rpc::telemetry_server::VelocityNed& _internal_velocity_ned() const;
  ::mavsdk::rpc::telemetry_server::VelocityNed* _internal_mutable_velocity_ned();

  public:
  // .mavsdk.rpc.telemetry_server.Heading heading = 3;
  bool has_heading() const;
  void clear_heading() ;
  const ::mavsdk::rpc::telemetry_server::Heading& heading() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Heading* release_heading();
  ::mavsdk::rpc::telemetry_server::Heading* mutable_heading();
  void set_allocated_heading(::mavsdk::rpc::telemetry_server::Heading* value);
  void unsafe_arena_set_allocated_heading(::mavsdk::rpc::telemetry_server::Heading* value);
  ::mavsdk::rpc::telemetry_server::Heading* unsafe_arena_release_heading();

  private:
  const ::mavsdk::rpc::telemetry_server::Heading& _internal_heading() const;
  ::mavsdk::rpc::telemetry_server::Heading* _internal_mutable_heading();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishPositionRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Position* position_;
    ::mavsdk::rpc::telemetry_server::VelocityNed* velocity_ned_;
    ::mavsdk::rpc::telemetry_server::Heading* heading_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishOdometryResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishOdometryResponse) */ {
 public:
  inline PublishOdometryResponse() : PublishOdometryResponse(nullptr) {}
  ~PublishOdometryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishOdometryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishOdometryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishOdometryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishOdometryResponse(const PublishOdometryResponse& from) : PublishOdometryResponse(nullptr, from) {}
  inline PublishOdometryResponse(PublishOdometryResponse&& from) noexcept
      : PublishOdometryResponse(nullptr, std::move(from)) {}
  inline PublishOdometryResponse& operator=(const PublishOdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishOdometryResponse& operator=(PublishOdometryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishOdometryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishOdometryResponse* internal_default_instance() {
    return reinterpret_cast<const PublishOdometryResponse*>(
        &_PublishOdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(PublishOdometryResponse& a, PublishOdometryResponse& b) { a.Swap(&b); }
  inline void Swap(PublishOdometryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishOdometryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishOdometryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishOdometryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishOdometryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishOdometryResponse& from) { PublishOdometryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishOdometryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishOdometryResponse"; }

 protected:
  explicit PublishOdometryResponse(::google::protobuf::Arena* arena);
  PublishOdometryResponse(::google::protobuf::Arena* arena, const PublishOdometryResponse& from);
  PublishOdometryResponse(::google::protobuf::Arena* arena, PublishOdometryResponse&& from) noexcept
      : PublishOdometryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishOdometryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishOdometryResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishImuResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishImuResponse) */ {
 public:
  inline PublishImuResponse() : PublishImuResponse(nullptr) {}
  ~PublishImuResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishImuResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishImuResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishImuResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishImuResponse(const PublishImuResponse& from) : PublishImuResponse(nullptr, from) {}
  inline PublishImuResponse(PublishImuResponse&& from) noexcept
      : PublishImuResponse(nullptr, std::move(from)) {}
  inline PublishImuResponse& operator=(const PublishImuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishImuResponse& operator=(PublishImuResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishImuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishImuResponse* internal_default_instance() {
    return reinterpret_cast<const PublishImuResponse*>(
        &_PublishImuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(PublishImuResponse& a, PublishImuResponse& b) { a.Swap(&b); }
  inline void Swap(PublishImuResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishImuResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishImuResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishImuResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishImuResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishImuResponse& from) { PublishImuResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishImuResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishImuResponse"; }

 protected:
  explicit PublishImuResponse(::google::protobuf::Arena* arena);
  PublishImuResponse(::google::protobuf::Arena* arena, const PublishImuResponse& from);
  PublishImuResponse(::google::protobuf::Arena* arena, PublishImuResponse&& from) noexcept
      : PublishImuResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishImuResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishImuResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishHomeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishHomeResponse) */ {
 public:
  inline PublishHomeResponse() : PublishHomeResponse(nullptr) {}
  ~PublishHomeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishHomeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishHomeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishHomeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishHomeResponse(const PublishHomeResponse& from) : PublishHomeResponse(nullptr, from) {}
  inline PublishHomeResponse(PublishHomeResponse&& from) noexcept
      : PublishHomeResponse(nullptr, std::move(from)) {}
  inline PublishHomeResponse& operator=(const PublishHomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishHomeResponse& operator=(PublishHomeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishHomeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishHomeResponse* internal_default_instance() {
    return reinterpret_cast<const PublishHomeResponse*>(
        &_PublishHomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(PublishHomeResponse& a, PublishHomeResponse& b) { a.Swap(&b); }
  inline void Swap(PublishHomeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishHomeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishHomeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishHomeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishHomeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishHomeResponse& from) { PublishHomeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishHomeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishHomeResponse"; }

 protected:
  explicit PublishHomeResponse(::google::protobuf::Arena* arena);
  PublishHomeResponse(::google::protobuf::Arena* arena, const PublishHomeResponse& from);
  PublishHomeResponse(::google::protobuf::Arena* arena, PublishHomeResponse&& from) noexcept
      : PublishHomeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishHomeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishHomeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishHomeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishHomeRequest) */ {
 public:
  inline PublishHomeRequest() : PublishHomeRequest(nullptr) {}
  ~PublishHomeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishHomeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishHomeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishHomeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishHomeRequest(const PublishHomeRequest& from) : PublishHomeRequest(nullptr, from) {}
  inline PublishHomeRequest(PublishHomeRequest&& from) noexcept
      : PublishHomeRequest(nullptr, std::move(from)) {}
  inline PublishHomeRequest& operator=(const PublishHomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishHomeRequest& operator=(PublishHomeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishHomeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishHomeRequest* internal_default_instance() {
    return reinterpret_cast<const PublishHomeRequest*>(
        &_PublishHomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PublishHomeRequest& a, PublishHomeRequest& b) { a.Swap(&b); }
  inline void Swap(PublishHomeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishHomeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishHomeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishHomeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishHomeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishHomeRequest& from) { PublishHomeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishHomeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishHomeRequest"; }

 protected:
  explicit PublishHomeRequest(::google::protobuf::Arena* arena);
  PublishHomeRequest(::google::protobuf::Arena* arena, const PublishHomeRequest& from);
  PublishHomeRequest(::google::protobuf::Arena* arena, PublishHomeRequest&& from) noexcept
      : PublishHomeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHomeFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Position home = 1;
  bool has_home() const;
  void clear_home() ;
  const ::mavsdk::rpc::telemetry_server::Position& home() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Position* release_home();
  ::mavsdk::rpc::telemetry_server::Position* mutable_home();
  void set_allocated_home(::mavsdk::rpc::telemetry_server::Position* value);
  void unsafe_arena_set_allocated_home(::mavsdk::rpc::telemetry_server::Position* value);
  ::mavsdk::rpc::telemetry_server::Position* unsafe_arena_release_home();

  private:
  const ::mavsdk::rpc::telemetry_server::Position& _internal_home() const;
  ::mavsdk::rpc::telemetry_server::Position* _internal_mutable_home();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishHomeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishHomeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Position* home_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishGroundTruthResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse) */ {
 public:
  inline PublishGroundTruthResponse() : PublishGroundTruthResponse(nullptr) {}
  ~PublishGroundTruthResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishGroundTruthResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishGroundTruthResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishGroundTruthResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishGroundTruthResponse(const PublishGroundTruthResponse& from) : PublishGroundTruthResponse(nullptr, from) {}
  inline PublishGroundTruthResponse(PublishGroundTruthResponse&& from) noexcept
      : PublishGroundTruthResponse(nullptr, std::move(from)) {}
  inline PublishGroundTruthResponse& operator=(const PublishGroundTruthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishGroundTruthResponse& operator=(PublishGroundTruthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishGroundTruthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishGroundTruthResponse* internal_default_instance() {
    return reinterpret_cast<const PublishGroundTruthResponse*>(
        &_PublishGroundTruthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(PublishGroundTruthResponse& a, PublishGroundTruthResponse& b) { a.Swap(&b); }
  inline void Swap(PublishGroundTruthResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishGroundTruthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishGroundTruthResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishGroundTruthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishGroundTruthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishGroundTruthResponse& from) { PublishGroundTruthResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishGroundTruthResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishGroundTruthResponse"; }

 protected:
  explicit PublishGroundTruthResponse(::google::protobuf::Arena* arena);
  PublishGroundTruthResponse(::google::protobuf::Arena* arena, const PublishGroundTruthResponse& from);
  PublishGroundTruthResponse(::google::protobuf::Arena* arena, PublishGroundTruthResponse&& from) noexcept
      : PublishGroundTruthResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishGroundTruthResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishGroundTruthRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest) */ {
 public:
  inline PublishGroundTruthRequest() : PublishGroundTruthRequest(nullptr) {}
  ~PublishGroundTruthRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishGroundTruthRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishGroundTruthRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishGroundTruthRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishGroundTruthRequest(const PublishGroundTruthRequest& from) : PublishGroundTruthRequest(nullptr, from) {}
  inline PublishGroundTruthRequest(PublishGroundTruthRequest&& from) noexcept
      : PublishGroundTruthRequest(nullptr, std::move(from)) {}
  inline PublishGroundTruthRequest& operator=(const PublishGroundTruthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishGroundTruthRequest& operator=(PublishGroundTruthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishGroundTruthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishGroundTruthRequest* internal_default_instance() {
    return reinterpret_cast<const PublishGroundTruthRequest*>(
        &_PublishGroundTruthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PublishGroundTruthRequest& a, PublishGroundTruthRequest& b) { a.Swap(&b); }
  inline void Swap(PublishGroundTruthRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishGroundTruthRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishGroundTruthRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishGroundTruthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishGroundTruthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishGroundTruthRequest& from) { PublishGroundTruthRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishGroundTruthRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishGroundTruthRequest"; }

 protected:
  explicit PublishGroundTruthRequest(::google::protobuf::Arena* arena);
  PublishGroundTruthRequest(::google::protobuf::Arena* arena, const PublishGroundTruthRequest& from);
  PublishGroundTruthRequest(::google::protobuf::Arena* arena, PublishGroundTruthRequest&& from) noexcept
      : PublishGroundTruthRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroundTruthFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
  bool has_ground_truth() const;
  void clear_ground_truth() ;
  const ::mavsdk::rpc::telemetry_server::GroundTruth& ground_truth() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::GroundTruth* release_ground_truth();
  ::mavsdk::rpc::telemetry_server::GroundTruth* mutable_ground_truth();
  void set_allocated_ground_truth(::mavsdk::rpc::telemetry_server::GroundTruth* value);
  void unsafe_arena_set_allocated_ground_truth(::mavsdk::rpc::telemetry_server::GroundTruth* value);
  ::mavsdk::rpc::telemetry_server::GroundTruth* unsafe_arena_release_ground_truth();

  private:
  const ::mavsdk::rpc::telemetry_server::GroundTruth& _internal_ground_truth() const;
  ::mavsdk::rpc::telemetry_server::GroundTruth* _internal_mutable_ground_truth();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishGroundTruthRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::GroundTruth* ground_truth_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishExtendedSysStateResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse) */ {
 public:
  inline PublishExtendedSysStateResponse() : PublishExtendedSysStateResponse(nullptr) {}
  ~PublishExtendedSysStateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishExtendedSysStateResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishExtendedSysStateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishExtendedSysStateResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishExtendedSysStateResponse(const PublishExtendedSysStateResponse& from) : PublishExtendedSysStateResponse(nullptr, from) {}
  inline PublishExtendedSysStateResponse(PublishExtendedSysStateResponse&& from) noexcept
      : PublishExtendedSysStateResponse(nullptr, std::move(from)) {}
  inline PublishExtendedSysStateResponse& operator=(const PublishExtendedSysStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishExtendedSysStateResponse& operator=(PublishExtendedSysStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishExtendedSysStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishExtendedSysStateResponse* internal_default_instance() {
    return reinterpret_cast<const PublishExtendedSysStateResponse*>(
        &_PublishExtendedSysStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(PublishExtendedSysStateResponse& a, PublishExtendedSysStateResponse& b) { a.Swap(&b); }
  inline void Swap(PublishExtendedSysStateResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishExtendedSysStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishExtendedSysStateResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishExtendedSysStateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishExtendedSysStateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishExtendedSysStateResponse& from) { PublishExtendedSysStateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishExtendedSysStateResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse"; }

 protected:
  explicit PublishExtendedSysStateResponse(::google::protobuf::Arena* arena);
  PublishExtendedSysStateResponse(::google::protobuf::Arena* arena, const PublishExtendedSysStateResponse& from);
  PublishExtendedSysStateResponse(::google::protobuf::Arena* arena, PublishExtendedSysStateResponse&& from) noexcept
      : PublishExtendedSysStateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishExtendedSysStateResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishDistanceSensorResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse) */ {
 public:
  inline PublishDistanceSensorResponse() : PublishDistanceSensorResponse(nullptr) {}
  ~PublishDistanceSensorResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishDistanceSensorResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishDistanceSensorResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishDistanceSensorResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishDistanceSensorResponse(const PublishDistanceSensorResponse& from) : PublishDistanceSensorResponse(nullptr, from) {}
  inline PublishDistanceSensorResponse(PublishDistanceSensorResponse&& from) noexcept
      : PublishDistanceSensorResponse(nullptr, std::move(from)) {}
  inline PublishDistanceSensorResponse& operator=(const PublishDistanceSensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishDistanceSensorResponse& operator=(PublishDistanceSensorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishDistanceSensorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishDistanceSensorResponse* internal_default_instance() {
    return reinterpret_cast<const PublishDistanceSensorResponse*>(
        &_PublishDistanceSensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(PublishDistanceSensorResponse& a, PublishDistanceSensorResponse& b) { a.Swap(&b); }
  inline void Swap(PublishDistanceSensorResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishDistanceSensorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishDistanceSensorResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishDistanceSensorResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishDistanceSensorResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishDistanceSensorResponse& from) { PublishDistanceSensorResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishDistanceSensorResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse"; }

 protected:
  explicit PublishDistanceSensorResponse(::google::protobuf::Arena* arena);
  PublishDistanceSensorResponse(::google::protobuf::Arena* arena, const PublishDistanceSensorResponse& from);
  PublishDistanceSensorResponse(::google::protobuf::Arena* arena, PublishDistanceSensorResponse&& from) noexcept
      : PublishDistanceSensorResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishDistanceSensorResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishDistanceSensorRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest) */ {
 public:
  inline PublishDistanceSensorRequest() : PublishDistanceSensorRequest(nullptr) {}
  ~PublishDistanceSensorRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishDistanceSensorRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishDistanceSensorRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishDistanceSensorRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishDistanceSensorRequest(const PublishDistanceSensorRequest& from) : PublishDistanceSensorRequest(nullptr, from) {}
  inline PublishDistanceSensorRequest(PublishDistanceSensorRequest&& from) noexcept
      : PublishDistanceSensorRequest(nullptr, std::move(from)) {}
  inline PublishDistanceSensorRequest& operator=(const PublishDistanceSensorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishDistanceSensorRequest& operator=(PublishDistanceSensorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishDistanceSensorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishDistanceSensorRequest* internal_default_instance() {
    return reinterpret_cast<const PublishDistanceSensorRequest*>(
        &_PublishDistanceSensorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(PublishDistanceSensorRequest& a, PublishDistanceSensorRequest& b) { a.Swap(&b); }
  inline void Swap(PublishDistanceSensorRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishDistanceSensorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishDistanceSensorRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishDistanceSensorRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishDistanceSensorRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishDistanceSensorRequest& from) { PublishDistanceSensorRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishDistanceSensorRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest"; }

 protected:
  explicit PublishDistanceSensorRequest(::google::protobuf::Arena* arena);
  PublishDistanceSensorRequest(::google::protobuf::Arena* arena, const PublishDistanceSensorRequest& from);
  PublishDistanceSensorRequest(::google::protobuf::Arena* arena, PublishDistanceSensorRequest&& from) noexcept
      : PublishDistanceSensorRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDistanceSensorFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.DistanceSensor distance_sensor = 1;
  bool has_distance_sensor() const;
  void clear_distance_sensor() ;
  const ::mavsdk::rpc::telemetry_server::DistanceSensor& distance_sensor() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::DistanceSensor* release_distance_sensor();
  ::mavsdk::rpc::telemetry_server::DistanceSensor* mutable_distance_sensor();
  void set_allocated_distance_sensor(::mavsdk::rpc::telemetry_server::DistanceSensor* value);
  void unsafe_arena_set_allocated_distance_sensor(::mavsdk::rpc::telemetry_server::DistanceSensor* value);
  ::mavsdk::rpc::telemetry_server::DistanceSensor* unsafe_arena_release_distance_sensor();

  private:
  const ::mavsdk::rpc::telemetry_server::DistanceSensor& _internal_distance_sensor() const;
  ::mavsdk::rpc::telemetry_server::DistanceSensor* _internal_mutable_distance_sensor();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishDistanceSensorRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::DistanceSensor* distance_sensor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishBatteryResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishBatteryResponse) */ {
 public:
  inline PublishBatteryResponse() : PublishBatteryResponse(nullptr) {}
  ~PublishBatteryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishBatteryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishBatteryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishBatteryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishBatteryResponse(const PublishBatteryResponse& from) : PublishBatteryResponse(nullptr, from) {}
  inline PublishBatteryResponse(PublishBatteryResponse&& from) noexcept
      : PublishBatteryResponse(nullptr, std::move(from)) {}
  inline PublishBatteryResponse& operator=(const PublishBatteryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishBatteryResponse& operator=(PublishBatteryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishBatteryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishBatteryResponse* internal_default_instance() {
    return reinterpret_cast<const PublishBatteryResponse*>(
        &_PublishBatteryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(PublishBatteryResponse& a, PublishBatteryResponse& b) { a.Swap(&b); }
  inline void Swap(PublishBatteryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishBatteryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishBatteryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishBatteryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishBatteryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishBatteryResponse& from) { PublishBatteryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishBatteryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishBatteryResponse"; }

 protected:
  explicit PublishBatteryResponse(::google::protobuf::Arena* arena);
  PublishBatteryResponse(::google::protobuf::Arena* arena, const PublishBatteryResponse& from);
  PublishBatteryResponse(::google::protobuf::Arena* arena, PublishBatteryResponse&& from) noexcept
      : PublishBatteryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishBatteryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishBatteryResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishBatteryRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishBatteryRequest) */ {
 public:
  inline PublishBatteryRequest() : PublishBatteryRequest(nullptr) {}
  ~PublishBatteryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishBatteryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishBatteryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishBatteryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishBatteryRequest(const PublishBatteryRequest& from) : PublishBatteryRequest(nullptr, from) {}
  inline PublishBatteryRequest(PublishBatteryRequest&& from) noexcept
      : PublishBatteryRequest(nullptr, std::move(from)) {}
  inline PublishBatteryRequest& operator=(const PublishBatteryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishBatteryRequest& operator=(PublishBatteryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishBatteryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishBatteryRequest* internal_default_instance() {
    return reinterpret_cast<const PublishBatteryRequest*>(
        &_PublishBatteryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PublishBatteryRequest& a, PublishBatteryRequest& b) { a.Swap(&b); }
  inline void Swap(PublishBatteryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishBatteryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishBatteryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishBatteryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishBatteryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishBatteryRequest& from) { PublishBatteryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishBatteryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishBatteryRequest"; }

 protected:
  explicit PublishBatteryRequest(::google::protobuf::Arena* arena);
  PublishBatteryRequest(::google::protobuf::Arena* arena, const PublishBatteryRequest& from);
  PublishBatteryRequest(::google::protobuf::Arena* arena, PublishBatteryRequest&& from) noexcept
      : PublishBatteryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBatteryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Battery battery = 1;
  bool has_battery() const;
  void clear_battery() ;
  const ::mavsdk::rpc::telemetry_server::Battery& battery() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Battery* release_battery();
  ::mavsdk::rpc::telemetry_server::Battery* mutable_battery();
  void set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value);
  void unsafe_arena_set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value);
  ::mavsdk::rpc::telemetry_server::Battery* unsafe_arena_release_battery();

  private:
  const ::mavsdk::rpc::telemetry_server::Battery& _internal_battery() const;
  ::mavsdk::rpc::telemetry_server::Battery* _internal_mutable_battery();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishBatteryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishBatteryRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Battery* battery_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishAttitudeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishAttitudeResponse) */ {
 public:
  inline PublishAttitudeResponse() : PublishAttitudeResponse(nullptr) {}
  ~PublishAttitudeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishAttitudeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishAttitudeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishAttitudeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishAttitudeResponse(const PublishAttitudeResponse& from) : PublishAttitudeResponse(nullptr, from) {}
  inline PublishAttitudeResponse(PublishAttitudeResponse&& from) noexcept
      : PublishAttitudeResponse(nullptr, std::move(from)) {}
  inline PublishAttitudeResponse& operator=(const PublishAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishAttitudeResponse& operator=(PublishAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const PublishAttitudeResponse*>(
        &_PublishAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(PublishAttitudeResponse& a, PublishAttitudeResponse& b) { a.Swap(&b); }
  inline void Swap(PublishAttitudeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishAttitudeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishAttitudeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishAttitudeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishAttitudeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishAttitudeResponse& from) { PublishAttitudeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishAttitudeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishAttitudeResponse"; }

 protected:
  explicit PublishAttitudeResponse(::google::protobuf::Arena* arena);
  PublishAttitudeResponse(::google::protobuf::Arena* arena, const PublishAttitudeResponse& from);
  PublishAttitudeResponse(::google::protobuf::Arena* arena, PublishAttitudeResponse&& from) noexcept
      : PublishAttitudeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTelemetryServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
  bool has_telemetry_server_result() const;
  void clear_telemetry_server_result() ;
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& telemetry_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::TelemetryServerResult* release_telemetry_server_result();
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* mutable_telemetry_server_result();
  void set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  void unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value);
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* unsafe_arena_release_telemetry_server_result();

  private:
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& _internal_telemetry_server_result() const;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _internal_mutable_telemetry_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishAttitudeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishAttitudeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::TelemetryServerResult* telemetry_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishAttitudeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishAttitudeRequest) */ {
 public:
  inline PublishAttitudeRequest() : PublishAttitudeRequest(nullptr) {}
  ~PublishAttitudeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishAttitudeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishAttitudeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishAttitudeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishAttitudeRequest(const PublishAttitudeRequest& from) : PublishAttitudeRequest(nullptr, from) {}
  inline PublishAttitudeRequest(PublishAttitudeRequest&& from) noexcept
      : PublishAttitudeRequest(nullptr, std::move(from)) {}
  inline PublishAttitudeRequest& operator=(const PublishAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishAttitudeRequest& operator=(PublishAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const PublishAttitudeRequest*>(
        &_PublishAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(PublishAttitudeRequest& a, PublishAttitudeRequest& b) { a.Swap(&b); }
  inline void Swap(PublishAttitudeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishAttitudeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishAttitudeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishAttitudeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishAttitudeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishAttitudeRequest& from) { PublishAttitudeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishAttitudeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishAttitudeRequest"; }

 protected:
  explicit PublishAttitudeRequest(::google::protobuf::Arena* arena);
  PublishAttitudeRequest(::google::protobuf::Arena* arena, const PublishAttitudeRequest& from);
  PublishAttitudeRequest(::google::protobuf::Arena* arena, PublishAttitudeRequest&& from) noexcept
      : PublishAttitudeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAngleFieldNumber = 1,
    kAngularVelocityFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.EulerAngle angle = 1;
  bool has_angle() const;
  void clear_angle() ;
  const ::mavsdk::rpc::telemetry_server::EulerAngle& angle() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::EulerAngle* release_angle();
  ::mavsdk::rpc::telemetry_server::EulerAngle* mutable_angle();
  void set_allocated_angle(::mavsdk::rpc::telemetry_server::EulerAngle* value);
  void unsafe_arena_set_allocated_angle(::mavsdk::rpc::telemetry_server::EulerAngle* value);
  ::mavsdk::rpc::telemetry_server::EulerAngle* unsafe_arena_release_angle();

  private:
  const ::mavsdk::rpc::telemetry_server::EulerAngle& _internal_angle() const;
  ::mavsdk::rpc::telemetry_server::EulerAngle* _internal_mutable_angle();

  public:
  // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity = 2;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& angular_velocity() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AngularVelocityBody* release_angular_velocity();
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* mutable_angular_velocity();
  void set_allocated_angular_velocity(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value);
  void unsafe_arena_set_allocated_angular_velocity(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value);
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* unsafe_arena_release_angular_velocity();

  private:
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& _internal_angular_velocity() const;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* _internal_mutable_angular_velocity();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishAttitudeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishAttitudeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::EulerAngle* angle_;
    ::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PositionVelocityNed final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PositionVelocityNed) */ {
 public:
  inline PositionVelocityNed() : PositionVelocityNed(nullptr) {}
  ~PositionVelocityNed() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PositionVelocityNed* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PositionVelocityNed));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionVelocityNed(
      ::google::protobuf::internal::ConstantInitialized);

  inline PositionVelocityNed(const PositionVelocityNed& from) : PositionVelocityNed(nullptr, from) {}
  inline PositionVelocityNed(PositionVelocityNed&& from) noexcept
      : PositionVelocityNed(nullptr, std::move(from)) {}
  inline PositionVelocityNed& operator=(const PositionVelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionVelocityNed& operator=(PositionVelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionVelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionVelocityNed* internal_default_instance() {
    return reinterpret_cast<const PositionVelocityNed*>(
        &_PositionVelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 57;
  friend void swap(PositionVelocityNed& a, PositionVelocityNed& b) { a.Swap(&b); }
  inline void Swap(PositionVelocityNed* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionVelocityNed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionVelocityNed* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PositionVelocityNed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionVelocityNed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PositionVelocityNed& from) { PositionVelocityNed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PositionVelocityNed* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PositionVelocityNed"; }

 protected:
  explicit PositionVelocityNed(::google::protobuf::Arena* arena);
  PositionVelocityNed(::google::protobuf::Arena* arena, const PositionVelocityNed& from);
  PositionVelocityNed(::google::protobuf::Arena* arena, PositionVelocityNed&& from) noexcept
      : PositionVelocityNed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
  };
  // .mavsdk.rpc.telemetry_server.PositionNed position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::mavsdk::rpc::telemetry_server::PositionNed& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::PositionNed* release_position();
  ::mavsdk::rpc::telemetry_server::PositionNed* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry_server::PositionNed* value);
  void unsafe_arena_set_allocated_position(::mavsdk::rpc::telemetry_server::PositionNed* value);
  ::mavsdk::rpc::telemetry_server::PositionNed* unsafe_arena_release_position();

  private:
  const ::mavsdk::rpc::telemetry_server::PositionNed& _internal_position() const;
  ::mavsdk::rpc::telemetry_server::PositionNed* _internal_mutable_position();

  public:
  // .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::mavsdk::rpc::telemetry_server::VelocityNed& velocity() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::VelocityNed* release_velocity();
  ::mavsdk::rpc::telemetry_server::VelocityNed* mutable_velocity();
  void set_allocated_velocity(::mavsdk::rpc::telemetry_server::VelocityNed* value);
  void unsafe_arena_set_allocated_velocity(::mavsdk::rpc::telemetry_server::VelocityNed* value);
  ::mavsdk::rpc::telemetry_server::VelocityNed* unsafe_arena_release_velocity();

  private:
  const ::mavsdk::rpc::telemetry_server::VelocityNed& _internal_velocity() const;
  ::mavsdk::rpc::telemetry_server::VelocityNed* _internal_mutable_velocity();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PositionVelocityNed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PositionVelocityNed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::PositionNed* position_;
    ::mavsdk::rpc::telemetry_server::VelocityNed* velocity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Odometry final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Odometry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Odometry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Odometry(
      ::google::protobuf::internal::ConstantInitialized);

  inline Odometry(const Odometry& from) : Odometry(nullptr, from) {}
  inline Odometry(Odometry&& from) noexcept
      : Odometry(nullptr, std::move(from)) {}
  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
        &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 52;
  friend void swap(Odometry& a, Odometry& b) { a.Swap(&b); }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Odometry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Odometry& from) { Odometry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Odometry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Odometry"; }

 protected:
  explicit Odometry(::google::protobuf::Arena* arena);
  Odometry(::google::protobuf::Arena* arena, const Odometry& from);
  Odometry(::google::protobuf::Arena* arena, Odometry&& from) noexcept
      : Odometry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MavFrame = Odometry_MavFrame;
  static constexpr MavFrame MAV_FRAME_UNDEF = Odometry_MavFrame_MAV_FRAME_UNDEF;
  static constexpr MavFrame MAV_FRAME_BODY_NED = Odometry_MavFrame_MAV_FRAME_BODY_NED;
  static constexpr MavFrame MAV_FRAME_VISION_NED = Odometry_MavFrame_MAV_FRAME_VISION_NED;
  static constexpr MavFrame MAV_FRAME_ESTIM_NED = Odometry_MavFrame_MAV_FRAME_ESTIM_NED;
  static inline bool MavFrame_IsValid(int value) {
    return Odometry_MavFrame_IsValid(value);
  }
  static constexpr MavFrame MavFrame_MIN = Odometry_MavFrame_MavFrame_MIN;
  static constexpr MavFrame MavFrame_MAX = Odometry_MavFrame_MavFrame_MAX;
  static constexpr int MavFrame_ARRAYSIZE = Odometry_MavFrame_MavFrame_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MavFrame_descriptor() {
    return Odometry_MavFrame_descriptor();
  }
  template <typename T>
  static inline const std::string& MavFrame_Name(T value) {
    return Odometry_MavFrame_Name(value);
  }
  static inline bool MavFrame_Parse(absl::string_view name, MavFrame* value) {
    return Odometry_MavFrame_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kPositionBodyFieldNumber = 4,
    kQFieldNumber = 5,
    kVelocityBodyFieldNumber = 6,
    kAngularVelocityBodyFieldNumber = 7,
    kPoseCovarianceFieldNumber = 8,
    kVelocityCovarianceFieldNumber = 9,
    kTimeUsecFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kChildFrameIdFieldNumber = 3,
  };
  // .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
  bool has_position_body() const;
  void clear_position_body() ;
  const ::mavsdk::rpc::telemetry_server::PositionBody& position_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::PositionBody* release_position_body();
  ::mavsdk::rpc::telemetry_server::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::telemetry_server::PositionBody* value);
  void unsafe_arena_set_allocated_position_body(::mavsdk::rpc::telemetry_server::PositionBody* value);
  ::mavsdk::rpc::telemetry_server::PositionBody* unsafe_arena_release_position_body();

  private:
  const ::mavsdk::rpc::telemetry_server::PositionBody& _internal_position_body() const;
  ::mavsdk::rpc::telemetry_server::PositionBody* _internal_mutable_position_body();

  public:
  // .mavsdk.rpc.telemetry_server.Quaternion q = 5;
  bool has_q() const;
  void clear_q() ;
  const ::mavsdk::rpc::telemetry_server::Quaternion& q() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Quaternion* release_q();
  ::mavsdk::rpc::telemetry_server::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::telemetry_server::Quaternion* value);
  void unsafe_arena_set_allocated_q(::mavsdk::rpc::telemetry_server::Quaternion* value);
  ::mavsdk::rpc::telemetry_server::Quaternion* unsafe_arena_release_q();

  private:
  const ::mavsdk::rpc::telemetry_server::Quaternion& _internal_q() const;
  ::mavsdk::rpc::telemetry_server::Quaternion* _internal_mutable_q();

  public:
  // .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
  bool has_velocity_body() const;
  void clear_velocity_body() ;
  const ::mavsdk::rpc::telemetry_server::VelocityBody& velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::VelocityBody* release_velocity_body();
  ::mavsdk::rpc::telemetry_server::VelocityBody* mutable_velocity_body();
  void set_allocated_velocity_body(::mavsdk::rpc::telemetry_server::VelocityBody* value);
  void unsafe_arena_set_allocated_velocity_body(::mavsdk::rpc::telemetry_server::VelocityBody* value);
  ::mavsdk::rpc::telemetry_server::VelocityBody* unsafe_arena_release_velocity_body();

  private:
  const ::mavsdk::rpc::telemetry_server::VelocityBody& _internal_velocity_body() const;
  ::mavsdk::rpc::telemetry_server::VelocityBody* _internal_mutable_velocity_body();

  public:
  // .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
  bool has_angular_velocity_body() const;
  void clear_angular_velocity_body() ;
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& angular_velocity_body() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AngularVelocityBody* release_angular_velocity_body();
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* mutable_angular_velocity_body();
  void set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value);
  void unsafe_arena_set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value);
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* unsafe_arena_release_angular_velocity_body();

  private:
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& _internal_angular_velocity_body() const;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* _internal_mutable_angular_velocity_body();

  public:
  // .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
  bool has_pose_covariance() const;
  void clear_pose_covariance() ;
  const ::mavsdk::rpc::telemetry_server::Covariance& pose_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Covariance* release_pose_covariance();
  ::mavsdk::rpc::telemetry_server::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::telemetry_server::Covariance* value);
  void unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::telemetry_server::Covariance* value);
  ::mavsdk::rpc::telemetry_server::Covariance* unsafe_arena_release_pose_covariance();

  private:
  const ::mavsdk::rpc::telemetry_server::Covariance& _internal_pose_covariance() const;
  ::mavsdk::rpc::telemetry_server::Covariance* _internal_mutable_pose_covariance();

  public:
  // .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
  bool has_velocity_covariance() const;
  void clear_velocity_covariance() ;
  const ::mavsdk::rpc::telemetry_server::Covariance& velocity_covariance() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Covariance* release_velocity_covariance();
  ::mavsdk::rpc::telemetry_server::Covariance* mutable_velocity_covariance();
  void set_allocated_velocity_covariance(::mavsdk::rpc::telemetry_server::Covariance* value);
  void unsafe_arena_set_allocated_velocity_covariance(::mavsdk::rpc::telemetry_server::Covariance* value);
  ::mavsdk::rpc::telemetry_server::Covariance* unsafe_arena_release_velocity_covariance();

  private:
  const ::mavsdk::rpc::telemetry_server::Covariance& _internal_velocity_covariance() const;
  ::mavsdk::rpc::telemetry_server::Covariance* _internal_mutable_velocity_covariance();

  public:
  // uint64 time_usec = 1;
  void clear_time_usec() ;
  ::uint64_t time_usec() const;
  void set_time_usec(::uint64_t value);

  private:
  ::uint64_t _internal_time_usec() const;
  void _internal_set_time_usec(::uint64_t value);

  public:
  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
  void clear_frame_id() ;
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame frame_id() const;
  void set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);

  private:
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame _internal_frame_id() const;
  void _internal_set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);

  public:
  // .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
  void clear_child_frame_id() ;
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame child_frame_id() const;
  void set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);

  private:
  ::mavsdk::rpc::telemetry_server::Odometry_MavFrame _internal_child_frame_id() const;
  void _internal_set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Odometry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Odometry& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::PositionBody* position_body_;
    ::mavsdk::rpc::telemetry_server::Quaternion* q_;
    ::mavsdk::rpc::telemetry_server::VelocityBody* velocity_body_;
    ::mavsdk::rpc::telemetry_server::AngularVelocityBody* angular_velocity_body_;
    ::mavsdk::rpc::telemetry_server::Covariance* pose_covariance_;
    ::mavsdk::rpc::telemetry_server::Covariance* velocity_covariance_;
    ::uint64_t time_usec_;
    int frame_id_;
    int child_frame_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Imu final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  ~Imu() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Imu* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Imu));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Imu(
      ::google::protobuf::internal::ConstantInitialized);

  inline Imu(const Imu& from) : Imu(nullptr, from) {}
  inline Imu(Imu&& from) noexcept
      : Imu(nullptr, std::move(from)) {}
  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
        &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 63;
  friend void swap(Imu& a, Imu& b) { a.Swap(&b); }
  inline void Swap(Imu* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Imu* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Imu>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Imu& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Imu& from) { Imu::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Imu* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.Imu"; }

 protected:
  explicit Imu(::google::protobuf::Arena* arena);
  Imu(::google::protobuf::Arena* arena, const Imu& from);
  Imu(::google::protobuf::Arena* arena, Imu&& from) noexcept
      : Imu(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccelerationFrdFieldNumber = 1,
    kAngularVelocityFrdFieldNumber = 2,
    kMagneticFieldFrdFieldNumber = 3,
    kTimestampUsFieldNumber = 5,
    kTemperatureDegcFieldNumber = 4,
  };
  // .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
  bool has_acceleration_frd() const;
  void clear_acceleration_frd() ;
  const ::mavsdk::rpc::telemetry_server::AccelerationFrd& acceleration_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AccelerationFrd* release_acceleration_frd();
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* mutable_acceleration_frd();
  void set_allocated_acceleration_frd(::mavsdk::rpc::telemetry_server::AccelerationFrd* value);
  void unsafe_arena_set_allocated_acceleration_frd(::mavsdk::rpc::telemetry_server::AccelerationFrd* value);
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* unsafe_arena_release_acceleration_frd();

  private:
  const ::mavsdk::rpc::telemetry_server::AccelerationFrd& _internal_acceleration_frd() const;
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* _internal_mutable_acceleration_frd();

  public:
  // .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
  bool has_angular_velocity_frd() const;
  void clear_angular_velocity_frd() ;
  const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& angular_velocity_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* release_angular_velocity_frd();
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* mutable_angular_velocity_frd();
  void set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry_server::AngularVelocityFrd* value);
  void unsafe_arena_set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry_server::AngularVelocityFrd* value);
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* unsafe_arena_release_angular_velocity_frd();

  private:
  const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& _internal_angular_velocity_frd() const;
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* _internal_mutable_angular_velocity_frd();

  public:
  // .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
  bool has_magnetic_field_frd() const;
  void clear_magnetic_field_frd() ;
  const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& magnetic_field_frd() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* release_magnetic_field_frd();
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* mutable_magnetic_field_frd();
  void set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry_server::MagneticFieldFrd* value);
  void unsafe_arena_set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry_server::MagneticFieldFrd* value);
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* unsafe_arena_release_magnetic_field_frd();

  private:
  const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& _internal_magnetic_field_frd() const;
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* _internal_mutable_magnetic_field_frd();

  public:
  // uint64 timestamp_us = 5;
  void clear_timestamp_us() ;
  ::uint64_t timestamp_us() const;
  void set_timestamp_us(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::uint64_t value);

  public:
  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_temperature_degc() ;
  float temperature_degc() const;
  void set_temperature_degc(float value);

  private:
  float _internal_temperature_degc() const;
  void _internal_set_temperature_degc(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.Imu)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Imu& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::AccelerationFrd* acceleration_frd_;
    ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* angular_velocity_frd_;
    ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* magnetic_field_frd_;
    ::uint64_t timestamp_us_;
    float temperature_degc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishScaledImuRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishScaledImuRequest) */ {
 public:
  inline PublishScaledImuRequest() : PublishScaledImuRequest(nullptr) {}
  ~PublishScaledImuRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishScaledImuRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishScaledImuRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishScaledImuRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishScaledImuRequest(const PublishScaledImuRequest& from) : PublishScaledImuRequest(nullptr, from) {}
  inline PublishScaledImuRequest(PublishScaledImuRequest&& from) noexcept
      : PublishScaledImuRequest(nullptr, std::move(from)) {}
  inline PublishScaledImuRequest& operator=(const PublishScaledImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishScaledImuRequest& operator=(PublishScaledImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishScaledImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishScaledImuRequest* internal_default_instance() {
    return reinterpret_cast<const PublishScaledImuRequest*>(
        &_PublishScaledImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(PublishScaledImuRequest& a, PublishScaledImuRequest& b) { a.Swap(&b); }
  inline void Swap(PublishScaledImuRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishScaledImuRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishScaledImuRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishScaledImuRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishScaledImuRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishScaledImuRequest& from) { PublishScaledImuRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishScaledImuRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishScaledImuRequest"; }

 protected:
  explicit PublishScaledImuRequest(::google::protobuf::Arena* arena);
  PublishScaledImuRequest(::google::protobuf::Arena* arena, const PublishScaledImuRequest& from);
  PublishScaledImuRequest(::google::protobuf::Arena* arena, PublishScaledImuRequest&& from) noexcept
      : PublishScaledImuRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  bool has_imu() const;
  void clear_imu() ;
  const ::mavsdk::rpc::telemetry_server::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Imu* release_imu();
  ::mavsdk::rpc::telemetry_server::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value);
  void unsafe_arena_set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value);
  ::mavsdk::rpc::telemetry_server::Imu* unsafe_arena_release_imu();

  private:
  const ::mavsdk::rpc::telemetry_server::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry_server::Imu* _internal_mutable_imu();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishScaledImuRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishScaledImuRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Imu* imu_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishRawImuRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishRawImuRequest) */ {
 public:
  inline PublishRawImuRequest() : PublishRawImuRequest(nullptr) {}
  ~PublishRawImuRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishRawImuRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishRawImuRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRawImuRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishRawImuRequest(const PublishRawImuRequest& from) : PublishRawImuRequest(nullptr, from) {}
  inline PublishRawImuRequest(PublishRawImuRequest&& from) noexcept
      : PublishRawImuRequest(nullptr, std::move(from)) {}
  inline PublishRawImuRequest& operator=(const PublishRawImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRawImuRequest& operator=(PublishRawImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRawImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRawImuRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRawImuRequest*>(
        &_PublishRawImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(PublishRawImuRequest& a, PublishRawImuRequest& b) { a.Swap(&b); }
  inline void Swap(PublishRawImuRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRawImuRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRawImuRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishRawImuRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRawImuRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishRawImuRequest& from) { PublishRawImuRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishRawImuRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishRawImuRequest"; }

 protected:
  explicit PublishRawImuRequest(::google::protobuf::Arena* arena);
  PublishRawImuRequest(::google::protobuf::Arena* arena, const PublishRawImuRequest& from);
  PublishRawImuRequest(::google::protobuf::Arena* arena, PublishRawImuRequest&& from) noexcept
      : PublishRawImuRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  bool has_imu() const;
  void clear_imu() ;
  const ::mavsdk::rpc::telemetry_server::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Imu* release_imu();
  ::mavsdk::rpc::telemetry_server::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value);
  void unsafe_arena_set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value);
  ::mavsdk::rpc::telemetry_server::Imu* unsafe_arena_release_imu();

  private:
  const ::mavsdk::rpc::telemetry_server::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry_server::Imu* _internal_mutable_imu();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishRawImuRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishRawImuRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Imu* imu_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishPositionVelocityNedRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest) */ {
 public:
  inline PublishPositionVelocityNedRequest() : PublishPositionVelocityNedRequest(nullptr) {}
  ~PublishPositionVelocityNedRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishPositionVelocityNedRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishPositionVelocityNedRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishPositionVelocityNedRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishPositionVelocityNedRequest(const PublishPositionVelocityNedRequest& from) : PublishPositionVelocityNedRequest(nullptr, from) {}
  inline PublishPositionVelocityNedRequest(PublishPositionVelocityNedRequest&& from) noexcept
      : PublishPositionVelocityNedRequest(nullptr, std::move(from)) {}
  inline PublishPositionVelocityNedRequest& operator=(const PublishPositionVelocityNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishPositionVelocityNedRequest& operator=(PublishPositionVelocityNedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishPositionVelocityNedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishPositionVelocityNedRequest* internal_default_instance() {
    return reinterpret_cast<const PublishPositionVelocityNedRequest*>(
        &_PublishPositionVelocityNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(PublishPositionVelocityNedRequest& a, PublishPositionVelocityNedRequest& b) { a.Swap(&b); }
  inline void Swap(PublishPositionVelocityNedRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishPositionVelocityNedRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishPositionVelocityNedRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishPositionVelocityNedRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishPositionVelocityNedRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishPositionVelocityNedRequest& from) { PublishPositionVelocityNedRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishPositionVelocityNedRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest"; }

 protected:
  explicit PublishPositionVelocityNedRequest(::google::protobuf::Arena* arena);
  PublishPositionVelocityNedRequest(::google::protobuf::Arena* arena, const PublishPositionVelocityNedRequest& from);
  PublishPositionVelocityNedRequest(::google::protobuf::Arena* arena, PublishPositionVelocityNedRequest&& from) noexcept
      : PublishPositionVelocityNedRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionVelocityNedFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
  bool has_position_velocity_ned() const;
  void clear_position_velocity_ned() ;
  const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& position_velocity_ned() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::PositionVelocityNed* release_position_velocity_ned();
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* mutable_position_velocity_ned();
  void set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry_server::PositionVelocityNed* value);
  void unsafe_arena_set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry_server::PositionVelocityNed* value);
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* unsafe_arena_release_position_velocity_ned();

  private:
  const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& _internal_position_velocity_ned() const;
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* _internal_mutable_position_velocity_ned();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishPositionVelocityNedRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::PositionVelocityNed* position_velocity_ned_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishOdometryRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishOdometryRequest) */ {
 public:
  inline PublishOdometryRequest() : PublishOdometryRequest(nullptr) {}
  ~PublishOdometryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishOdometryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishOdometryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishOdometryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishOdometryRequest(const PublishOdometryRequest& from) : PublishOdometryRequest(nullptr, from) {}
  inline PublishOdometryRequest(PublishOdometryRequest&& from) noexcept
      : PublishOdometryRequest(nullptr, std::move(from)) {}
  inline PublishOdometryRequest& operator=(const PublishOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishOdometryRequest& operator=(PublishOdometryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishOdometryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const PublishOdometryRequest*>(
        &_PublishOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(PublishOdometryRequest& a, PublishOdometryRequest& b) { a.Swap(&b); }
  inline void Swap(PublishOdometryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishOdometryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishOdometryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishOdometryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishOdometryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishOdometryRequest& from) { PublishOdometryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishOdometryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishOdometryRequest"; }

 protected:
  explicit PublishOdometryRequest(::google::protobuf::Arena* arena);
  PublishOdometryRequest(::google::protobuf::Arena* arena, const PublishOdometryRequest& from);
  PublishOdometryRequest(::google::protobuf::Arena* arena, PublishOdometryRequest&& from) noexcept
      : PublishOdometryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOdometryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
  bool has_odometry() const;
  void clear_odometry() ;
  const ::mavsdk::rpc::telemetry_server::Odometry& odometry() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Odometry* release_odometry();
  ::mavsdk::rpc::telemetry_server::Odometry* mutable_odometry();
  void set_allocated_odometry(::mavsdk::rpc::telemetry_server::Odometry* value);
  void unsafe_arena_set_allocated_odometry(::mavsdk::rpc::telemetry_server::Odometry* value);
  ::mavsdk::rpc::telemetry_server::Odometry* unsafe_arena_release_odometry();

  private:
  const ::mavsdk::rpc::telemetry_server::Odometry& _internal_odometry() const;
  ::mavsdk::rpc::telemetry_server::Odometry* _internal_mutable_odometry();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishOdometryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishOdometryRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Odometry* odometry_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishImuRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry_server.PublishImuRequest) */ {
 public:
  inline PublishImuRequest() : PublishImuRequest(nullptr) {}
  ~PublishImuRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishImuRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishImuRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishImuRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishImuRequest(const PublishImuRequest& from) : PublishImuRequest(nullptr, from) {}
  inline PublishImuRequest(PublishImuRequest&& from) noexcept
      : PublishImuRequest(nullptr, std::move(from)) {}
  inline PublishImuRequest& operator=(const PublishImuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishImuRequest& operator=(PublishImuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishImuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishImuRequest* internal_default_instance() {
    return reinterpret_cast<const PublishImuRequest*>(
        &_PublishImuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(PublishImuRequest& a, PublishImuRequest& b) { a.Swap(&b); }
  inline void Swap(PublishImuRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishImuRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishImuRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishImuRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishImuRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishImuRequest& from) { PublishImuRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishImuRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.telemetry_server.PublishImuRequest"; }

 protected:
  explicit PublishImuRequest(::google::protobuf::Arena* arena);
  PublishImuRequest(::google::protobuf::Arena* arena, const PublishImuRequest& from);
  PublishImuRequest(::google::protobuf::Arena* arena, PublishImuRequest&& from) noexcept
      : PublishImuRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImuFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry_server.Imu imu = 1;
  bool has_imu() const;
  void clear_imu() ;
  const ::mavsdk::rpc::telemetry_server::Imu& imu() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::telemetry_server::Imu* release_imu();
  ::mavsdk::rpc::telemetry_server::Imu* mutable_imu();
  void set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value);
  void unsafe_arena_set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value);
  ::mavsdk::rpc::telemetry_server::Imu* unsafe_arena_release_imu();

  private:
  const ::mavsdk::rpc::telemetry_server::Imu& _internal_imu() const;
  ::mavsdk::rpc::telemetry_server::Imu* _internal_mutable_imu();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry_server.PublishImuRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishImuRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::telemetry_server::Imu* imu_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_telemetry_5fserver_2ftelemetry_5fserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PublishPositionRequest

// .mavsdk.rpc.telemetry_server.Position position = 1;
inline bool PublishPositionRequest::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void PublishPositionRequest::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishPositionRequest::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Position&>(::mavsdk::rpc::telemetry_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishPositionRequest::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
  return _internal_position();
}
inline void PublishPositionRequest::unsafe_arena_set_allocated_position(::mavsdk::rpc::telemetry_server::Position* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Position>(GetArena());
    _impl_.position_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Position*>(p);
  }
  return _impl_.position_;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishPositionRequest::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
  return _msg;
}
inline void PublishPositionRequest::set_allocated_position(::mavsdk::rpc::telemetry_server::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.position)
}

// .mavsdk.rpc.telemetry_server.VelocityNed velocity_ned = 2;
inline bool PublishPositionRequest::has_velocity_ned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ned_ != nullptr);
  return value;
}
inline void PublishPositionRequest::clear_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ned_ != nullptr) _impl_.velocity_ned_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PublishPositionRequest::_internal_velocity_ned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::VelocityNed* p = _impl_.velocity_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::VelocityNed&>(::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PublishPositionRequest::velocity_ned() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
  return _internal_velocity_ned();
}
inline void PublishPositionRequest::unsafe_arena_set_allocated_velocity_ned(::mavsdk::rpc::telemetry_server::VelocityNed* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_ned_);
  }
  _impl_.velocity_ned_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityNed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::release_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::VelocityNed* released = _impl_.velocity_ned_;
  _impl_.velocity_ned_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::unsafe_arena_release_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::VelocityNed* temp = _impl_.velocity_ned_;
  _impl_.velocity_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::_internal_mutable_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ned_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::VelocityNed>(GetArena());
    _impl_.velocity_ned_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityNed*>(p);
  }
  return _impl_.velocity_ned_;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PublishPositionRequest::mutable_velocity_ned() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::telemetry_server::VelocityNed* _msg = _internal_mutable_velocity_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
  return _msg;
}
inline void PublishPositionRequest::set_allocated_velocity_ned(::mavsdk::rpc::telemetry_server::VelocityNed* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_ned_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.velocity_ned_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityNed*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned)
}

// .mavsdk.rpc.telemetry_server.Heading heading = 3;
inline bool PublishPositionRequest::has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.heading_ != nullptr);
  return value;
}
inline void PublishPositionRequest::clear_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.heading_ != nullptr) _impl_.heading_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::telemetry_server::Heading& PublishPositionRequest::_internal_heading() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Heading* p = _impl_.heading_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Heading&>(::mavsdk::rpc::telemetry_server::_Heading_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Heading& PublishPositionRequest::heading() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
  return _internal_heading();
}
inline void PublishPositionRequest::unsafe_arena_set_allocated_heading(::mavsdk::rpc::telemetry_server::Heading* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.heading_);
  }
  _impl_.heading_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Heading*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::release_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::telemetry_server::Heading* released = _impl_.heading_;
  _impl_.heading_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::unsafe_arena_release_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::telemetry_server::Heading* temp = _impl_.heading_;
  _impl_.heading_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::_internal_mutable_heading() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.heading_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Heading>(GetArena());
    _impl_.heading_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Heading*>(p);
  }
  return _impl_.heading_;
}
inline ::mavsdk::rpc::telemetry_server::Heading* PublishPositionRequest::mutable_heading() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::mavsdk::rpc::telemetry_server::Heading* _msg = _internal_mutable_heading();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
  return _msg;
}
inline void PublishPositionRequest::set_allocated_heading(::mavsdk::rpc::telemetry_server::Heading* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.heading_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.heading_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Heading*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionRequest.heading)
}

// -------------------------------------------------------------------

// PublishHomeRequest

// .mavsdk.rpc.telemetry_server.Position home = 1;
inline bool PublishHomeRequest::has_home() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.home_ != nullptr);
  return value;
}
inline void PublishHomeRequest::clear_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.home_ != nullptr) _impl_.home_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishHomeRequest::_internal_home() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Position* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Position&>(::mavsdk::rpc::telemetry_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Position& PublishHomeRequest::home() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
  return _internal_home();
}
inline void PublishHomeRequest::unsafe_arena_set_allocated_home(::mavsdk::rpc::telemetry_server::Position* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::release_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Position* released = _impl_.home_;
  _impl_.home_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::unsafe_arena_release_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Position* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::_internal_mutable_home() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.home_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Position>(GetArena());
    _impl_.home_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Position*>(p);
  }
  return _impl_.home_;
}
inline ::mavsdk::rpc::telemetry_server::Position* PublishHomeRequest::mutable_home() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Position* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
  return _msg;
}
inline void PublishHomeRequest::set_allocated_home(::mavsdk::rpc::telemetry_server::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.home_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.home_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeRequest.home)
}

// -------------------------------------------------------------------

// PublishSysStatusRequest

// .mavsdk.rpc.telemetry_server.Battery battery = 1;
inline bool PublishSysStatusRequest::has_battery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.battery_ != nullptr);
  return value;
}
inline void PublishSysStatusRequest::clear_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.battery_ != nullptr) _impl_.battery_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishSysStatusRequest::_internal_battery() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Battery* p = _impl_.battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Battery&>(::mavsdk::rpc::telemetry_server::_Battery_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishSysStatusRequest::battery() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
  return _internal_battery();
}
inline void PublishSysStatusRequest::unsafe_arena_set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.battery_);
  }
  _impl_.battery_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Battery*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::release_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Battery* released = _impl_.battery_;
  _impl_.battery_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::unsafe_arena_release_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Battery* temp = _impl_.battery_;
  _impl_.battery_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::_internal_mutable_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.battery_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Battery>(GetArena());
    _impl_.battery_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Battery*>(p);
  }
  return _impl_.battery_;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishSysStatusRequest::mutable_battery() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
  return _msg;
}
inline void PublishSysStatusRequest::set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.battery_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.battery_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Battery*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery)
}

// bool rc_receiver_status = 2;
inline void PublishSysStatusRequest::clear_rc_receiver_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rc_receiver_status_ = false;
}
inline bool PublishSysStatusRequest::rc_receiver_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.rc_receiver_status)
  return _internal_rc_receiver_status();
}
inline void PublishSysStatusRequest::set_rc_receiver_status(bool value) {
  _internal_set_rc_receiver_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.rc_receiver_status)
}
inline bool PublishSysStatusRequest::_internal_rc_receiver_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rc_receiver_status_;
}
inline void PublishSysStatusRequest::_internal_set_rc_receiver_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rc_receiver_status_ = value;
}

// bool gyro_status = 3;
inline void PublishSysStatusRequest::clear_gyro_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gyro_status_ = false;
}
inline bool PublishSysStatusRequest::gyro_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gyro_status)
  return _internal_gyro_status();
}
inline void PublishSysStatusRequest::set_gyro_status(bool value) {
  _internal_set_gyro_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gyro_status)
}
inline bool PublishSysStatusRequest::_internal_gyro_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gyro_status_;
}
inline void PublishSysStatusRequest::_internal_set_gyro_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gyro_status_ = value;
}

// bool accel_status = 4;
inline void PublishSysStatusRequest::clear_accel_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_status_ = false;
}
inline bool PublishSysStatusRequest::accel_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.accel_status)
  return _internal_accel_status();
}
inline void PublishSysStatusRequest::set_accel_status(bool value) {
  _internal_set_accel_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.accel_status)
}
inline bool PublishSysStatusRequest::_internal_accel_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accel_status_;
}
inline void PublishSysStatusRequest::_internal_set_accel_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accel_status_ = value;
}

// bool mag_status = 5;
inline void PublishSysStatusRequest::clear_mag_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mag_status_ = false;
}
inline bool PublishSysStatusRequest::mag_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.mag_status)
  return _internal_mag_status();
}
inline void PublishSysStatusRequest::set_mag_status(bool value) {
  _internal_set_mag_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.mag_status)
}
inline bool PublishSysStatusRequest::_internal_mag_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mag_status_;
}
inline void PublishSysStatusRequest::_internal_set_mag_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mag_status_ = value;
}

// bool gps_status = 6;
inline void PublishSysStatusRequest::clear_gps_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_status_ = false;
}
inline bool PublishSysStatusRequest::gps_status() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gps_status)
  return _internal_gps_status();
}
inline void PublishSysStatusRequest::set_gps_status(bool value) {
  _internal_set_gps_status(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishSysStatusRequest.gps_status)
}
inline bool PublishSysStatusRequest::_internal_gps_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gps_status_;
}
inline void PublishSysStatusRequest::_internal_set_gps_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gps_status_ = value;
}

// -------------------------------------------------------------------

// PublishExtendedSysStateRequest

// .mavsdk.rpc.telemetry_server.VtolState vtol_state = 1;
inline void PublishExtendedSysStateRequest::clear_vtol_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vtol_state_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::VtolState PublishExtendedSysStateRequest::vtol_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.vtol_state)
  return _internal_vtol_state();
}
inline void PublishExtendedSysStateRequest::set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value) {
  _internal_set_vtol_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.vtol_state)
}
inline ::mavsdk::rpc::telemetry_server::VtolState PublishExtendedSysStateRequest::_internal_vtol_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::VtolState>(_impl_.vtol_state_);
}
inline void PublishExtendedSysStateRequest::_internal_set_vtol_state(::mavsdk::rpc::telemetry_server::VtolState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vtol_state_ = value;
}

// .mavsdk.rpc.telemetry_server.LandedState landed_state = 2;
inline void PublishExtendedSysStateRequest::clear_landed_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.landed_state_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishExtendedSysStateRequest::landed_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.landed_state)
  return _internal_landed_state();
}
inline void PublishExtendedSysStateRequest::set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  _internal_set_landed_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.landed_state)
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishExtendedSysStateRequest::_internal_landed_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::LandedState>(_impl_.landed_state_);
}
inline void PublishExtendedSysStateRequest::_internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.landed_state_ = value;
}

// -------------------------------------------------------------------

// PublishInAirRequest

// bool is_in_air = 1;
inline void PublishInAirRequest::clear_is_in_air() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_in_air_ = false;
}
inline bool PublishInAirRequest::is_in_air() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishInAirRequest.is_in_air)
  return _internal_is_in_air();
}
inline void PublishInAirRequest::set_is_in_air(bool value) {
  _internal_set_is_in_air(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishInAirRequest.is_in_air)
}
inline bool PublishInAirRequest::_internal_is_in_air() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_in_air_;
}
inline void PublishInAirRequest::_internal_set_is_in_air(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_in_air_ = value;
}

// -------------------------------------------------------------------

// PublishLandedStateRequest

// .mavsdk.rpc.telemetry_server.LandedState landed_state = 1;
inline void PublishLandedStateRequest::clear_landed_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.landed_state_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishLandedStateRequest::landed_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishLandedStateRequest.landed_state)
  return _internal_landed_state();
}
inline void PublishLandedStateRequest::set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  _internal_set_landed_state(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishLandedStateRequest.landed_state)
}
inline ::mavsdk::rpc::telemetry_server::LandedState PublishLandedStateRequest::_internal_landed_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::LandedState>(_impl_.landed_state_);
}
inline void PublishLandedStateRequest::_internal_set_landed_state(::mavsdk::rpc::telemetry_server::LandedState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.landed_state_ = value;
}

// -------------------------------------------------------------------

// PublishRawGpsRequest

// .mavsdk.rpc.telemetry_server.RawGps raw_gps = 1;
inline bool PublishRawGpsRequest::has_raw_gps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.raw_gps_ != nullptr);
  return value;
}
inline void PublishRawGpsRequest::clear_raw_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.raw_gps_ != nullptr) _impl_.raw_gps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::RawGps& PublishRawGpsRequest::_internal_raw_gps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::RawGps* p = _impl_.raw_gps_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::RawGps&>(::mavsdk::rpc::telemetry_server::_RawGps_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::RawGps& PublishRawGpsRequest::raw_gps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
  return _internal_raw_gps();
}
inline void PublishRawGpsRequest::unsafe_arena_set_allocated_raw_gps(::mavsdk::rpc::telemetry_server::RawGps* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.raw_gps_);
  }
  _impl_.raw_gps_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::RawGps*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::release_raw_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::RawGps* released = _impl_.raw_gps_;
  _impl_.raw_gps_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::unsafe_arena_release_raw_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::RawGps* temp = _impl_.raw_gps_;
  _impl_.raw_gps_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::_internal_mutable_raw_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.raw_gps_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::RawGps>(GetArena());
    _impl_.raw_gps_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::RawGps*>(p);
  }
  return _impl_.raw_gps_;
}
inline ::mavsdk::rpc::telemetry_server::RawGps* PublishRawGpsRequest::mutable_raw_gps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::RawGps* _msg = _internal_mutable_raw_gps();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
  return _msg;
}
inline void PublishRawGpsRequest::set_allocated_raw_gps(::mavsdk::rpc::telemetry_server::RawGps* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.raw_gps_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.raw_gps_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::RawGps*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps)
}

// .mavsdk.rpc.telemetry_server.GpsInfo gps_info = 2;
inline bool PublishRawGpsRequest::has_gps_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gps_info_ != nullptr);
  return value;
}
inline void PublishRawGpsRequest::clear_gps_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gps_info_ != nullptr) _impl_.gps_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::telemetry_server::GpsInfo& PublishRawGpsRequest::_internal_gps_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::GpsInfo* p = _impl_.gps_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::GpsInfo&>(::mavsdk::rpc::telemetry_server::_GpsInfo_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::GpsInfo& PublishRawGpsRequest::gps_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
  return _internal_gps_info();
}
inline void PublishRawGpsRequest::unsafe_arena_set_allocated_gps_info(::mavsdk::rpc::telemetry_server::GpsInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gps_info_);
  }
  _impl_.gps_info_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::GpsInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::release_gps_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::GpsInfo* released = _impl_.gps_info_;
  _impl_.gps_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::unsafe_arena_release_gps_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::GpsInfo* temp = _impl_.gps_info_;
  _impl_.gps_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::_internal_mutable_gps_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gps_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::GpsInfo>(GetArena());
    _impl_.gps_info_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::GpsInfo*>(p);
  }
  return _impl_.gps_info_;
}
inline ::mavsdk::rpc::telemetry_server::GpsInfo* PublishRawGpsRequest::mutable_gps_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::telemetry_server::GpsInfo* _msg = _internal_mutable_gps_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
  return _msg;
}
inline void PublishRawGpsRequest::set_allocated_gps_info(::mavsdk::rpc::telemetry_server::GpsInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gps_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.gps_info_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::GpsInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info)
}

// -------------------------------------------------------------------

// PublishBatteryRequest

// .mavsdk.rpc.telemetry_server.Battery battery = 1;
inline bool PublishBatteryRequest::has_battery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.battery_ != nullptr);
  return value;
}
inline void PublishBatteryRequest::clear_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.battery_ != nullptr) _impl_.battery_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishBatteryRequest::_internal_battery() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Battery* p = _impl_.battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Battery&>(::mavsdk::rpc::telemetry_server::_Battery_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Battery& PublishBatteryRequest::battery() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
  return _internal_battery();
}
inline void PublishBatteryRequest::unsafe_arena_set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.battery_);
  }
  _impl_.battery_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Battery*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::release_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Battery* released = _impl_.battery_;
  _impl_.battery_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::unsafe_arena_release_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Battery* temp = _impl_.battery_;
  _impl_.battery_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::_internal_mutable_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.battery_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Battery>(GetArena());
    _impl_.battery_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Battery*>(p);
  }
  return _impl_.battery_;
}
inline ::mavsdk::rpc::telemetry_server::Battery* PublishBatteryRequest::mutable_battery() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
  return _msg;
}
inline void PublishBatteryRequest::set_allocated_battery(::mavsdk::rpc::telemetry_server::Battery* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.battery_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.battery_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Battery*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery)
}

// -------------------------------------------------------------------

// PublishRcStatusRequest

// .mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;
inline bool PublishRcStatusRequest::has_rc_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rc_status_ != nullptr);
  return value;
}
inline void PublishRcStatusRequest::clear_rc_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rc_status_ != nullptr) _impl_.rc_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::RcStatus& PublishRcStatusRequest::_internal_rc_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::RcStatus* p = _impl_.rc_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::RcStatus&>(::mavsdk::rpc::telemetry_server::_RcStatus_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::RcStatus& PublishRcStatusRequest::rc_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
  return _internal_rc_status();
}
inline void PublishRcStatusRequest::unsafe_arena_set_allocated_rc_status(::mavsdk::rpc::telemetry_server::RcStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rc_status_);
  }
  _impl_.rc_status_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::RcStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::release_rc_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::RcStatus* released = _impl_.rc_status_;
  _impl_.rc_status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::unsafe_arena_release_rc_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::RcStatus* temp = _impl_.rc_status_;
  _impl_.rc_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::_internal_mutable_rc_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rc_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::RcStatus>(GetArena());
    _impl_.rc_status_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::RcStatus*>(p);
  }
  return _impl_.rc_status_;
}
inline ::mavsdk::rpc::telemetry_server::RcStatus* PublishRcStatusRequest::mutable_rc_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::RcStatus* _msg = _internal_mutable_rc_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
  return _msg;
}
inline void PublishRcStatusRequest::set_allocated_rc_status(::mavsdk::rpc::telemetry_server::RcStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rc_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.rc_status_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::RcStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status)
}

// -------------------------------------------------------------------

// PublishStatusTextRequest

// .mavsdk.rpc.telemetry_server.StatusText status_text = 1;
inline bool PublishStatusTextRequest::has_status_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_text_ != nullptr);
  return value;
}
inline void PublishStatusTextRequest::clear_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_text_ != nullptr) _impl_.status_text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::StatusText& PublishStatusTextRequest::_internal_status_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::StatusText* p = _impl_.status_text_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::StatusText&>(::mavsdk::rpc::telemetry_server::_StatusText_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::StatusText& PublishStatusTextRequest::status_text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
  return _internal_status_text();
}
inline void PublishStatusTextRequest::unsafe_arena_set_allocated_status_text(::mavsdk::rpc::telemetry_server::StatusText* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_text_);
  }
  _impl_.status_text_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::StatusText*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::release_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::StatusText* released = _impl_.status_text_;
  _impl_.status_text_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::unsafe_arena_release_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::StatusText* temp = _impl_.status_text_;
  _impl_.status_text_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::_internal_mutable_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_text_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::StatusText>(GetArena());
    _impl_.status_text_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::StatusText*>(p);
  }
  return _impl_.status_text_;
}
inline ::mavsdk::rpc::telemetry_server::StatusText* PublishStatusTextRequest::mutable_status_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::StatusText* _msg = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
  return _msg;
}
inline void PublishStatusTextRequest::set_allocated_status_text(::mavsdk::rpc::telemetry_server::StatusText* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.status_text_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_text_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::StatusText*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text)
}

// -------------------------------------------------------------------

// PublishOdometryRequest

// .mavsdk.rpc.telemetry_server.Odometry odometry = 1;
inline bool PublishOdometryRequest::has_odometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.odometry_ != nullptr);
  return value;
}
inline void PublishOdometryRequest::clear_odometry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.odometry_ != nullptr) _impl_.odometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Odometry& PublishOdometryRequest::_internal_odometry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Odometry* p = _impl_.odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Odometry&>(::mavsdk::rpc::telemetry_server::_Odometry_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Odometry& PublishOdometryRequest::odometry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
  return _internal_odometry();
}
inline void PublishOdometryRequest::unsafe_arena_set_allocated_odometry(::mavsdk::rpc::telemetry_server::Odometry* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.odometry_);
  }
  _impl_.odometry_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Odometry*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::release_odometry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Odometry* released = _impl_.odometry_;
  _impl_.odometry_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::unsafe_arena_release_odometry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Odometry* temp = _impl_.odometry_;
  _impl_.odometry_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::_internal_mutable_odometry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.odometry_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Odometry>(GetArena());
    _impl_.odometry_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Odometry*>(p);
  }
  return _impl_.odometry_;
}
inline ::mavsdk::rpc::telemetry_server::Odometry* PublishOdometryRequest::mutable_odometry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Odometry* _msg = _internal_mutable_odometry();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
  return _msg;
}
inline void PublishOdometryRequest::set_allocated_odometry(::mavsdk::rpc::telemetry_server::Odometry* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.odometry_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.odometry_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Odometry*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry)
}

// -------------------------------------------------------------------

// PublishPositionVelocityNedRequest

// .mavsdk.rpc.telemetry_server.PositionVelocityNed position_velocity_ned = 1;
inline bool PublishPositionVelocityNedRequest::has_position_velocity_ned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_velocity_ned_ != nullptr);
  return value;
}
inline void PublishPositionVelocityNedRequest::clear_position_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_velocity_ned_ != nullptr) _impl_.position_velocity_ned_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& PublishPositionVelocityNedRequest::_internal_position_velocity_ned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::PositionVelocityNed* p = _impl_.position_velocity_ned_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::PositionVelocityNed&>(::mavsdk::rpc::telemetry_server::_PositionVelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::PositionVelocityNed& PublishPositionVelocityNedRequest::position_velocity_ned() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
  return _internal_position_velocity_ned();
}
inline void PublishPositionVelocityNedRequest::unsafe_arena_set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry_server::PositionVelocityNed* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_velocity_ned_);
  }
  _impl_.position_velocity_ned_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionVelocityNed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::release_position_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* released = _impl_.position_velocity_ned_;
  _impl_.position_velocity_ned_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::unsafe_arena_release_position_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* temp = _impl_.position_velocity_ned_;
  _impl_.position_velocity_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::_internal_mutable_position_velocity_ned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_velocity_ned_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::PositionVelocityNed>(GetArena());
    _impl_.position_velocity_ned_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionVelocityNed*>(p);
  }
  return _impl_.position_velocity_ned_;
}
inline ::mavsdk::rpc::telemetry_server::PositionVelocityNed* PublishPositionVelocityNedRequest::mutable_position_velocity_ned() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionVelocityNed* _msg = _internal_mutable_position_velocity_ned();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
  return _msg;
}
inline void PublishPositionVelocityNedRequest::set_allocated_position_velocity_ned(::mavsdk::rpc::telemetry_server::PositionVelocityNed* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_velocity_ned_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_velocity_ned_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionVelocityNed*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned)
}

// -------------------------------------------------------------------

// PublishGroundTruthRequest

// .mavsdk.rpc.telemetry_server.GroundTruth ground_truth = 1;
inline bool PublishGroundTruthRequest::has_ground_truth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ground_truth_ != nullptr);
  return value;
}
inline void PublishGroundTruthRequest::clear_ground_truth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ground_truth_ != nullptr) _impl_.ground_truth_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::GroundTruth& PublishGroundTruthRequest::_internal_ground_truth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::GroundTruth* p = _impl_.ground_truth_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::GroundTruth&>(::mavsdk::rpc::telemetry_server::_GroundTruth_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::GroundTruth& PublishGroundTruthRequest::ground_truth() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
  return _internal_ground_truth();
}
inline void PublishGroundTruthRequest::unsafe_arena_set_allocated_ground_truth(::mavsdk::rpc::telemetry_server::GroundTruth* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ground_truth_);
  }
  _impl_.ground_truth_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::GroundTruth*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::release_ground_truth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::GroundTruth* released = _impl_.ground_truth_;
  _impl_.ground_truth_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::unsafe_arena_release_ground_truth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::GroundTruth* temp = _impl_.ground_truth_;
  _impl_.ground_truth_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::_internal_mutable_ground_truth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ground_truth_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::GroundTruth>(GetArena());
    _impl_.ground_truth_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::GroundTruth*>(p);
  }
  return _impl_.ground_truth_;
}
inline ::mavsdk::rpc::telemetry_server::GroundTruth* PublishGroundTruthRequest::mutable_ground_truth() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::GroundTruth* _msg = _internal_mutable_ground_truth();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
  return _msg;
}
inline void PublishGroundTruthRequest::set_allocated_ground_truth(::mavsdk::rpc::telemetry_server::GroundTruth* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.ground_truth_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ground_truth_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::GroundTruth*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth)
}

// -------------------------------------------------------------------

// PublishImuRequest

// .mavsdk.rpc.telemetry_server.Imu imu = 1;
inline bool PublishImuRequest::has_imu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.imu_ != nullptr);
  return value;
}
inline void PublishImuRequest::clear_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imu_ != nullptr) _impl_.imu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishImuRequest::_internal_imu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Imu* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Imu&>(::mavsdk::rpc::telemetry_server::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishImuRequest::imu() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
  return _internal_imu();
}
inline void PublishImuRequest::unsafe_arena_set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::release_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* released = _impl_.imu_;
  _impl_.imu_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::unsafe_arena_release_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::_internal_mutable_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imu_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Imu>(GetArena());
    _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(p);
  }
  return _impl_.imu_;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishImuRequest::mutable_imu() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
  return _msg;
}
inline void PublishImuRequest::set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.imu_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishImuRequest.imu)
}

// -------------------------------------------------------------------

// PublishScaledImuRequest

// .mavsdk.rpc.telemetry_server.Imu imu = 1;
inline bool PublishScaledImuRequest::has_imu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.imu_ != nullptr);
  return value;
}
inline void PublishScaledImuRequest::clear_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imu_ != nullptr) _impl_.imu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishScaledImuRequest::_internal_imu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Imu* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Imu&>(::mavsdk::rpc::telemetry_server::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishScaledImuRequest::imu() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
  return _internal_imu();
}
inline void PublishScaledImuRequest::unsafe_arena_set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::release_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* released = _impl_.imu_;
  _impl_.imu_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::unsafe_arena_release_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::_internal_mutable_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imu_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Imu>(GetArena());
    _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(p);
  }
  return _impl_.imu_;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishScaledImuRequest::mutable_imu() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
  return _msg;
}
inline void PublishScaledImuRequest::set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.imu_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu)
}

// -------------------------------------------------------------------

// PublishRawImuRequest

// .mavsdk.rpc.telemetry_server.Imu imu = 1;
inline bool PublishRawImuRequest::has_imu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.imu_ != nullptr);
  return value;
}
inline void PublishRawImuRequest::clear_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imu_ != nullptr) _impl_.imu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishRawImuRequest::_internal_imu() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Imu* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Imu&>(::mavsdk::rpc::telemetry_server::_Imu_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Imu& PublishRawImuRequest::imu() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
  return _internal_imu();
}
inline void PublishRawImuRequest::unsafe_arena_set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::release_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* released = _impl_.imu_;
  _impl_.imu_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::unsafe_arena_release_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::_internal_mutable_imu() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imu_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Imu>(GetArena());
    _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(p);
  }
  return _impl_.imu_;
}
inline ::mavsdk::rpc::telemetry_server::Imu* PublishRawImuRequest::mutable_imu() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
  return _msg;
}
inline void PublishRawImuRequest::set_allocated_imu(::mavsdk::rpc::telemetry_server::Imu* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.imu_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.imu_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Imu*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu)
}

// -------------------------------------------------------------------

// PublishUnixEpochTimeRequest

// uint64 time_us = 1;
inline void PublishUnixEpochTimeRequest::clear_time_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_us_ = ::uint64_t{0u};
}
inline ::uint64_t PublishUnixEpochTimeRequest::time_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest.time_us)
  return _internal_time_us();
}
inline void PublishUnixEpochTimeRequest::set_time_us(::uint64_t value) {
  _internal_set_time_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest.time_us)
}
inline ::uint64_t PublishUnixEpochTimeRequest::_internal_time_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_us_;
}
inline void PublishUnixEpochTimeRequest::_internal_set_time_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_us_ = value;
}

// -------------------------------------------------------------------

// PublishDistanceSensorRequest

// .mavsdk.rpc.telemetry_server.DistanceSensor distance_sensor = 1;
inline bool PublishDistanceSensorRequest::has_distance_sensor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distance_sensor_ != nullptr);
  return value;
}
inline void PublishDistanceSensorRequest::clear_distance_sensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distance_sensor_ != nullptr) _impl_.distance_sensor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::DistanceSensor& PublishDistanceSensorRequest::_internal_distance_sensor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::DistanceSensor* p = _impl_.distance_sensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::DistanceSensor&>(::mavsdk::rpc::telemetry_server::_DistanceSensor_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::DistanceSensor& PublishDistanceSensorRequest::distance_sensor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest.distance_sensor)
  return _internal_distance_sensor();
}
inline void PublishDistanceSensorRequest::unsafe_arena_set_allocated_distance_sensor(::mavsdk::rpc::telemetry_server::DistanceSensor* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distance_sensor_);
  }
  _impl_.distance_sensor_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::DistanceSensor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest.distance_sensor)
}
inline ::mavsdk::rpc::telemetry_server::DistanceSensor* PublishDistanceSensorRequest::release_distance_sensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::DistanceSensor* released = _impl_.distance_sensor_;
  _impl_.distance_sensor_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::DistanceSensor* PublishDistanceSensorRequest::unsafe_arena_release_distance_sensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest.distance_sensor)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::DistanceSensor* temp = _impl_.distance_sensor_;
  _impl_.distance_sensor_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::DistanceSensor* PublishDistanceSensorRequest::_internal_mutable_distance_sensor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.distance_sensor_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::DistanceSensor>(GetArena());
    _impl_.distance_sensor_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::DistanceSensor*>(p);
  }
  return _impl_.distance_sensor_;
}
inline ::mavsdk::rpc::telemetry_server::DistanceSensor* PublishDistanceSensorRequest::mutable_distance_sensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::DistanceSensor* _msg = _internal_mutable_distance_sensor();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest.distance_sensor)
  return _msg;
}
inline void PublishDistanceSensorRequest::set_allocated_distance_sensor(::mavsdk::rpc::telemetry_server::DistanceSensor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.distance_sensor_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.distance_sensor_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::DistanceSensor*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest.distance_sensor)
}

// -------------------------------------------------------------------

// PublishAttitudeRequest

// .mavsdk.rpc.telemetry_server.EulerAngle angle = 1;
inline bool PublishAttitudeRequest::has_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angle_ != nullptr);
  return value;
}
inline void PublishAttitudeRequest::clear_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angle_ != nullptr) _impl_.angle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::EulerAngle& PublishAttitudeRequest::_internal_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::EulerAngle* p = _impl_.angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::EulerAngle&>(::mavsdk::rpc::telemetry_server::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::EulerAngle& PublishAttitudeRequest::angle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angle)
  return _internal_angle();
}
inline void PublishAttitudeRequest::unsafe_arena_set_allocated_angle(::mavsdk::rpc::telemetry_server::EulerAngle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angle_);
  }
  _impl_.angle_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::EulerAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angle)
}
inline ::mavsdk::rpc::telemetry_server::EulerAngle* PublishAttitudeRequest::release_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::EulerAngle* released = _impl_.angle_;
  _impl_.angle_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::EulerAngle* PublishAttitudeRequest::unsafe_arena_release_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angle)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::EulerAngle* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::EulerAngle* PublishAttitudeRequest::_internal_mutable_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angle_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::EulerAngle>(GetArena());
    _impl_.angle_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::EulerAngle*>(p);
  }
  return _impl_.angle_;
}
inline ::mavsdk::rpc::telemetry_server::EulerAngle* PublishAttitudeRequest::mutable_angle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::EulerAngle* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angle)
  return _msg;
}
inline void PublishAttitudeRequest::set_allocated_angle(::mavsdk::rpc::telemetry_server::EulerAngle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.angle_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::EulerAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angle)
}

// .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity = 2;
inline bool PublishAttitudeRequest::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline void PublishAttitudeRequest::clear_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& PublishAttitudeRequest::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AngularVelocityBody&>(::mavsdk::rpc::telemetry_server::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& PublishAttitudeRequest::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angular_velocity)
  return _internal_angular_velocity();
}
inline void PublishAttitudeRequest::unsafe_arena_set_allocated_angular_velocity(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angular_velocity)
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* PublishAttitudeRequest::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* PublishAttitudeRequest::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* PublishAttitudeRequest::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* PublishAttitudeRequest::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angular_velocity)
  return _msg;
}
inline void PublishAttitudeRequest::set_allocated_angular_velocity(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angular_velocity)
}

// -------------------------------------------------------------------

// PublishVisualFlightRulesHudRequest

// .mavsdk.rpc.telemetry_server.FixedwingMetrics fixed_wing_metrics = 1;
inline bool PublishVisualFlightRulesHudRequest::has_fixed_wing_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_wing_metrics_ != nullptr);
  return value;
}
inline void PublishVisualFlightRulesHudRequest::clear_fixed_wing_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fixed_wing_metrics_ != nullptr) _impl_.fixed_wing_metrics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::FixedwingMetrics& PublishVisualFlightRulesHudRequest::_internal_fixed_wing_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::FixedwingMetrics* p = _impl_.fixed_wing_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::FixedwingMetrics&>(::mavsdk::rpc::telemetry_server::_FixedwingMetrics_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::FixedwingMetrics& PublishVisualFlightRulesHudRequest::fixed_wing_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest.fixed_wing_metrics)
  return _internal_fixed_wing_metrics();
}
inline void PublishVisualFlightRulesHudRequest::unsafe_arena_set_allocated_fixed_wing_metrics(::mavsdk::rpc::telemetry_server::FixedwingMetrics* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_wing_metrics_);
  }
  _impl_.fixed_wing_metrics_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::FixedwingMetrics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest.fixed_wing_metrics)
}
inline ::mavsdk::rpc::telemetry_server::FixedwingMetrics* PublishVisualFlightRulesHudRequest::release_fixed_wing_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics* released = _impl_.fixed_wing_metrics_;
  _impl_.fixed_wing_metrics_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::FixedwingMetrics* PublishVisualFlightRulesHudRequest::unsafe_arena_release_fixed_wing_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest.fixed_wing_metrics)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics* temp = _impl_.fixed_wing_metrics_;
  _impl_.fixed_wing_metrics_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::FixedwingMetrics* PublishVisualFlightRulesHudRequest::_internal_mutable_fixed_wing_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fixed_wing_metrics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::FixedwingMetrics>(GetArena());
    _impl_.fixed_wing_metrics_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::FixedwingMetrics*>(p);
  }
  return _impl_.fixed_wing_metrics_;
}
inline ::mavsdk::rpc::telemetry_server::FixedwingMetrics* PublishVisualFlightRulesHudRequest::mutable_fixed_wing_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::FixedwingMetrics* _msg = _internal_mutable_fixed_wing_metrics();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest.fixed_wing_metrics)
  return _msg;
}
inline void PublishVisualFlightRulesHudRequest::set_allocated_fixed_wing_metrics(::mavsdk::rpc::telemetry_server::FixedwingMetrics* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fixed_wing_metrics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fixed_wing_metrics_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::FixedwingMetrics*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest.fixed_wing_metrics)
}

// -------------------------------------------------------------------

// PublishPositionResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishPositionResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishPositionResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishPositionResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
  return _msg;
}
inline void PublishPositionResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishHomeResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishHomeResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishHomeResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishHomeResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishHomeResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishHomeResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishHomeResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
  return _msg;
}
inline void PublishHomeResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishSysStatusResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishSysStatusResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishSysStatusResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishSysStatusResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishSysStatusResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishSysStatusResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishSysStatusResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
  return _msg;
}
inline void PublishSysStatusResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishExtendedSysStateResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishExtendedSysStateResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishExtendedSysStateResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishExtendedSysStateResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishExtendedSysStateResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishExtendedSysStateResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishExtendedSysStateResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
  return _msg;
}
inline void PublishExtendedSysStateResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishRawGpsResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishRawGpsResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishRawGpsResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawGpsResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawGpsResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishRawGpsResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawGpsResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
  return _msg;
}
inline void PublishRawGpsResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishBatteryResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishBatteryResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishBatteryResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishBatteryResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishBatteryResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishBatteryResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishBatteryResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
  return _msg;
}
inline void PublishBatteryResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishStatusTextResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishStatusTextResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishStatusTextResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishStatusTextResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishStatusTextResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishStatusTextResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishStatusTextResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
  return _msg;
}
inline void PublishStatusTextResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishOdometryResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishOdometryResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishOdometryResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishOdometryResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishOdometryResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishOdometryResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishOdometryResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
  return _msg;
}
inline void PublishOdometryResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishPositionVelocityNedResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishPositionVelocityNedResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishPositionVelocityNedResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionVelocityNedResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishPositionVelocityNedResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishPositionVelocityNedResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishPositionVelocityNedResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
  return _msg;
}
inline void PublishPositionVelocityNedResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishGroundTruthResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishGroundTruthResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishGroundTruthResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishGroundTruthResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishGroundTruthResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishGroundTruthResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishGroundTruthResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
  return _msg;
}
inline void PublishGroundTruthResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishImuResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishImuResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishImuResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishImuResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishImuResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishImuResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishImuResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
  return _msg;
}
inline void PublishImuResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishScaledImuResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishScaledImuResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishScaledImuResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishScaledImuResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishScaledImuResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishScaledImuResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishScaledImuResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
  return _msg;
}
inline void PublishScaledImuResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishRawImuResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishRawImuResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishRawImuResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawImuResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishRawImuResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishRawImuResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishRawImuResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
  return _msg;
}
inline void PublishRawImuResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishUnixEpochTimeResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishUnixEpochTimeResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishUnixEpochTimeResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishUnixEpochTimeResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishUnixEpochTimeResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishUnixEpochTimeResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishUnixEpochTimeResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
  return _msg;
}
inline void PublishUnixEpochTimeResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishDistanceSensorResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishDistanceSensorResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishDistanceSensorResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishDistanceSensorResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishDistanceSensorResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishDistanceSensorResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishDistanceSensorResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishDistanceSensorResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishDistanceSensorResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishDistanceSensorResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse.telemetry_server_result)
  return _msg;
}
inline void PublishDistanceSensorResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishAttitudeResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishAttitudeResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishAttitudeResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishAttitudeResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishAttitudeResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishAttitudeResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishAttitudeResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishAttitudeResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishAttitudeResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishAttitudeResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishAttitudeResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishAttitudeResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishAttitudeResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishAttitudeResponse.telemetry_server_result)
  return _msg;
}
inline void PublishAttitudeResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishAttitudeResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// PublishVisualFlightRulesHudResponse

// .mavsdk.rpc.telemetry_server.TelemetryServerResult telemetry_server_result = 1;
inline bool PublishVisualFlightRulesHudResponse::has_telemetry_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.telemetry_server_result_ != nullptr);
  return value;
}
inline void PublishVisualFlightRulesHudResponse::clear_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ != nullptr) _impl_.telemetry_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishVisualFlightRulesHudResponse::_internal_telemetry_server_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::TelemetryServerResult* p = _impl_.telemetry_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::TelemetryServerResult&>(::mavsdk::rpc::telemetry_server::_TelemetryServerResult_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::TelemetryServerResult& PublishVisualFlightRulesHudResponse::telemetry_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse.telemetry_server_result)
  return _internal_telemetry_server_result();
}
inline void PublishVisualFlightRulesHudResponse::unsafe_arena_set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.telemetry_server_result_);
  }
  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse.telemetry_server_result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishVisualFlightRulesHudResponse::release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* released = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishVisualFlightRulesHudResponse::unsafe_arena_release_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse.telemetry_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* temp = _impl_.telemetry_server_result_;
  _impl_.telemetry_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishVisualFlightRulesHudResponse::_internal_mutable_telemetry_server_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.telemetry_server_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::TelemetryServerResult>(GetArena());
    _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(p);
  }
  return _impl_.telemetry_server_result_;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult* PublishVisualFlightRulesHudResponse::mutable_telemetry_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::TelemetryServerResult* _msg = _internal_mutable_telemetry_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse.telemetry_server_result)
  return _msg;
}
inline void PublishVisualFlightRulesHudResponse::set_allocated_telemetry_server_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.telemetry_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.telemetry_server_result_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse.telemetry_server_result)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_latitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = 0;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.latitude_deg)
  return _internal_latitude_deg();
}
inline void Position::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.latitude_deg)
}
inline double Position::_internal_latitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_deg_;
}
inline void Position::_internal_set_latitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_longitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = 0;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.longitude_deg)
  return _internal_longitude_deg();
}
inline void Position::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.longitude_deg)
}
inline double Position::_internal_longitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_deg_;
}
inline void Position::_internal_set_longitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = value;
}

// float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_absolute_altitude_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = 0;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void Position::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.absolute_altitude_m)
}
inline float Position::_internal_absolute_altitude_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_altitude_m_;
}
inline void Position::_internal_set_absolute_altitude_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = value;
}

// float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Position::clear_relative_altitude_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_altitude_m_ = 0;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Position.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void Position::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Position.relative_altitude_m)
}
inline float Position::_internal_relative_altitude_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relative_altitude_m_;
}
inline void Position::_internal_set_relative_altitude_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relative_altitude_m_ = value;
}

// -------------------------------------------------------------------

// Heading

// double heading_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Heading::clear_heading_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_deg_ = 0;
}
inline double Heading::heading_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Heading.heading_deg)
  return _internal_heading_deg();
}
inline void Heading::set_heading_deg(double value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Heading.heading_deg)
}
inline double Heading::_internal_heading_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_deg_;
}
inline void Heading::_internal_set_heading_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_deg_ = value;
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_w() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.w)
}
inline float Quaternion::_internal_w() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.w_;
}
inline void Quaternion::_internal_set_w(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.w_ = value;
}

// float x = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.x)
}
inline float Quaternion::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Quaternion::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.y)
}
inline float Quaternion::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Quaternion::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.z)
}
inline float Quaternion::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Quaternion::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// uint64 timestamp_us = 5;
inline void Quaternion::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::uint64_t{0u};
}
inline ::uint64_t Quaternion::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Quaternion.timestamp_us)
  return _internal_timestamp_us();
}
inline void Quaternion::set_timestamp_us(::uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Quaternion.timestamp_us)
}
inline ::uint64_t Quaternion::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void Quaternion::_internal_set_timestamp_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_roll_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_deg_ = 0;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.roll_deg)
  return _internal_roll_deg();
}
inline void EulerAngle::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.roll_deg)
}
inline float EulerAngle::_internal_roll_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_deg_;
}
inline void EulerAngle::_internal_set_roll_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_deg_ = value;
}

// float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_pitch_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_deg_ = 0;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.pitch_deg)
  return _internal_pitch_deg();
}
inline void EulerAngle::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.pitch_deg)
}
inline float EulerAngle::_internal_pitch_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_deg_;
}
inline void EulerAngle::_internal_set_pitch_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_deg_ = value;
}

// float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_yaw_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = 0;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.yaw_deg)
  return _internal_yaw_deg();
}
inline void EulerAngle::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.yaw_deg)
}
inline float EulerAngle::_internal_yaw_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_deg_;
}
inline void EulerAngle::_internal_set_yaw_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = value;
}

// uint64 timestamp_us = 4;
inline void EulerAngle::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::uint64_t{0u};
}
inline ::uint64_t EulerAngle::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.EulerAngle.timestamp_us)
  return _internal_timestamp_us();
}
inline void EulerAngle::set_timestamp_us(::uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.EulerAngle.timestamp_us)
}
inline ::uint64_t EulerAngle::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void EulerAngle::_internal_set_timestamp_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_roll_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_rad_s_ = 0;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityBody.roll_rad_s)
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_rad_s_;
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_rad_s_ = value;
}

// float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_pitch_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityBody.pitch_rad_s)
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_rad_s_;
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_rad_s_ = value;
}

// float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_yaw_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityBody.yaw_rad_s)
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_rad_s_;
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_rad_s_ = value;
}

// -------------------------------------------------------------------

// GpsInfo

// int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
inline void GpsInfo::clear_num_satellites() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_satellites_ = 0;
}
inline ::int32_t GpsInfo::num_satellites() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GpsInfo.num_satellites)
  return _internal_num_satellites();
}
inline void GpsInfo::set_num_satellites(::int32_t value) {
  _internal_set_num_satellites(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GpsInfo.num_satellites)
}
inline ::int32_t GpsInfo::_internal_num_satellites() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_satellites_;
}
inline void GpsInfo::_internal_set_num_satellites(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_satellites_ = value;
}

// .mavsdk.rpc.telemetry_server.FixType fix_type = 2;
inline void GpsInfo::clear_fix_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fix_type_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::FixType GpsInfo::fix_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GpsInfo.fix_type)
  return _internal_fix_type();
}
inline void GpsInfo::set_fix_type(::mavsdk::rpc::telemetry_server::FixType value) {
  _internal_set_fix_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GpsInfo.fix_type)
}
inline ::mavsdk::rpc::telemetry_server::FixType GpsInfo::_internal_fix_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::FixType>(_impl_.fix_type_);
}
inline void GpsInfo::_internal_set_fix_type(::mavsdk::rpc::telemetry_server::FixType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fix_type_ = value;
}

// -------------------------------------------------------------------

// RawGps

// uint64 timestamp_us = 1;
inline void RawGps::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::uint64_t{0u};
}
inline ::uint64_t RawGps::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.timestamp_us)
  return _internal_timestamp_us();
}
inline void RawGps::set_timestamp_us(::uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.timestamp_us)
}
inline ::uint64_t RawGps::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void RawGps::_internal_set_timestamp_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// double latitude_deg = 2;
inline void RawGps::clear_latitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = 0;
}
inline double RawGps::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.latitude_deg)
  return _internal_latitude_deg();
}
inline void RawGps::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.latitude_deg)
}
inline double RawGps::_internal_latitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_deg_;
}
inline void RawGps::_internal_set_latitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 3;
inline void RawGps::clear_longitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = 0;
}
inline double RawGps::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.longitude_deg)
  return _internal_longitude_deg();
}
inline void RawGps::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.longitude_deg)
}
inline double RawGps::_internal_longitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_deg_;
}
inline void RawGps::_internal_set_longitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = value;
}

// float absolute_altitude_m = 4;
inline void RawGps::clear_absolute_altitude_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = 0;
}
inline float RawGps::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void RawGps::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.absolute_altitude_m)
}
inline float RawGps::_internal_absolute_altitude_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_altitude_m_;
}
inline void RawGps::_internal_set_absolute_altitude_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = value;
}

// float hdop = 5;
inline void RawGps::clear_hdop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hdop_ = 0;
}
inline float RawGps::hdop() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.hdop)
  return _internal_hdop();
}
inline void RawGps::set_hdop(float value) {
  _internal_set_hdop(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.hdop)
}
inline float RawGps::_internal_hdop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hdop_;
}
inline void RawGps::_internal_set_hdop(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hdop_ = value;
}

// float vdop = 6;
inline void RawGps::clear_vdop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdop_ = 0;
}
inline float RawGps::vdop() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.vdop)
  return _internal_vdop();
}
inline void RawGps::set_vdop(float value) {
  _internal_set_vdop(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.vdop)
}
inline float RawGps::_internal_vdop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vdop_;
}
inline void RawGps::_internal_set_vdop(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vdop_ = value;
}

// float velocity_m_s = 7;
inline void RawGps::clear_velocity_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.velocity_m_s_ = 0;
}
inline float RawGps::velocity_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.velocity_m_s)
  return _internal_velocity_m_s();
}
inline void RawGps::set_velocity_m_s(float value) {
  _internal_set_velocity_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.velocity_m_s)
}
inline float RawGps::_internal_velocity_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.velocity_m_s_;
}
inline void RawGps::_internal_set_velocity_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.velocity_m_s_ = value;
}

// float cog_deg = 8;
inline void RawGps::clear_cog_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cog_deg_ = 0;
}
inline float RawGps::cog_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.cog_deg)
  return _internal_cog_deg();
}
inline void RawGps::set_cog_deg(float value) {
  _internal_set_cog_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.cog_deg)
}
inline float RawGps::_internal_cog_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cog_deg_;
}
inline void RawGps::_internal_set_cog_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cog_deg_ = value;
}

// float altitude_ellipsoid_m = 9;
inline void RawGps::clear_altitude_ellipsoid_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ellipsoid_m_ = 0;
}
inline float RawGps::altitude_ellipsoid_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.altitude_ellipsoid_m)
  return _internal_altitude_ellipsoid_m();
}
inline void RawGps::set_altitude_ellipsoid_m(float value) {
  _internal_set_altitude_ellipsoid_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.altitude_ellipsoid_m)
}
inline float RawGps::_internal_altitude_ellipsoid_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.altitude_ellipsoid_m_;
}
inline void RawGps::_internal_set_altitude_ellipsoid_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_ellipsoid_m_ = value;
}

// float horizontal_uncertainty_m = 10;
inline void RawGps::clear_horizontal_uncertainty_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horizontal_uncertainty_m_ = 0;
}
inline float RawGps::horizontal_uncertainty_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.horizontal_uncertainty_m)
  return _internal_horizontal_uncertainty_m();
}
inline void RawGps::set_horizontal_uncertainty_m(float value) {
  _internal_set_horizontal_uncertainty_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.horizontal_uncertainty_m)
}
inline float RawGps::_internal_horizontal_uncertainty_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.horizontal_uncertainty_m_;
}
inline void RawGps::_internal_set_horizontal_uncertainty_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.horizontal_uncertainty_m_ = value;
}

// float vertical_uncertainty_m = 11;
inline void RawGps::clear_vertical_uncertainty_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_uncertainty_m_ = 0;
}
inline float RawGps::vertical_uncertainty_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.vertical_uncertainty_m)
  return _internal_vertical_uncertainty_m();
}
inline void RawGps::set_vertical_uncertainty_m(float value) {
  _internal_set_vertical_uncertainty_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.vertical_uncertainty_m)
}
inline float RawGps::_internal_vertical_uncertainty_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vertical_uncertainty_m_;
}
inline void RawGps::_internal_set_vertical_uncertainty_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_uncertainty_m_ = value;
}

// float velocity_uncertainty_m_s = 12;
inline void RawGps::clear_velocity_uncertainty_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.velocity_uncertainty_m_s_ = 0;
}
inline float RawGps::velocity_uncertainty_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.velocity_uncertainty_m_s)
  return _internal_velocity_uncertainty_m_s();
}
inline void RawGps::set_velocity_uncertainty_m_s(float value) {
  _internal_set_velocity_uncertainty_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.velocity_uncertainty_m_s)
}
inline float RawGps::_internal_velocity_uncertainty_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.velocity_uncertainty_m_s_;
}
inline void RawGps::_internal_set_velocity_uncertainty_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.velocity_uncertainty_m_s_ = value;
}

// float heading_uncertainty_deg = 13;
inline void RawGps::clear_heading_uncertainty_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_uncertainty_deg_ = 0;
}
inline float RawGps::heading_uncertainty_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.heading_uncertainty_deg)
  return _internal_heading_uncertainty_deg();
}
inline void RawGps::set_heading_uncertainty_deg(float value) {
  _internal_set_heading_uncertainty_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.heading_uncertainty_deg)
}
inline float RawGps::_internal_heading_uncertainty_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_uncertainty_deg_;
}
inline void RawGps::_internal_set_heading_uncertainty_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_uncertainty_deg_ = value;
}

// float yaw_deg = 14;
inline void RawGps::clear_yaw_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = 0;
}
inline float RawGps::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RawGps.yaw_deg)
  return _internal_yaw_deg();
}
inline void RawGps::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RawGps.yaw_deg)
}
inline float RawGps::_internal_yaw_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_deg_;
}
inline void RawGps::_internal_set_yaw_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = value;
}

// -------------------------------------------------------------------

// Battery

// float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Battery::clear_voltage_v() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_v_ = 0;
}
inline float Battery::voltage_v() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Battery.voltage_v)
  return _internal_voltage_v();
}
inline void Battery::set_voltage_v(float value) {
  _internal_set_voltage_v(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Battery.voltage_v)
}
inline float Battery::_internal_voltage_v() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.voltage_v_;
}
inline void Battery::_internal_set_voltage_v(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.voltage_v_ = value;
}

// float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Battery::clear_remaining_percent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_percent_ = 0;
}
inline float Battery::remaining_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Battery.remaining_percent)
  return _internal_remaining_percent();
}
inline void Battery::set_remaining_percent(float value) {
  _internal_set_remaining_percent(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Battery.remaining_percent)
}
inline float Battery::_internal_remaining_percent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_percent_;
}
inline void Battery::_internal_set_remaining_percent(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_percent_ = value;
}

// -------------------------------------------------------------------

// RcStatus

// bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
inline void RcStatus::clear_was_available_once() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.was_available_once_ = false;
}
inline bool RcStatus::was_available_once() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RcStatus.was_available_once)
  return _internal_was_available_once();
}
inline void RcStatus::set_was_available_once(bool value) {
  _internal_set_was_available_once(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RcStatus.was_available_once)
}
inline bool RcStatus::_internal_was_available_once() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.was_available_once_;
}
inline void RcStatus::_internal_set_was_available_once(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.was_available_once_ = value;
}

// bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
inline void RcStatus::clear_is_available() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_available_ = false;
}
inline bool RcStatus::is_available() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RcStatus.is_available)
  return _internal_is_available();
}
inline void RcStatus::set_is_available(bool value) {
  _internal_set_is_available(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RcStatus.is_available)
}
inline bool RcStatus::_internal_is_available() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_available_;
}
inline void RcStatus::_internal_set_is_available(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_available_ = value;
}

// float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void RcStatus::clear_signal_strength_percent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_strength_percent_ = 0;
}
inline float RcStatus::signal_strength_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.RcStatus.signal_strength_percent)
  return _internal_signal_strength_percent();
}
inline void RcStatus::set_signal_strength_percent(float value) {
  _internal_set_signal_strength_percent(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.RcStatus.signal_strength_percent)
}
inline float RcStatus::_internal_signal_strength_percent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signal_strength_percent_;
}
inline void RcStatus::_internal_set_signal_strength_percent(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_strength_percent_ = value;
}

// -------------------------------------------------------------------

// StatusText

// .mavsdk.rpc.telemetry_server.StatusTextType type = 1;
inline void StatusText::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::StatusTextType StatusText::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.StatusText.type)
  return _internal_type();
}
inline void StatusText::set_type(::mavsdk::rpc::telemetry_server::StatusTextType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.StatusText.type)
}
inline ::mavsdk::rpc::telemetry_server::StatusTextType StatusText::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::StatusTextType>(_impl_.type_);
}
inline void StatusText::_internal_set_type(::mavsdk::rpc::telemetry_server::StatusTextType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string text = 2;
inline void StatusText::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& StatusText::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.StatusText.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StatusText::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.StatusText.text)
}
inline std::string* StatusText::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.StatusText.text)
  return _s;
}
inline const std::string& StatusText::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void StatusText::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.Set(value, GetArena());
}
inline std::string* StatusText::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* StatusText::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.StatusText.text)
  return _impl_.text_.Release();
}
inline void StatusText::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.StatusText.text)
}

// -------------------------------------------------------------------

// ActuatorControlTarget

// int32 group = 1 [(.mavsdk.options.default_value) = "0"];
inline void ActuatorControlTarget::clear_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_ = 0;
}
inline ::int32_t ActuatorControlTarget::group() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorControlTarget.group)
  return _internal_group();
}
inline void ActuatorControlTarget::set_group(::int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorControlTarget.group)
}
inline ::int32_t ActuatorControlTarget::_internal_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_;
}
inline void ActuatorControlTarget::_internal_set_group(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_ = value;
}

// repeated float controls = 2;
inline int ActuatorControlTarget::_internal_controls_size() const {
  return _internal_controls().size();
}
inline int ActuatorControlTarget::controls_size() const {
  return _internal_controls_size();
}
inline void ActuatorControlTarget::clear_controls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controls_.Clear();
}
inline float ActuatorControlTarget::controls(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
  return _internal_controls().Get(index);
}
inline void ActuatorControlTarget::set_controls(int index, float value) {
  _internal_mutable_controls()->Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
}
inline void ActuatorControlTarget::add_controls(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_controls()->Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
}
inline const ::google::protobuf::RepeatedField<float>& ActuatorControlTarget::controls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
  return _internal_controls();
}
inline ::google::protobuf::RepeatedField<float>* ActuatorControlTarget::mutable_controls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry_server.ActuatorControlTarget.controls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_controls();
}
inline const ::google::protobuf::RepeatedField<float>&
ActuatorControlTarget::_internal_controls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.controls_;
}
inline ::google::protobuf::RepeatedField<float>* ActuatorControlTarget::_internal_mutable_controls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.controls_;
}

// -------------------------------------------------------------------

// ActuatorOutputStatus

// uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
inline void ActuatorOutputStatus::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = 0u;
}
inline ::uint32_t ActuatorOutputStatus::active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.active)
  return _internal_active();
}
inline void ActuatorOutputStatus::set_active(::uint32_t value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.active)
}
inline ::uint32_t ActuatorOutputStatus::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void ActuatorOutputStatus::_internal_set_active(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// repeated float actuator = 2;
inline int ActuatorOutputStatus::_internal_actuator_size() const {
  return _internal_actuator().size();
}
inline int ActuatorOutputStatus::actuator_size() const {
  return _internal_actuator_size();
}
inline void ActuatorOutputStatus::clear_actuator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actuator_.Clear();
}
inline float ActuatorOutputStatus::actuator(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
  return _internal_actuator().Get(index);
}
inline void ActuatorOutputStatus::set_actuator(int index, float value) {
  _internal_mutable_actuator()->Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
}
inline void ActuatorOutputStatus::add_actuator(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_actuator()->Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
}
inline const ::google::protobuf::RepeatedField<float>& ActuatorOutputStatus::actuator() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
  return _internal_actuator();
}
inline ::google::protobuf::RepeatedField<float>* ActuatorOutputStatus::mutable_actuator()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry_server.ActuatorOutputStatus.actuator)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_actuator();
}
inline const ::google::protobuf::RepeatedField<float>&
ActuatorOutputStatus::_internal_actuator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actuator_;
}
inline ::google::protobuf::RepeatedField<float>* ActuatorOutputStatus::_internal_mutable_actuator() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.actuator_;
}

// -------------------------------------------------------------------

// Covariance

// repeated float covariance_matrix = 1;
inline int Covariance::_internal_covariance_matrix_size() const {
  return _internal_covariance_matrix().size();
}
inline int Covariance::covariance_matrix_size() const {
  return _internal_covariance_matrix_size();
}
inline void Covariance::clear_covariance_matrix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.covariance_matrix_.Clear();
}
inline float Covariance::covariance_matrix(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
  return _internal_covariance_matrix().Get(index);
}
inline void Covariance::set_covariance_matrix(int index, float value) {
  _internal_mutable_covariance_matrix()->Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
}
inline void Covariance::add_covariance_matrix(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_covariance_matrix()->Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
}
inline const ::google::protobuf::RepeatedField<float>& Covariance::covariance_matrix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
  return _internal_covariance_matrix();
}
inline ::google::protobuf::RepeatedField<float>* Covariance::mutable_covariance_matrix()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry_server.Covariance.covariance_matrix)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_covariance_matrix();
}
inline const ::google::protobuf::RepeatedField<float>&
Covariance::_internal_covariance_matrix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.covariance_matrix_;
}
inline ::google::protobuf::RepeatedField<float>* Covariance::_internal_mutable_covariance_matrix() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.covariance_matrix_;
}

// -------------------------------------------------------------------

// VelocityBody

// float x_m_s = 1;
inline void VelocityBody::clear_x_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_m_s_ = 0;
}
inline float VelocityBody::x_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityBody.x_m_s)
  return _internal_x_m_s();
}
inline void VelocityBody::set_x_m_s(float value) {
  _internal_set_x_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityBody.x_m_s)
}
inline float VelocityBody::_internal_x_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_m_s_;
}
inline void VelocityBody::_internal_set_x_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_m_s_ = value;
}

// float y_m_s = 2;
inline void VelocityBody::clear_y_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_m_s_ = 0;
}
inline float VelocityBody::y_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityBody.y_m_s)
  return _internal_y_m_s();
}
inline void VelocityBody::set_y_m_s(float value) {
  _internal_set_y_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityBody.y_m_s)
}
inline float VelocityBody::_internal_y_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_m_s_;
}
inline void VelocityBody::_internal_set_y_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_m_s_ = value;
}

// float z_m_s = 3;
inline void VelocityBody::clear_z_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_m_s_ = 0;
}
inline float VelocityBody::z_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityBody.z_m_s)
  return _internal_z_m_s();
}
inline void VelocityBody::set_z_m_s(float value) {
  _internal_set_z_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityBody.z_m_s)
}
inline float VelocityBody::_internal_z_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_m_s_;
}
inline void VelocityBody::_internal_set_z_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_m_s_ = value;
}

// -------------------------------------------------------------------

// PositionBody

// float x_m = 1;
inline void PositionBody::clear_x_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_m_ = 0;
}
inline float PositionBody::x_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionBody.x_m)
  return _internal_x_m();
}
inline void PositionBody::set_x_m(float value) {
  _internal_set_x_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionBody.x_m)
}
inline float PositionBody::_internal_x_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_m_;
}
inline void PositionBody::_internal_set_x_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_m_ = value;
}

// float y_m = 2;
inline void PositionBody::clear_y_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_m_ = 0;
}
inline float PositionBody::y_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionBody.y_m)
  return _internal_y_m();
}
inline void PositionBody::set_y_m(float value) {
  _internal_set_y_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionBody.y_m)
}
inline float PositionBody::_internal_y_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_m_;
}
inline void PositionBody::_internal_set_y_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_m_ = value;
}

// float z_m = 3;
inline void PositionBody::clear_z_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_m_ = 0;
}
inline float PositionBody::z_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionBody.z_m)
  return _internal_z_m();
}
inline void PositionBody::set_z_m(float value) {
  _internal_set_z_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionBody.z_m)
}
inline float PositionBody::_internal_z_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_m_;
}
inline void PositionBody::_internal_set_z_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_m_ = value;
}

// -------------------------------------------------------------------

// Odometry

// uint64 time_usec = 1;
inline void Odometry::clear_time_usec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_usec_ = ::uint64_t{0u};
}
inline ::uint64_t Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.time_usec)
  return _internal_time_usec();
}
inline void Odometry::set_time_usec(::uint64_t value) {
  _internal_set_time_usec(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Odometry.time_usec)
}
inline ::uint64_t Odometry::_internal_time_usec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_usec_;
}
inline void Odometry::_internal_set_time_usec(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_usec_ = value;
}

// .mavsdk.rpc.telemetry_server.Odometry.MavFrame frame_id = 2;
inline void Odometry::clear_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.frame_id)
  return _internal_frame_id();
}
inline void Odometry::set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Odometry.frame_id)
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::_internal_frame_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::Odometry_MavFrame>(_impl_.frame_id_);
}
inline void Odometry::_internal_set_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_id_ = value;
}

// .mavsdk.rpc.telemetry_server.Odometry.MavFrame child_frame_id = 3;
inline void Odometry::clear_child_frame_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
inline void Odometry::set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  _internal_set_child_frame_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Odometry.child_frame_id)
}
inline ::mavsdk::rpc::telemetry_server::Odometry_MavFrame Odometry::_internal_child_frame_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::Odometry_MavFrame>(_impl_.child_frame_id_);
}
inline void Odometry::_internal_set_child_frame_id(::mavsdk::rpc::telemetry_server::Odometry_MavFrame value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.child_frame_id_ = value;
}

// .mavsdk.rpc.telemetry_server.PositionBody position_body = 4;
inline bool Odometry::has_position_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_body_ != nullptr);
  return value;
}
inline void Odometry::clear_position_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_body_ != nullptr) _impl_.position_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::PositionBody& Odometry::_internal_position_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::PositionBody* p = _impl_.position_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::PositionBody&>(::mavsdk::rpc::telemetry_server::_PositionBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::PositionBody& Odometry::position_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.position_body)
  return _internal_position_body();
}
inline void Odometry::unsafe_arena_set_allocated_position_body(::mavsdk::rpc::telemetry_server::PositionBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_body_);
  }
  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.position_body)
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::release_position_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionBody* released = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::unsafe_arena_release_position_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.position_body)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionBody* temp = _impl_.position_body_;
  _impl_.position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::_internal_mutable_position_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::PositionBody>(GetArena());
    _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionBody*>(p);
  }
  return _impl_.position_body_;
}
inline ::mavsdk::rpc::telemetry_server::PositionBody* Odometry::mutable_position_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionBody* _msg = _internal_mutable_position_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.position_body)
  return _msg;
}
inline void Odometry::set_allocated_position_body(::mavsdk::rpc::telemetry_server::PositionBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.position_body)
}

// .mavsdk.rpc.telemetry_server.Quaternion q = 5;
inline bool Odometry::has_q() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_ != nullptr);
  return value;
}
inline void Odometry::clear_q() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_ != nullptr) _impl_.q_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::telemetry_server::Quaternion& Odometry::_internal_q() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Quaternion* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Quaternion&>(::mavsdk::rpc::telemetry_server::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Quaternion& Odometry::q() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.q)
  return _internal_q();
}
inline void Odometry::unsafe_arena_set_allocated_q(::mavsdk::rpc::telemetry_server::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.q)
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::release_q() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::Quaternion* released = _impl_.q_;
  _impl_.q_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::unsafe_arena_release_q() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.q)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::Quaternion* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::_internal_mutable_q() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Quaternion>(GetArena());
    _impl_.q_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Quaternion*>(p);
  }
  return _impl_.q_;
}
inline ::mavsdk::rpc::telemetry_server::Quaternion* Odometry::mutable_q() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::telemetry_server::Quaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.q)
  return _msg;
}
inline void Odometry::set_allocated_q(::mavsdk::rpc::telemetry_server::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.q_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.q_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.q)
}

// .mavsdk.rpc.telemetry_server.VelocityBody velocity_body = 6;
inline bool Odometry::has_velocity_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_body_ != nullptr);
  return value;
}
inline void Odometry::clear_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_body_ != nullptr) _impl_.velocity_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::telemetry_server::VelocityBody& Odometry::_internal_velocity_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::VelocityBody* p = _impl_.velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::VelocityBody&>(::mavsdk::rpc::telemetry_server::_VelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::VelocityBody& Odometry::velocity_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
  return _internal_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_body(::mavsdk::rpc::telemetry_server::VelocityBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_body_);
  }
  _impl_.velocity_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::release_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::telemetry_server::VelocityBody* released = _impl_.velocity_body_;
  _impl_.velocity_body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::unsafe_arena_release_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.velocity_body)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::telemetry_server::VelocityBody* temp = _impl_.velocity_body_;
  _impl_.velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::_internal_mutable_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::VelocityBody>(GetArena());
    _impl_.velocity_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityBody*>(p);
  }
  return _impl_.velocity_body_;
}
inline ::mavsdk::rpc::telemetry_server::VelocityBody* Odometry::mutable_velocity_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::mavsdk::rpc::telemetry_server::VelocityBody* _msg = _internal_mutable_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_velocity_body(::mavsdk::rpc::telemetry_server::VelocityBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.velocity_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_body)
}

// .mavsdk.rpc.telemetry_server.AngularVelocityBody angular_velocity_body = 7;
inline bool Odometry::has_angular_velocity_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_body_ != nullptr);
  return value;
}
inline void Odometry::clear_angular_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_body_ != nullptr) _impl_.angular_velocity_body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& Odometry::_internal_angular_velocity_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::AngularVelocityBody* p = _impl_.angular_velocity_body_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AngularVelocityBody&>(::mavsdk::rpc::telemetry_server::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityBody& Odometry::angular_velocity_body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
  return _internal_angular_velocity_body();
}
inline void Odometry::unsafe_arena_set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_body_);
  }
  _impl_.angular_velocity_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::release_angular_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* released = _impl_.angular_velocity_body_;
  _impl_.angular_velocity_body_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::unsafe_arena_release_angular_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* temp = _impl_.angular_velocity_body_;
  _impl_.angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::_internal_mutable_angular_velocity_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_body_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityBody>(GetArena());
    _impl_.angular_velocity_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(p);
  }
  return _impl_.angular_velocity_body_;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityBody* Odometry::mutable_angular_velocity_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityBody* _msg = _internal_mutable_angular_velocity_body();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
  return _msg;
}
inline void Odometry::set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry_server::AngularVelocityBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angular_velocity_body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.angular_velocity_body_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body)
}

// .mavsdk.rpc.telemetry_server.Covariance pose_covariance = 8;
inline bool Odometry::has_pose_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_covariance_ != nullptr);
  return value;
}
inline void Odometry::clear_pose_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_covariance_ != nullptr) _impl_.pose_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::_internal_pose_covariance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Covariance* p = _impl_.pose_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Covariance&>(::mavsdk::rpc::telemetry_server::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::pose_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
  return _internal_pose_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_pose_covariance(::mavsdk::rpc::telemetry_server::Covariance* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_covariance_);
  }
  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Covariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::release_pose_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::mavsdk::rpc::telemetry_server::Covariance* released = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::unsafe_arena_release_pose_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::mavsdk::rpc::telemetry_server::Covariance* temp = _impl_.pose_covariance_;
  _impl_.pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::_internal_mutable_pose_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pose_covariance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Covariance>(GetArena());
    _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Covariance*>(p);
  }
  return _impl_.pose_covariance_;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::mutable_pose_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::mavsdk::rpc::telemetry_server::Covariance* _msg = _internal_mutable_pose_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
  return _msg;
}
inline void Odometry::set_allocated_pose_covariance(::mavsdk::rpc::telemetry_server::Covariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pose_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.pose_covariance_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Covariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.pose_covariance)
}

// .mavsdk.rpc.telemetry_server.Covariance velocity_covariance = 9;
inline bool Odometry::has_velocity_covariance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_covariance_ != nullptr);
  return value;
}
inline void Odometry::clear_velocity_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_covariance_ != nullptr) _impl_.velocity_covariance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::_internal_velocity_covariance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::Covariance* p = _impl_.velocity_covariance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::Covariance&>(::mavsdk::rpc::telemetry_server::_Covariance_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::Covariance& Odometry::velocity_covariance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
  return _internal_velocity_covariance();
}
inline void Odometry::unsafe_arena_set_allocated_velocity_covariance(::mavsdk::rpc::telemetry_server::Covariance* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_covariance_);
  }
  _impl_.velocity_covariance_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Covariance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::release_velocity_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::mavsdk::rpc::telemetry_server::Covariance* released = _impl_.velocity_covariance_;
  _impl_.velocity_covariance_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::unsafe_arena_release_velocity_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::mavsdk::rpc::telemetry_server::Covariance* temp = _impl_.velocity_covariance_;
  _impl_.velocity_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::_internal_mutable_velocity_covariance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_covariance_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::Covariance>(GetArena());
    _impl_.velocity_covariance_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Covariance*>(p);
  }
  return _impl_.velocity_covariance_;
}
inline ::mavsdk::rpc::telemetry_server::Covariance* Odometry::mutable_velocity_covariance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::mavsdk::rpc::telemetry_server::Covariance* _msg = _internal_mutable_velocity_covariance();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
  return _msg;
}
inline void Odometry::set_allocated_velocity_covariance(::mavsdk::rpc::telemetry_server::Covariance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_covariance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.velocity_covariance_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::Covariance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Odometry.velocity_covariance)
}

// -------------------------------------------------------------------

// DistanceSensor

// float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_minimum_distance_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_distance_m_ = 0;
}
inline float DistanceSensor::minimum_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.DistanceSensor.minimum_distance_m)
  return _internal_minimum_distance_m();
}
inline void DistanceSensor::set_minimum_distance_m(float value) {
  _internal_set_minimum_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.DistanceSensor.minimum_distance_m)
}
inline float DistanceSensor::_internal_minimum_distance_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minimum_distance_m_;
}
inline void DistanceSensor::_internal_set_minimum_distance_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minimum_distance_m_ = value;
}

// float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_maximum_distance_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_distance_m_ = 0;
}
inline float DistanceSensor::maximum_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.DistanceSensor.maximum_distance_m)
  return _internal_maximum_distance_m();
}
inline void DistanceSensor::set_maximum_distance_m(float value) {
  _internal_set_maximum_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.DistanceSensor.maximum_distance_m)
}
inline float DistanceSensor::_internal_maximum_distance_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maximum_distance_m_;
}
inline void DistanceSensor::_internal_set_maximum_distance_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maximum_distance_m_ = value;
}

// float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void DistanceSensor::clear_current_distance_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_distance_m_ = 0;
}
inline float DistanceSensor::current_distance_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.DistanceSensor.current_distance_m)
  return _internal_current_distance_m();
}
inline void DistanceSensor::set_current_distance_m(float value) {
  _internal_set_current_distance_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.DistanceSensor.current_distance_m)
}
inline float DistanceSensor::_internal_current_distance_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_distance_m_;
}
inline void DistanceSensor::_internal_set_current_distance_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_distance_m_ = value;
}

// -------------------------------------------------------------------

// ScaledPressure

// uint64 timestamp_us = 1;
inline void ScaledPressure::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::uint64_t{0u};
}
inline ::uint64_t ScaledPressure::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.timestamp_us)
  return _internal_timestamp_us();
}
inline void ScaledPressure::set_timestamp_us(::uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.timestamp_us)
}
inline ::uint64_t ScaledPressure::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void ScaledPressure::_internal_set_timestamp_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// float absolute_pressure_hpa = 2;
inline void ScaledPressure::clear_absolute_pressure_hpa() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_pressure_hpa_ = 0;
}
inline float ScaledPressure::absolute_pressure_hpa() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.absolute_pressure_hpa)
  return _internal_absolute_pressure_hpa();
}
inline void ScaledPressure::set_absolute_pressure_hpa(float value) {
  _internal_set_absolute_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.absolute_pressure_hpa)
}
inline float ScaledPressure::_internal_absolute_pressure_hpa() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_pressure_hpa_;
}
inline void ScaledPressure::_internal_set_absolute_pressure_hpa(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_pressure_hpa_ = value;
}

// float differential_pressure_hpa = 3;
inline void ScaledPressure::clear_differential_pressure_hpa() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.differential_pressure_hpa_ = 0;
}
inline float ScaledPressure::differential_pressure_hpa() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_hpa)
  return _internal_differential_pressure_hpa();
}
inline void ScaledPressure::set_differential_pressure_hpa(float value) {
  _internal_set_differential_pressure_hpa(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_hpa)
}
inline float ScaledPressure::_internal_differential_pressure_hpa() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.differential_pressure_hpa_;
}
inline void ScaledPressure::_internal_set_differential_pressure_hpa(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.differential_pressure_hpa_ = value;
}

// float temperature_deg = 4;
inline void ScaledPressure::clear_temperature_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_deg_ = 0;
}
inline float ScaledPressure::temperature_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.temperature_deg)
  return _internal_temperature_deg();
}
inline void ScaledPressure::set_temperature_deg(float value) {
  _internal_set_temperature_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.temperature_deg)
}
inline float ScaledPressure::_internal_temperature_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_deg_;
}
inline void ScaledPressure::_internal_set_temperature_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_deg_ = value;
}

// float differential_pressure_temperature_deg = 5;
inline void ScaledPressure::clear_differential_pressure_temperature_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.differential_pressure_temperature_deg_ = 0;
}
inline float ScaledPressure::differential_pressure_temperature_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_temperature_deg)
  return _internal_differential_pressure_temperature_deg();
}
inline void ScaledPressure::set_differential_pressure_temperature_deg(float value) {
  _internal_set_differential_pressure_temperature_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.ScaledPressure.differential_pressure_temperature_deg)
}
inline float ScaledPressure::_internal_differential_pressure_temperature_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.differential_pressure_temperature_deg_;
}
inline void ScaledPressure::_internal_set_differential_pressure_temperature_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.differential_pressure_temperature_deg_ = value;
}

// -------------------------------------------------------------------

// PositionNed

// float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_north_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.north_m_ = 0;
}
inline float PositionNed::north_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionNed.north_m)
  return _internal_north_m();
}
inline void PositionNed::set_north_m(float value) {
  _internal_set_north_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionNed.north_m)
}
inline float PositionNed::_internal_north_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.north_m_;
}
inline void PositionNed::_internal_set_north_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.north_m_ = value;
}

// float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_east_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.east_m_ = 0;
}
inline float PositionNed::east_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionNed.east_m)
  return _internal_east_m();
}
inline void PositionNed::set_east_m(float value) {
  _internal_set_east_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionNed.east_m)
}
inline float PositionNed::_internal_east_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.east_m_;
}
inline void PositionNed::_internal_set_east_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.east_m_ = value;
}

// float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void PositionNed::clear_down_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_m_ = 0;
}
inline float PositionNed::down_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionNed.down_m)
  return _internal_down_m();
}
inline void PositionNed::set_down_m(float value) {
  _internal_set_down_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.PositionNed.down_m)
}
inline float PositionNed::_internal_down_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.down_m_;
}
inline void PositionNed::_internal_set_down_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_m_ = value;
}

// -------------------------------------------------------------------

// VelocityNed

// float north_m_s = 1;
inline void VelocityNed::clear_north_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.north_m_s_ = 0;
}
inline float VelocityNed::north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityNed.north_m_s)
  return _internal_north_m_s();
}
inline void VelocityNed::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityNed.north_m_s)
}
inline float VelocityNed::_internal_north_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.north_m_s_;
}
inline void VelocityNed::_internal_set_north_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.north_m_s_ = value;
}

// float east_m_s = 2;
inline void VelocityNed::clear_east_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.east_m_s_ = 0;
}
inline float VelocityNed::east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityNed.east_m_s)
  return _internal_east_m_s();
}
inline void VelocityNed::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityNed.east_m_s)
}
inline float VelocityNed::_internal_east_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.east_m_s_;
}
inline void VelocityNed::_internal_set_east_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.east_m_s_ = value;
}

// float down_m_s = 3;
inline void VelocityNed::clear_down_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_m_s_ = 0;
}
inline float VelocityNed::down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.VelocityNed.down_m_s)
  return _internal_down_m_s();
}
inline void VelocityNed::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.VelocityNed.down_m_s)
}
inline float VelocityNed::_internal_down_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.down_m_s_;
}
inline void VelocityNed::_internal_set_down_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_m_s_ = value;
}

// -------------------------------------------------------------------

// PositionVelocityNed

// .mavsdk.rpc.telemetry_server.PositionNed position = 1;
inline bool PositionVelocityNed::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void PositionVelocityNed::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::PositionNed& PositionVelocityNed::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::PositionNed* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::PositionNed&>(::mavsdk::rpc::telemetry_server::_PositionNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::PositionNed& PositionVelocityNed::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
  return _internal_position();
}
inline void PositionVelocityNed::unsafe_arena_set_allocated_position(::mavsdk::rpc::telemetry_server::PositionNed* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionNed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionNed* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionNed* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::PositionNed>(GetArena());
    _impl_.position_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionNed*>(p);
  }
  return _impl_.position_;
}
inline ::mavsdk::rpc::telemetry_server::PositionNed* PositionVelocityNed::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::PositionNed* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
  return _msg;
}
inline void PositionVelocityNed::set_allocated_position(::mavsdk::rpc::telemetry_server::PositionNed* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::PositionNed*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.position)
}

// .mavsdk.rpc.telemetry_server.VelocityNed velocity = 2;
inline bool PositionVelocityNed::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void PositionVelocityNed::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PositionVelocityNed::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::VelocityNed* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::VelocityNed&>(::mavsdk::rpc::telemetry_server::_VelocityNed_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::VelocityNed& PositionVelocityNed::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
  return _internal_velocity();
}
inline void PositionVelocityNed::unsafe_arena_set_allocated_velocity(::mavsdk::rpc::telemetry_server::VelocityNed* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityNed*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::VelocityNed* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::unsafe_arena_release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::VelocityNed* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::_internal_mutable_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::VelocityNed>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityNed*>(p);
  }
  return _impl_.velocity_;
}
inline ::mavsdk::rpc::telemetry_server::VelocityNed* PositionVelocityNed::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::telemetry_server::VelocityNed* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
  return _msg;
}
inline void PositionVelocityNed::set_allocated_velocity(::mavsdk::rpc::telemetry_server::VelocityNed* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.velocity_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::VelocityNed*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity)
}

// -------------------------------------------------------------------

// GroundTruth

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_latitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = 0;
}
inline double GroundTruth::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GroundTruth.latitude_deg)
  return _internal_latitude_deg();
}
inline void GroundTruth::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GroundTruth.latitude_deg)
}
inline double GroundTruth::_internal_latitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_deg_;
}
inline void GroundTruth::_internal_set_latitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_longitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = 0;
}
inline double GroundTruth::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GroundTruth.longitude_deg)
  return _internal_longitude_deg();
}
inline void GroundTruth::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GroundTruth.longitude_deg)
}
inline double GroundTruth::_internal_longitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_deg_;
}
inline void GroundTruth::_internal_set_longitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = value;
}

// float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void GroundTruth::clear_absolute_altitude_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = 0;
}
inline float GroundTruth::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.GroundTruth.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void GroundTruth::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.GroundTruth.absolute_altitude_m)
}
inline float GroundTruth::_internal_absolute_altitude_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_altitude_m_;
}
inline void GroundTruth::_internal_set_absolute_altitude_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = value;
}

// -------------------------------------------------------------------

// FixedwingMetrics

// float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_airspeed_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.airspeed_m_s_ = 0;
}
inline float FixedwingMetrics::airspeed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.airspeed_m_s)
  return _internal_airspeed_m_s();
}
inline void FixedwingMetrics::set_airspeed_m_s(float value) {
  _internal_set_airspeed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.airspeed_m_s)
}
inline float FixedwingMetrics::_internal_airspeed_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.airspeed_m_s_;
}
inline void FixedwingMetrics::_internal_set_airspeed_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.airspeed_m_s_ = value;
}

// float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_throttle_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_percentage_ = 0;
}
inline float FixedwingMetrics::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.throttle_percentage)
  return _internal_throttle_percentage();
}
inline void FixedwingMetrics::set_throttle_percentage(float value) {
  _internal_set_throttle_percentage(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.throttle_percentage)
}
inline float FixedwingMetrics::_internal_throttle_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.throttle_percentage_;
}
inline void FixedwingMetrics::_internal_set_throttle_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.throttle_percentage_ = value;
}

// float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_climb_rate_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.climb_rate_m_s_ = 0;
}
inline float FixedwingMetrics::climb_rate_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.climb_rate_m_s)
  return _internal_climb_rate_m_s();
}
inline void FixedwingMetrics::set_climb_rate_m_s(float value) {
  _internal_set_climb_rate_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.climb_rate_m_s)
}
inline float FixedwingMetrics::_internal_climb_rate_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.climb_rate_m_s_;
}
inline void FixedwingMetrics::_internal_set_climb_rate_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.climb_rate_m_s_ = value;
}

// float groundspeed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_groundspeed_m_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.groundspeed_m_s_ = 0;
}
inline float FixedwingMetrics::groundspeed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.groundspeed_m_s)
  return _internal_groundspeed_m_s();
}
inline void FixedwingMetrics::set_groundspeed_m_s(float value) {
  _internal_set_groundspeed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.groundspeed_m_s)
}
inline float FixedwingMetrics::_internal_groundspeed_m_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.groundspeed_m_s_;
}
inline void FixedwingMetrics::_internal_set_groundspeed_m_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.groundspeed_m_s_ = value;
}

// float heading_deg = 5 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_heading_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_deg_ = 0;
}
inline float FixedwingMetrics::heading_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.heading_deg)
  return _internal_heading_deg();
}
inline void FixedwingMetrics::set_heading_deg(float value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.heading_deg)
}
inline float FixedwingMetrics::_internal_heading_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.heading_deg_;
}
inline void FixedwingMetrics::_internal_set_heading_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.heading_deg_ = value;
}

// float absolute_altitude_m = 6 [(.mavsdk.options.default_value) = "NaN"];
inline void FixedwingMetrics::clear_absolute_altitude_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = 0;
}
inline float FixedwingMetrics::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.FixedwingMetrics.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void FixedwingMetrics::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.FixedwingMetrics.absolute_altitude_m)
}
inline float FixedwingMetrics::_internal_absolute_altitude_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.absolute_altitude_m_;
}
inline void FixedwingMetrics::_internal_set_absolute_altitude_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.absolute_altitude_m_ = value;
}

// -------------------------------------------------------------------

// AccelerationFrd

// float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_forward_m_s2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forward_m_s2_ = 0;
}
inline float AccelerationFrd::forward_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AccelerationFrd.forward_m_s2)
  return _internal_forward_m_s2();
}
inline void AccelerationFrd::set_forward_m_s2(float value) {
  _internal_set_forward_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AccelerationFrd.forward_m_s2)
}
inline float AccelerationFrd::_internal_forward_m_s2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forward_m_s2_;
}
inline void AccelerationFrd::_internal_set_forward_m_s2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forward_m_s2_ = value;
}

// float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_right_m_s2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_m_s2_ = 0;
}
inline float AccelerationFrd::right_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AccelerationFrd.right_m_s2)
  return _internal_right_m_s2();
}
inline void AccelerationFrd::set_right_m_s2(float value) {
  _internal_set_right_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AccelerationFrd.right_m_s2)
}
inline float AccelerationFrd::_internal_right_m_s2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.right_m_s2_;
}
inline void AccelerationFrd::_internal_set_right_m_s2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_m_s2_ = value;
}

// float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AccelerationFrd::clear_down_m_s2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_m_s2_ = 0;
}
inline float AccelerationFrd::down_m_s2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AccelerationFrd.down_m_s2)
  return _internal_down_m_s2();
}
inline void AccelerationFrd::set_down_m_s2(float value) {
  _internal_set_down_m_s2(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AccelerationFrd.down_m_s2)
}
inline float AccelerationFrd::_internal_down_m_s2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.down_m_s2_;
}
inline void AccelerationFrd::_internal_set_down_m_s2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_m_s2_ = value;
}

// -------------------------------------------------------------------

// AngularVelocityFrd

// float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_forward_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forward_rad_s_ = 0;
}
inline float AngularVelocityFrd::forward_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityFrd.forward_rad_s)
  return _internal_forward_rad_s();
}
inline void AngularVelocityFrd::set_forward_rad_s(float value) {
  _internal_set_forward_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityFrd.forward_rad_s)
}
inline float AngularVelocityFrd::_internal_forward_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forward_rad_s_;
}
inline void AngularVelocityFrd::_internal_set_forward_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forward_rad_s_ = value;
}

// float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_right_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_rad_s_ = 0;
}
inline float AngularVelocityFrd::right_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityFrd.right_rad_s)
  return _internal_right_rad_s();
}
inline void AngularVelocityFrd::set_right_rad_s(float value) {
  _internal_set_right_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityFrd.right_rad_s)
}
inline float AngularVelocityFrd::_internal_right_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.right_rad_s_;
}
inline void AngularVelocityFrd::_internal_set_right_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_rad_s_ = value;
}

// float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityFrd::clear_down_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_rad_s_ = 0;
}
inline float AngularVelocityFrd::down_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.AngularVelocityFrd.down_rad_s)
  return _internal_down_rad_s();
}
inline void AngularVelocityFrd::set_down_rad_s(float value) {
  _internal_set_down_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.AngularVelocityFrd.down_rad_s)
}
inline float AngularVelocityFrd::_internal_down_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.down_rad_s_;
}
inline void AngularVelocityFrd::_internal_set_down_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_rad_s_ = value;
}

// -------------------------------------------------------------------

// MagneticFieldFrd

// float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_forward_gauss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forward_gauss_ = 0;
}
inline float MagneticFieldFrd::forward_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.MagneticFieldFrd.forward_gauss)
  return _internal_forward_gauss();
}
inline void MagneticFieldFrd::set_forward_gauss(float value) {
  _internal_set_forward_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.MagneticFieldFrd.forward_gauss)
}
inline float MagneticFieldFrd::_internal_forward_gauss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forward_gauss_;
}
inline void MagneticFieldFrd::_internal_set_forward_gauss(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forward_gauss_ = value;
}

// float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_right_gauss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_gauss_ = 0;
}
inline float MagneticFieldFrd::right_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.MagneticFieldFrd.right_gauss)
  return _internal_right_gauss();
}
inline void MagneticFieldFrd::set_right_gauss(float value) {
  _internal_set_right_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.MagneticFieldFrd.right_gauss)
}
inline float MagneticFieldFrd::_internal_right_gauss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.right_gauss_;
}
inline void MagneticFieldFrd::_internal_set_right_gauss(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.right_gauss_ = value;
}

// float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void MagneticFieldFrd::clear_down_gauss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_gauss_ = 0;
}
inline float MagneticFieldFrd::down_gauss() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.MagneticFieldFrd.down_gauss)
  return _internal_down_gauss();
}
inline void MagneticFieldFrd::set_down_gauss(float value) {
  _internal_set_down_gauss(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.MagneticFieldFrd.down_gauss)
}
inline float MagneticFieldFrd::_internal_down_gauss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.down_gauss_;
}
inline void MagneticFieldFrd::_internal_set_down_gauss(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.down_gauss_ = value;
}

// -------------------------------------------------------------------

// Imu

// .mavsdk.rpc.telemetry_server.AccelerationFrd acceleration_frd = 1;
inline bool Imu::has_acceleration_frd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_frd_ != nullptr);
  return value;
}
inline void Imu::clear_acceleration_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.acceleration_frd_ != nullptr) _impl_.acceleration_frd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::telemetry_server::AccelerationFrd& Imu::_internal_acceleration_frd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::AccelerationFrd* p = _impl_.acceleration_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AccelerationFrd&>(::mavsdk::rpc::telemetry_server::_AccelerationFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AccelerationFrd& Imu::acceleration_frd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
  return _internal_acceleration_frd();
}
inline void Imu::unsafe_arena_set_allocated_acceleration_frd(::mavsdk::rpc::telemetry_server::AccelerationFrd* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.acceleration_frd_);
  }
  _impl_.acceleration_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AccelerationFrd*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::release_acceleration_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* released = _impl_.acceleration_frd_;
  _impl_.acceleration_frd_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::unsafe_arena_release_acceleration_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* temp = _impl_.acceleration_frd_;
  _impl_.acceleration_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::_internal_mutable_acceleration_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.acceleration_frd_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::AccelerationFrd>(GetArena());
    _impl_.acceleration_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AccelerationFrd*>(p);
  }
  return _impl_.acceleration_frd_;
}
inline ::mavsdk::rpc::telemetry_server::AccelerationFrd* Imu::mutable_acceleration_frd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::telemetry_server::AccelerationFrd* _msg = _internal_mutable_acceleration_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
  return _msg;
}
inline void Imu::set_allocated_acceleration_frd(::mavsdk::rpc::telemetry_server::AccelerationFrd* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.acceleration_frd_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.acceleration_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AccelerationFrd*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Imu.acceleration_frd)
}

// .mavsdk.rpc.telemetry_server.AngularVelocityFrd angular_velocity_frd = 2;
inline bool Imu::has_angular_velocity_frd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_frd_ != nullptr);
  return value;
}
inline void Imu::clear_angular_velocity_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_frd_ != nullptr) _impl_.angular_velocity_frd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& Imu::_internal_angular_velocity_frd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* p = _impl_.angular_velocity_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd&>(::mavsdk::rpc::telemetry_server::_AngularVelocityFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::AngularVelocityFrd& Imu::angular_velocity_frd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
  return _internal_angular_velocity_frd();
}
inline void Imu::unsafe_arena_set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry_server::AngularVelocityFrd* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_frd_);
  }
  _impl_.angular_velocity_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityFrd*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::release_angular_velocity_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* released = _impl_.angular_velocity_frd_;
  _impl_.angular_velocity_frd_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::unsafe_arena_release_angular_velocity_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* temp = _impl_.angular_velocity_frd_;
  _impl_.angular_velocity_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::_internal_mutable_angular_velocity_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_frd_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::AngularVelocityFrd>(GetArena());
    _impl_.angular_velocity_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityFrd*>(p);
  }
  return _impl_.angular_velocity_frd_;
}
inline ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* Imu::mutable_angular_velocity_frd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::telemetry_server::AngularVelocityFrd* _msg = _internal_mutable_angular_velocity_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
  return _msg;
}
inline void Imu::set_allocated_angular_velocity_frd(::mavsdk::rpc::telemetry_server::AngularVelocityFrd* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angular_velocity_frd_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.angular_velocity_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::AngularVelocityFrd*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd)
}

// .mavsdk.rpc.telemetry_server.MagneticFieldFrd magnetic_field_frd = 3;
inline bool Imu::has_magnetic_field_frd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.magnetic_field_frd_ != nullptr);
  return value;
}
inline void Imu::clear_magnetic_field_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_frd_ != nullptr) _impl_.magnetic_field_frd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& Imu::_internal_magnetic_field_frd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* p = _impl_.magnetic_field_frd_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd&>(::mavsdk::rpc::telemetry_server::_MagneticFieldFrd_default_instance_);
}
inline const ::mavsdk::rpc::telemetry_server::MagneticFieldFrd& Imu::magnetic_field_frd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
  return _internal_magnetic_field_frd();
}
inline void Imu::unsafe_arena_set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry_server::MagneticFieldFrd* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.magnetic_field_frd_);
  }
  _impl_.magnetic_field_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::MagneticFieldFrd*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::release_magnetic_field_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* released = _impl_.magnetic_field_frd_;
  _impl_.magnetic_field_frd_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::unsafe_arena_release_magnetic_field_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* temp = _impl_.magnetic_field_frd_;
  _impl_.magnetic_field_frd_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::_internal_mutable_magnetic_field_frd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.magnetic_field_frd_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::telemetry_server::MagneticFieldFrd>(GetArena());
    _impl_.magnetic_field_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::MagneticFieldFrd*>(p);
  }
  return _impl_.magnetic_field_frd_;
}
inline ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* Imu::mutable_magnetic_field_frd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::mavsdk::rpc::telemetry_server::MagneticFieldFrd* _msg = _internal_mutable_magnetic_field_frd();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
  return _msg;
}
inline void Imu::set_allocated_magnetic_field_frd(::mavsdk::rpc::telemetry_server::MagneticFieldFrd* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.magnetic_field_frd_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.magnetic_field_frd_ = reinterpret_cast<::mavsdk::rpc::telemetry_server::MagneticFieldFrd*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd)
}

// float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Imu::clear_temperature_degc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_degc_ = 0;
}
inline float Imu::temperature_degc() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.temperature_degc)
  return _internal_temperature_degc();
}
inline void Imu::set_temperature_degc(float value) {
  _internal_set_temperature_degc(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Imu.temperature_degc)
}
inline float Imu::_internal_temperature_degc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_degc_;
}
inline void Imu::_internal_set_temperature_degc(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_degc_ = value;
}

// uint64 timestamp_us = 5;
inline void Imu::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::uint64_t{0u};
}
inline ::uint64_t Imu::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.Imu.timestamp_us)
  return _internal_timestamp_us();
}
inline void Imu::set_timestamp_us(::uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.Imu.timestamp_us)
}
inline ::uint64_t Imu::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void Imu::_internal_set_timestamp_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// -------------------------------------------------------------------

// TelemetryServerResult

// .mavsdk.rpc.telemetry_server.TelemetryServerResult.Result result = 1;
inline void TelemetryServerResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result TelemetryServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.TelemetryServerResult.result)
  return _internal_result();
}
inline void TelemetryServerResult::set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.TelemetryServerResult.result)
}
inline ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result TelemetryServerResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result>(_impl_.result_);
}
inline void TelemetryServerResult::_internal_set_result(::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string result_str = 2;
inline void TelemetryServerResult::clear_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& TelemetryServerResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TelemetryServerResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
}
inline std::string* TelemetryServerResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
  return _s;
}
inline const std::string& TelemetryServerResult::_internal_result_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_str_.Get();
}
inline void TelemetryServerResult::_internal_set_result_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* TelemetryServerResult::_internal_mutable_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* TelemetryServerResult::release_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
  return _impl_.result_str_.Release();
}
inline void TelemetryServerResult::set_allocated_result_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry_server.TelemetryServerResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry_server
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::telemetry_server::Odometry_MavFrame> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::telemetry_server::Odometry_MavFrame>() {
  return ::mavsdk::rpc::telemetry_server::Odometry_MavFrame_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result>() {
  return ::mavsdk::rpc::telemetry_server::TelemetryServerResult_Result_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::telemetry_server::FixType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::telemetry_server::FixType>() {
  return ::mavsdk::rpc::telemetry_server::FixType_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::telemetry_server::VtolState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::telemetry_server::VtolState>() {
  return ::mavsdk::rpc::telemetry_server::VtolState_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::telemetry_server::StatusTextType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::telemetry_server::StatusTextType>() {
  return ::mavsdk::rpc::telemetry_server::StatusTextType_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::telemetry_server::LandedState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::telemetry_server::LandedState>() {
  return ::mavsdk::rpc::telemetry_server::LandedState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // telemetry_5fserver_2ftelemetry_5fserver_2eproto_2epb_2eh
