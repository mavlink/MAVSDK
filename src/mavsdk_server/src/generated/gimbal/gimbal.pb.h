// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: gimbal/gimbal.proto
// Protobuf C++ Version: 5.29.1

#ifndef gimbal_2fgimbal_2eproto_2epb_2eh
#define gimbal_2fgimbal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_gimbal_2fgimbal_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_gimbal_2fgimbal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_gimbal_2fgimbal_2eproto;
namespace mavsdk {
namespace rpc {
namespace gimbal {
class AngularVelocityBody;
struct AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class Attitude;
struct AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class AttitudeResponse;
struct AttitudeResponseDefaultTypeInternal;
extern AttitudeResponseDefaultTypeInternal _AttitudeResponse_default_instance_;
class ControlStatus;
struct ControlStatusDefaultTypeInternal;
extern ControlStatusDefaultTypeInternal _ControlStatus_default_instance_;
class ControlStatusResponse;
struct ControlStatusResponseDefaultTypeInternal;
extern ControlStatusResponseDefaultTypeInternal _ControlStatusResponse_default_instance_;
class EulerAngle;
struct EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class GetAttitudeRequest;
struct GetAttitudeRequestDefaultTypeInternal;
extern GetAttitudeRequestDefaultTypeInternal _GetAttitudeRequest_default_instance_;
class GetAttitudeResponse;
struct GetAttitudeResponseDefaultTypeInternal;
extern GetAttitudeResponseDefaultTypeInternal _GetAttitudeResponse_default_instance_;
class GetControlStatusRequest;
struct GetControlStatusRequestDefaultTypeInternal;
extern GetControlStatusRequestDefaultTypeInternal _GetControlStatusRequest_default_instance_;
class GetControlStatusResponse;
struct GetControlStatusResponseDefaultTypeInternal;
extern GetControlStatusResponseDefaultTypeInternal _GetControlStatusResponse_default_instance_;
class GimbalItem;
struct GimbalItemDefaultTypeInternal;
extern GimbalItemDefaultTypeInternal _GimbalItem_default_instance_;
class GimbalList;
struct GimbalListDefaultTypeInternal;
extern GimbalListDefaultTypeInternal _GimbalList_default_instance_;
class GimbalListResponse;
struct GimbalListResponseDefaultTypeInternal;
extern GimbalListResponseDefaultTypeInternal _GimbalListResponse_default_instance_;
class GimbalResult;
struct GimbalResultDefaultTypeInternal;
extern GimbalResultDefaultTypeInternal _GimbalResult_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class ReleaseControlRequest;
struct ReleaseControlRequestDefaultTypeInternal;
extern ReleaseControlRequestDefaultTypeInternal _ReleaseControlRequest_default_instance_;
class ReleaseControlResponse;
struct ReleaseControlResponseDefaultTypeInternal;
extern ReleaseControlResponseDefaultTypeInternal _ReleaseControlResponse_default_instance_;
class SetAnglesRequest;
struct SetAnglesRequestDefaultTypeInternal;
extern SetAnglesRequestDefaultTypeInternal _SetAnglesRequest_default_instance_;
class SetAnglesResponse;
struct SetAnglesResponseDefaultTypeInternal;
extern SetAnglesResponseDefaultTypeInternal _SetAnglesResponse_default_instance_;
class SetAngularRatesRequest;
struct SetAngularRatesRequestDefaultTypeInternal;
extern SetAngularRatesRequestDefaultTypeInternal _SetAngularRatesRequest_default_instance_;
class SetAngularRatesResponse;
struct SetAngularRatesResponseDefaultTypeInternal;
extern SetAngularRatesResponseDefaultTypeInternal _SetAngularRatesResponse_default_instance_;
class SetRoiLocationRequest;
struct SetRoiLocationRequestDefaultTypeInternal;
extern SetRoiLocationRequestDefaultTypeInternal _SetRoiLocationRequest_default_instance_;
class SetRoiLocationResponse;
struct SetRoiLocationResponseDefaultTypeInternal;
extern SetRoiLocationResponseDefaultTypeInternal _SetRoiLocationResponse_default_instance_;
class SubscribeAttitudeRequest;
struct SubscribeAttitudeRequestDefaultTypeInternal;
extern SubscribeAttitudeRequestDefaultTypeInternal _SubscribeAttitudeRequest_default_instance_;
class SubscribeControlStatusRequest;
struct SubscribeControlStatusRequestDefaultTypeInternal;
extern SubscribeControlStatusRequestDefaultTypeInternal _SubscribeControlStatusRequest_default_instance_;
class SubscribeGimbalListRequest;
struct SubscribeGimbalListRequestDefaultTypeInternal;
extern SubscribeGimbalListRequestDefaultTypeInternal _SubscribeGimbalListRequest_default_instance_;
class TakeControlRequest;
struct TakeControlRequestDefaultTypeInternal;
extern TakeControlRequestDefaultTypeInternal _TakeControlRequest_default_instance_;
class TakeControlResponse;
struct TakeControlResponseDefaultTypeInternal;
extern TakeControlResponseDefaultTypeInternal _TakeControlResponse_default_instance_;
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace gimbal {
enum GimbalResult_Result : int {
  GimbalResult_Result_RESULT_UNKNOWN = 0,
  GimbalResult_Result_RESULT_SUCCESS = 1,
  GimbalResult_Result_RESULT_ERROR = 2,
  GimbalResult_Result_RESULT_TIMEOUT = 3,
  GimbalResult_Result_RESULT_UNSUPPORTED = 4,
  GimbalResult_Result_RESULT_NO_SYSTEM = 5,
  GimbalResult_Result_RESULT_INVALID_ARGUMENT = 6,
  GimbalResult_Result_GimbalResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GimbalResult_Result_GimbalResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GimbalResult_Result_IsValid(int value);
extern const uint32_t GimbalResult_Result_internal_data_[];
constexpr GimbalResult_Result GimbalResult_Result_Result_MIN = static_cast<GimbalResult_Result>(0);
constexpr GimbalResult_Result GimbalResult_Result_Result_MAX = static_cast<GimbalResult_Result>(6);
constexpr int GimbalResult_Result_Result_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
GimbalResult_Result_descriptor();
template <typename T>
const std::string& GimbalResult_Result_Name(T value) {
  static_assert(std::is_same<T, GimbalResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return GimbalResult_Result_Name(static_cast<GimbalResult_Result>(value));
}
template <>
inline const std::string& GimbalResult_Result_Name(GimbalResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GimbalResult_Result_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool GimbalResult_Result_Parse(absl::string_view name, GimbalResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GimbalResult_Result>(
      GimbalResult_Result_descriptor(), name, value);
}
enum GimbalMode : int {
  GIMBAL_MODE_YAW_FOLLOW = 0,
  GIMBAL_MODE_YAW_LOCK = 1,
  GimbalMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GimbalMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GimbalMode_IsValid(int value);
extern const uint32_t GimbalMode_internal_data_[];
constexpr GimbalMode GimbalMode_MIN = static_cast<GimbalMode>(0);
constexpr GimbalMode GimbalMode_MAX = static_cast<GimbalMode>(1);
constexpr int GimbalMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
GimbalMode_descriptor();
template <typename T>
const std::string& GimbalMode_Name(T value) {
  static_assert(std::is_same<T, GimbalMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GimbalMode_Name().");
  return GimbalMode_Name(static_cast<GimbalMode>(value));
}
template <>
inline const std::string& GimbalMode_Name(GimbalMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GimbalMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GimbalMode_Parse(absl::string_view name, GimbalMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GimbalMode>(
      GimbalMode_descriptor(), name, value);
}
enum ControlMode : int {
  CONTROL_MODE_NONE = 0,
  CONTROL_MODE_PRIMARY = 1,
  CONTROL_MODE_SECONDARY = 2,
  ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ControlMode_IsValid(int value);
extern const uint32_t ControlMode_internal_data_[];
constexpr ControlMode ControlMode_MIN = static_cast<ControlMode>(0);
constexpr ControlMode ControlMode_MAX = static_cast<ControlMode>(2);
constexpr int ControlMode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ControlMode_descriptor();
template <typename T>
const std::string& ControlMode_Name(T value) {
  static_assert(std::is_same<T, ControlMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ControlMode_Name().");
  return ControlMode_Name(static_cast<ControlMode>(value));
}
template <>
inline const std::string& ControlMode_Name(ControlMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ControlMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ControlMode_Parse(absl::string_view name, ControlMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlMode>(
      ControlMode_descriptor(), name, value);
}
enum SendMode : int {
  SEND_MODE_ONCE = 0,
  SEND_MODE_STREAM = 1,
  SendMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SendMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SendMode_IsValid(int value);
extern const uint32_t SendMode_internal_data_[];
constexpr SendMode SendMode_MIN = static_cast<SendMode>(0);
constexpr SendMode SendMode_MAX = static_cast<SendMode>(1);
constexpr int SendMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SendMode_descriptor();
template <typename T>
const std::string& SendMode_Name(T value) {
  static_assert(std::is_same<T, SendMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SendMode_Name().");
  return SendMode_Name(static_cast<SendMode>(value));
}
template <>
inline const std::string& SendMode_Name(SendMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SendMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SendMode_Parse(absl::string_view name, SendMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendMode>(
      SendMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TakeControlRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.TakeControlRequest) */ {
 public:
  inline TakeControlRequest() : TakeControlRequest(nullptr) {}
  ~TakeControlRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TakeControlRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TakeControlRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TakeControlRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TakeControlRequest(const TakeControlRequest& from) : TakeControlRequest(nullptr, from) {}
  inline TakeControlRequest(TakeControlRequest&& from) noexcept
      : TakeControlRequest(nullptr, std::move(from)) {}
  inline TakeControlRequest& operator=(const TakeControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeControlRequest& operator=(TakeControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakeControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakeControlRequest* internal_default_instance() {
    return reinterpret_cast<const TakeControlRequest*>(
        &_TakeControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TakeControlRequest& a, TakeControlRequest& b) { a.Swap(&b); }
  inline void Swap(TakeControlRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeControlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakeControlRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TakeControlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TakeControlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TakeControlRequest& from) { TakeControlRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TakeControlRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.TakeControlRequest"; }

 protected:
  explicit TakeControlRequest(::google::protobuf::Arena* arena);
  TakeControlRequest(::google::protobuf::Arena* arena, const TakeControlRequest& from);
  TakeControlRequest(::google::protobuf::Arena* arena, TakeControlRequest&& from) noexcept
      : TakeControlRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
    kControlModeFieldNumber = 2,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  void clear_control_mode() ;
  ::mavsdk::rpc::gimbal::ControlMode control_mode() const;
  void set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);

  private:
  ::mavsdk::rpc::gimbal::ControlMode _internal_control_mode() const;
  void _internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.TakeControlRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TakeControlRequest& from_msg);
    ::int32_t gimbal_id_;
    int control_mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SubscribeGimbalListRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SubscribeGimbalListRequest) */ {
 public:
  inline SubscribeGimbalListRequest() : SubscribeGimbalListRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeGimbalListRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeGimbalListRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeGimbalListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeGimbalListRequest(const SubscribeGimbalListRequest& from) : SubscribeGimbalListRequest(nullptr, from) {}
  inline SubscribeGimbalListRequest(SubscribeGimbalListRequest&& from) noexcept
      : SubscribeGimbalListRequest(nullptr, std::move(from)) {}
  inline SubscribeGimbalListRequest& operator=(const SubscribeGimbalListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGimbalListRequest& operator=(SubscribeGimbalListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeGimbalListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeGimbalListRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGimbalListRequest*>(
        &_SubscribeGimbalListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(SubscribeGimbalListRequest& a, SubscribeGimbalListRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeGimbalListRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeGimbalListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeGimbalListRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeGimbalListRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeGimbalListRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeGimbalListRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SubscribeGimbalListRequest"; }

 protected:
  explicit SubscribeGimbalListRequest(::google::protobuf::Arena* arena);
  SubscribeGimbalListRequest(::google::protobuf::Arena* arena, const SubscribeGimbalListRequest& from);
  SubscribeGimbalListRequest(::google::protobuf::Arena* arena, SubscribeGimbalListRequest&& from) noexcept
      : SubscribeGimbalListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SubscribeGimbalListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeGimbalListRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SubscribeControlStatusRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SubscribeControlStatusRequest) */ {
 public:
  inline SubscribeControlStatusRequest() : SubscribeControlStatusRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeControlStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeControlStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeControlStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeControlStatusRequest(const SubscribeControlStatusRequest& from) : SubscribeControlStatusRequest(nullptr, from) {}
  inline SubscribeControlStatusRequest(SubscribeControlStatusRequest&& from) noexcept
      : SubscribeControlStatusRequest(nullptr, std::move(from)) {}
  inline SubscribeControlStatusRequest& operator=(const SubscribeControlStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeControlStatusRequest& operator=(SubscribeControlStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeControlStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeControlStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeControlStatusRequest*>(
        &_SubscribeControlStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SubscribeControlStatusRequest& a, SubscribeControlStatusRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeControlStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeControlStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeControlStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeControlStatusRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeControlStatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeControlStatusRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SubscribeControlStatusRequest"; }

 protected:
  explicit SubscribeControlStatusRequest(::google::protobuf::Arena* arena);
  SubscribeControlStatusRequest(::google::protobuf::Arena* arena, const SubscribeControlStatusRequest& from);
  SubscribeControlStatusRequest(::google::protobuf::Arena* arena, SubscribeControlStatusRequest&& from) noexcept
      : SubscribeControlStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SubscribeControlStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeControlStatusRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SubscribeAttitudeRequest) */ {
 public:
  inline SubscribeAttitudeRequest() : SubscribeAttitudeRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeAttitudeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeAttitudeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeAttitudeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeAttitudeRequest(const SubscribeAttitudeRequest& from) : SubscribeAttitudeRequest(nullptr, from) {}
  inline SubscribeAttitudeRequest(SubscribeAttitudeRequest&& from) noexcept
      : SubscribeAttitudeRequest(nullptr, std::move(from)) {}
  inline SubscribeAttitudeRequest& operator=(const SubscribeAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeRequest& operator=(SubscribeAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeRequest*>(
        &_SubscribeAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(SubscribeAttitudeRequest& a, SubscribeAttitudeRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeAttitudeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeAttitudeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeAttitudeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeAttitudeRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeAttitudeRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeAttitudeRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SubscribeAttitudeRequest"; }

 protected:
  explicit SubscribeAttitudeRequest(::google::protobuf::Arena* arena);
  SubscribeAttitudeRequest(::google::protobuf::Arena* arena, const SubscribeAttitudeRequest& from);
  SubscribeAttitudeRequest(::google::protobuf::Arena* arena, SubscribeAttitudeRequest&& from) noexcept
      : SubscribeAttitudeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SubscribeAttitudeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeAttitudeRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetRoiLocationRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetRoiLocationRequest) */ {
 public:
  inline SetRoiLocationRequest() : SetRoiLocationRequest(nullptr) {}
  ~SetRoiLocationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetRoiLocationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetRoiLocationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetRoiLocationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetRoiLocationRequest(const SetRoiLocationRequest& from) : SetRoiLocationRequest(nullptr, from) {}
  inline SetRoiLocationRequest(SetRoiLocationRequest&& from) noexcept
      : SetRoiLocationRequest(nullptr, std::move(from)) {}
  inline SetRoiLocationRequest& operator=(const SetRoiLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRoiLocationRequest& operator=(SetRoiLocationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRoiLocationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRoiLocationRequest* internal_default_instance() {
    return reinterpret_cast<const SetRoiLocationRequest*>(
        &_SetRoiLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SetRoiLocationRequest& a, SetRoiLocationRequest& b) { a.Swap(&b); }
  inline void Swap(SetRoiLocationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRoiLocationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRoiLocationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetRoiLocationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRoiLocationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetRoiLocationRequest& from) { SetRoiLocationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetRoiLocationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SetRoiLocationRequest"; }

 protected:
  explicit SetRoiLocationRequest(::google::protobuf::Arena* arena);
  SetRoiLocationRequest(::google::protobuf::Arena* arena, const SetRoiLocationRequest& from);
  SetRoiLocationRequest(::google::protobuf::Arena* arena, SetRoiLocationRequest&& from) noexcept
      : SetRoiLocationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeDegFieldNumber = 2,
    kGimbalIdFieldNumber = 1,
    kAltitudeMFieldNumber = 4,
    kLongitudeDegFieldNumber = 3,
  };
  // double latitude_deg = 2;
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // float altitude_m = 4;
  void clear_altitude_m() ;
  float altitude_m() const;
  void set_altitude_m(float value);

  private:
  float _internal_altitude_m() const;
  void _internal_set_altitude_m(float value);

  public:
  // double longitude_deg = 3;
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetRoiLocationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetRoiLocationRequest& from_msg);
    double latitude_deg_;
    ::int32_t gimbal_id_;
    float altitude_m_;
    double longitude_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAngularRatesRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAngularRatesRequest) */ {
 public:
  inline SetAngularRatesRequest() : SetAngularRatesRequest(nullptr) {}
  ~SetAngularRatesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetAngularRatesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetAngularRatesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetAngularRatesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetAngularRatesRequest(const SetAngularRatesRequest& from) : SetAngularRatesRequest(nullptr, from) {}
  inline SetAngularRatesRequest(SetAngularRatesRequest&& from) noexcept
      : SetAngularRatesRequest(nullptr, std::move(from)) {}
  inline SetAngularRatesRequest& operator=(const SetAngularRatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAngularRatesRequest& operator=(SetAngularRatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAngularRatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAngularRatesRequest* internal_default_instance() {
    return reinterpret_cast<const SetAngularRatesRequest*>(
        &_SetAngularRatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SetAngularRatesRequest& a, SetAngularRatesRequest& b) { a.Swap(&b); }
  inline void Swap(SetAngularRatesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAngularRatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAngularRatesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetAngularRatesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAngularRatesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetAngularRatesRequest& from) { SetAngularRatesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetAngularRatesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SetAngularRatesRequest"; }

 protected:
  explicit SetAngularRatesRequest(::google::protobuf::Arena* arena);
  SetAngularRatesRequest(::google::protobuf::Arena* arena, const SetAngularRatesRequest& from);
  SetAngularRatesRequest(::google::protobuf::Arena* arena, SetAngularRatesRequest&& from) noexcept
      : SetAngularRatesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
    kRollRateDegSFieldNumber = 2,
    kPitchRateDegSFieldNumber = 3,
    kYawRateDegSFieldNumber = 4,
    kGimbalModeFieldNumber = 5,
    kSendModeFieldNumber = 6,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // float roll_rate_deg_s = 2;
  void clear_roll_rate_deg_s() ;
  float roll_rate_deg_s() const;
  void set_roll_rate_deg_s(float value);

  private:
  float _internal_roll_rate_deg_s() const;
  void _internal_set_roll_rate_deg_s(float value);

  public:
  // float pitch_rate_deg_s = 3;
  void clear_pitch_rate_deg_s() ;
  float pitch_rate_deg_s() const;
  void set_pitch_rate_deg_s(float value);

  private:
  float _internal_pitch_rate_deg_s() const;
  void _internal_set_pitch_rate_deg_s(float value);

  public:
  // float yaw_rate_deg_s = 4;
  void clear_yaw_rate_deg_s() ;
  float yaw_rate_deg_s() const;
  void set_yaw_rate_deg_s(float value);

  private:
  float _internal_yaw_rate_deg_s() const;
  void _internal_set_yaw_rate_deg_s(float value);

  public:
  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  void clear_gimbal_mode() ;
  ::mavsdk::rpc::gimbal::GimbalMode gimbal_mode() const;
  void set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);

  private:
  ::mavsdk::rpc::gimbal::GimbalMode _internal_gimbal_mode() const;
  void _internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);

  public:
  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  void clear_send_mode() ;
  ::mavsdk::rpc::gimbal::SendMode send_mode() const;
  void set_send_mode(::mavsdk::rpc::gimbal::SendMode value);

  private:
  ::mavsdk::rpc::gimbal::SendMode _internal_send_mode() const;
  void _internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAngularRatesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetAngularRatesRequest& from_msg);
    ::int32_t gimbal_id_;
    float roll_rate_deg_s_;
    float pitch_rate_deg_s_;
    float yaw_rate_deg_s_;
    int gimbal_mode_;
    int send_mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAnglesRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAnglesRequest) */ {
 public:
  inline SetAnglesRequest() : SetAnglesRequest(nullptr) {}
  ~SetAnglesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetAnglesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetAnglesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetAnglesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetAnglesRequest(const SetAnglesRequest& from) : SetAnglesRequest(nullptr, from) {}
  inline SetAnglesRequest(SetAnglesRequest&& from) noexcept
      : SetAnglesRequest(nullptr, std::move(from)) {}
  inline SetAnglesRequest& operator=(const SetAnglesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnglesRequest& operator=(SetAnglesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnglesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnglesRequest* internal_default_instance() {
    return reinterpret_cast<const SetAnglesRequest*>(
        &_SetAnglesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SetAnglesRequest& a, SetAnglesRequest& b) { a.Swap(&b); }
  inline void Swap(SetAnglesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnglesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAnglesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetAnglesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAnglesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetAnglesRequest& from) { SetAnglesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetAnglesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SetAnglesRequest"; }

 protected:
  explicit SetAnglesRequest(::google::protobuf::Arena* arena);
  SetAnglesRequest(::google::protobuf::Arena* arena, const SetAnglesRequest& from);
  SetAnglesRequest(::google::protobuf::Arena* arena, SetAnglesRequest&& from) noexcept
      : SetAnglesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
    kRollDegFieldNumber = 2,
    kPitchDegFieldNumber = 3,
    kYawDegFieldNumber = 4,
    kGimbalModeFieldNumber = 5,
    kSendModeFieldNumber = 6,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // float roll_deg = 2;
  void clear_roll_deg() ;
  float roll_deg() const;
  void set_roll_deg(float value);

  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);

  public:
  // float pitch_deg = 3;
  void clear_pitch_deg() ;
  float pitch_deg() const;
  void set_pitch_deg(float value);

  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);

  public:
  // float yaw_deg = 4;
  void clear_yaw_deg() ;
  float yaw_deg() const;
  void set_yaw_deg(float value);

  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);

  public:
  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
  void clear_gimbal_mode() ;
  ::mavsdk::rpc::gimbal::GimbalMode gimbal_mode() const;
  void set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);

  private:
  ::mavsdk::rpc::gimbal::GimbalMode _internal_gimbal_mode() const;
  void _internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value);

  public:
  // .mavsdk.rpc.gimbal.SendMode send_mode = 6;
  void clear_send_mode() ;
  ::mavsdk::rpc::gimbal::SendMode send_mode() const;
  void set_send_mode(::mavsdk::rpc::gimbal::SendMode value);

  private:
  ::mavsdk::rpc::gimbal::SendMode _internal_send_mode() const;
  void _internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAnglesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetAnglesRequest& from_msg);
    ::int32_t gimbal_id_;
    float roll_deg_;
    float pitch_deg_;
    float yaw_deg_;
    int gimbal_mode_;
    int send_mode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ReleaseControlRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ReleaseControlRequest) */ {
 public:
  inline ReleaseControlRequest() : ReleaseControlRequest(nullptr) {}
  ~ReleaseControlRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReleaseControlRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReleaseControlRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReleaseControlRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReleaseControlRequest(const ReleaseControlRequest& from) : ReleaseControlRequest(nullptr, from) {}
  inline ReleaseControlRequest(ReleaseControlRequest&& from) noexcept
      : ReleaseControlRequest(nullptr, std::move(from)) {}
  inline ReleaseControlRequest& operator=(const ReleaseControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseControlRequest& operator=(ReleaseControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseControlRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseControlRequest*>(
        &_ReleaseControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ReleaseControlRequest& a, ReleaseControlRequest& b) { a.Swap(&b); }
  inline void Swap(ReleaseControlRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseControlRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseControlRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReleaseControlRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReleaseControlRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReleaseControlRequest& from) { ReleaseControlRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReleaseControlRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.ReleaseControlRequest"; }

 protected:
  explicit ReleaseControlRequest(::google::protobuf::Arena* arena);
  ReleaseControlRequest(::google::protobuf::Arena* arena, const ReleaseControlRequest& from);
  ReleaseControlRequest(::google::protobuf::Arena* arena, ReleaseControlRequest&& from) noexcept
      : ReleaseControlRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ReleaseControlRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReleaseControlRequest& from_msg);
    ::int32_t gimbal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Quaternion* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Quaternion));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Quaternion(
      ::google::protobuf::internal::ConstantInitialized);

  inline Quaternion(const Quaternion& from) : Quaternion(nullptr, from) {}
  inline Quaternion(Quaternion&& from) noexcept
      : Quaternion(nullptr, std::move(from)) {}
  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
        &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Quaternion& a, Quaternion& b) { a.Swap(&b); }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Quaternion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Quaternion& from) { Quaternion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Quaternion* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.Quaternion"; }

 protected:
  explicit Quaternion(::google::protobuf::Arena* arena);
  Quaternion(::google::protobuf::Arena* arena, const Quaternion& from);
  Quaternion(::google::protobuf::Arena* arena, Quaternion&& from) noexcept
      : Quaternion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.Quaternion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Quaternion& from_msg);
    float w_;
    float x_;
    float y_;
    float z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalResult) */ {
 public:
  inline GimbalResult() : GimbalResult(nullptr) {}
  ~GimbalResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GimbalResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GimbalResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline GimbalResult(const GimbalResult& from) : GimbalResult(nullptr, from) {}
  inline GimbalResult(GimbalResult&& from) noexcept
      : GimbalResult(nullptr, std::move(from)) {}
  inline GimbalResult& operator=(const GimbalResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalResult& operator=(GimbalResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalResult* internal_default_instance() {
    return reinterpret_cast<const GimbalResult*>(
        &_GimbalResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(GimbalResult& a, GimbalResult& b) { a.Swap(&b); }
  inline void Swap(GimbalResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GimbalResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GimbalResult& from) { GimbalResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GimbalResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GimbalResult"; }

 protected:
  explicit GimbalResult(::google::protobuf::Arena* arena);
  GimbalResult(::google::protobuf::Arena* arena, const GimbalResult& from);
  GimbalResult(::google::protobuf::Arena* arena, GimbalResult&& from) noexcept
      : GimbalResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = GimbalResult_Result;
  static constexpr Result RESULT_UNKNOWN = GimbalResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = GimbalResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR = GimbalResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TIMEOUT = GimbalResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_UNSUPPORTED = GimbalResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_NO_SYSTEM = GimbalResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_INVALID_ARGUMENT = GimbalResult_Result_RESULT_INVALID_ARGUMENT;
  static inline bool Result_IsValid(int value) {
    return GimbalResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = GimbalResult_Result_Result_MIN;
  static constexpr Result Result_MAX = GimbalResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = GimbalResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return GimbalResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return GimbalResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return GimbalResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::gimbal::GimbalResult_Result result() const;
  void set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value);

  private:
  ::mavsdk::rpc::gimbal::GimbalResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GimbalResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalItem final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalItem) */ {
 public:
  inline GimbalItem() : GimbalItem(nullptr) {}
  ~GimbalItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GimbalItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GimbalItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline GimbalItem(const GimbalItem& from) : GimbalItem(nullptr, from) {}
  inline GimbalItem(GimbalItem&& from) noexcept
      : GimbalItem(nullptr, std::move(from)) {}
  inline GimbalItem& operator=(const GimbalItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalItem& operator=(GimbalItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalItem* internal_default_instance() {
    return reinterpret_cast<const GimbalItem*>(
        &_GimbalItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(GimbalItem& a, GimbalItem& b) { a.Swap(&b); }
  inline void Swap(GimbalItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GimbalItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GimbalItem& from) { GimbalItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GimbalItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GimbalItem"; }

 protected:
  explicit GimbalItem(::google::protobuf::Arena* arena);
  GimbalItem(::google::protobuf::Arena* arena, const GimbalItem& from);
  GimbalItem(::google::protobuf::Arena* arena, GimbalItem&& from) noexcept
      : GimbalItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVendorNameFieldNumber = 2,
    kModelNameFieldNumber = 3,
    kCustomNameFieldNumber = 4,
    kGimbalIdFieldNumber = 1,
    kGimbalManagerComponentIdFieldNumber = 5,
    kGimbalDeviceIdFieldNumber = 6,
  };
  // string vendor_name = 2;
  void clear_vendor_name() ;
  const std::string& vendor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vendor_name(Arg_&& arg, Args_... args);
  std::string* mutable_vendor_name();
  PROTOBUF_NODISCARD std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* value);

  private:
  const std::string& _internal_vendor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_name(
      const std::string& value);
  std::string* _internal_mutable_vendor_name();

  public:
  // string model_name = 3;
  void clear_model_name() ;
  const std::string& model_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_name(Arg_&& arg, Args_... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* value);

  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(
      const std::string& value);
  std::string* _internal_mutable_model_name();

  public:
  // string custom_name = 4;
  void clear_custom_name() ;
  const std::string& custom_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_custom_name(Arg_&& arg, Args_... args);
  std::string* mutable_custom_name();
  PROTOBUF_NODISCARD std::string* release_custom_name();
  void set_allocated_custom_name(std::string* value);

  private:
  const std::string& _internal_custom_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_name(
      const std::string& value);
  std::string* _internal_mutable_custom_name();

  public:
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // int32 gimbal_manager_component_id = 5;
  void clear_gimbal_manager_component_id() ;
  ::int32_t gimbal_manager_component_id() const;
  void set_gimbal_manager_component_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_manager_component_id() const;
  void _internal_set_gimbal_manager_component_id(::int32_t value);

  public:
  // int32 gimbal_device_id = 6;
  void clear_gimbal_device_id() ;
  ::int32_t gimbal_device_id() const;
  void set_gimbal_device_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_device_id() const;
  void _internal_set_gimbal_device_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GimbalItem& from_msg);
    ::google::protobuf::internal::ArenaStringPtr vendor_name_;
    ::google::protobuf::internal::ArenaStringPtr model_name_;
    ::google::protobuf::internal::ArenaStringPtr custom_name_;
    ::int32_t gimbal_id_;
    ::int32_t gimbal_manager_component_id_;
    ::int32_t gimbal_device_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetControlStatusRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetControlStatusRequest) */ {
 public:
  inline GetControlStatusRequest() : GetControlStatusRequest(nullptr) {}
  ~GetControlStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetControlStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetControlStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetControlStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetControlStatusRequest(const GetControlStatusRequest& from) : GetControlStatusRequest(nullptr, from) {}
  inline GetControlStatusRequest(GetControlStatusRequest&& from) noexcept
      : GetControlStatusRequest(nullptr, std::move(from)) {}
  inline GetControlStatusRequest& operator=(const GetControlStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetControlStatusRequest& operator=(GetControlStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetControlStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetControlStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetControlStatusRequest*>(
        &_GetControlStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(GetControlStatusRequest& a, GetControlStatusRequest& b) { a.Swap(&b); }
  inline void Swap(GetControlStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetControlStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetControlStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetControlStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetControlStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetControlStatusRequest& from) { GetControlStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetControlStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GetControlStatusRequest"; }

 protected:
  explicit GetControlStatusRequest(::google::protobuf::Arena* arena);
  GetControlStatusRequest(::google::protobuf::Arena* arena, const GetControlStatusRequest& from);
  GetControlStatusRequest(::google::protobuf::Arena* arena, GetControlStatusRequest&& from) noexcept
      : GetControlStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetControlStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetControlStatusRequest& from_msg);
    ::int32_t gimbal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetAttitudeRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetAttitudeRequest) */ {
 public:
  inline GetAttitudeRequest() : GetAttitudeRequest(nullptr) {}
  ~GetAttitudeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetAttitudeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetAttitudeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetAttitudeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetAttitudeRequest(const GetAttitudeRequest& from) : GetAttitudeRequest(nullptr, from) {}
  inline GetAttitudeRequest(GetAttitudeRequest&& from) noexcept
      : GetAttitudeRequest(nullptr, std::move(from)) {}
  inline GetAttitudeRequest& operator=(const GetAttitudeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttitudeRequest& operator=(GetAttitudeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttitudeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttitudeRequest* internal_default_instance() {
    return reinterpret_cast<const GetAttitudeRequest*>(
        &_GetAttitudeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(GetAttitudeRequest& a, GetAttitudeRequest& b) { a.Swap(&b); }
  inline void Swap(GetAttitudeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttitudeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttitudeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetAttitudeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAttitudeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetAttitudeRequest& from) { GetAttitudeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetAttitudeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GetAttitudeRequest"; }

 protected:
  explicit GetAttitudeRequest(::google::protobuf::Arena* arena);
  GetAttitudeRequest(::google::protobuf::Arena* arena, const GetAttitudeRequest& from);
  GetAttitudeRequest(::google::protobuf::Arena* arena, GetAttitudeRequest&& from) noexcept
      : GetAttitudeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetAttitudeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetAttitudeRequest& from_msg);
    ::int32_t gimbal_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.EulerAngle) */ {
 public:
  inline EulerAngle() : EulerAngle(nullptr) {}
  ~EulerAngle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EulerAngle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EulerAngle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EulerAngle(
      ::google::protobuf::internal::ConstantInitialized);

  inline EulerAngle(const EulerAngle& from) : EulerAngle(nullptr, from) {}
  inline EulerAngle(EulerAngle&& from) noexcept
      : EulerAngle(nullptr, std::move(from)) {}
  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EulerAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
        &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(EulerAngle& a, EulerAngle& b) { a.Swap(&b); }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EulerAngle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EulerAngle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EulerAngle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EulerAngle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EulerAngle& from) { EulerAngle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EulerAngle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.EulerAngle"; }

 protected:
  explicit EulerAngle(::google::protobuf::Arena* arena);
  EulerAngle(::google::protobuf::Arena* arena, const EulerAngle& from);
  EulerAngle(::google::protobuf::Arena* arena, EulerAngle&& from) noexcept
      : EulerAngle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_deg() ;
  float roll_deg() const;
  void set_roll_deg(float value);

  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);

  public:
  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_deg() ;
  float pitch_deg() const;
  void set_pitch_deg(float value);

  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);

  public:
  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_deg() ;
  float yaw_deg() const;
  void set_yaw_deg(float value);

  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.EulerAngle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EulerAngle& from_msg);
    float roll_deg_;
    float pitch_deg_;
    float yaw_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ControlStatus final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ControlStatus) */ {
 public:
  inline ControlStatus() : ControlStatus(nullptr) {}
  ~ControlStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ControlStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ControlStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControlStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControlStatus(const ControlStatus& from) : ControlStatus(nullptr, from) {}
  inline ControlStatus(ControlStatus&& from) noexcept
      : ControlStatus(nullptr, std::move(from)) {}
  inline ControlStatus& operator=(const ControlStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlStatus& operator=(ControlStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlStatus* internal_default_instance() {
    return reinterpret_cast<const ControlStatus*>(
        &_ControlStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(ControlStatus& a, ControlStatus& b) { a.Swap(&b); }
  inline void Swap(ControlStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ControlStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControlStatus& from) { ControlStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ControlStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.ControlStatus"; }

 protected:
  explicit ControlStatus(::google::protobuf::Arena* arena);
  ControlStatus(::google::protobuf::Arena* arena, const ControlStatus& from);
  ControlStatus(::google::protobuf::Arena* arena, ControlStatus&& from) noexcept
      : ControlStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalIdFieldNumber = 1,
    kControlModeFieldNumber = 2,
    kSysidPrimaryControlFieldNumber = 3,
    kCompidPrimaryControlFieldNumber = 4,
    kSysidSecondaryControlFieldNumber = 5,
    kCompidSecondaryControlFieldNumber = 6,
  };
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
  void clear_control_mode() ;
  ::mavsdk::rpc::gimbal::ControlMode control_mode() const;
  void set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);

  private:
  ::mavsdk::rpc::gimbal::ControlMode _internal_control_mode() const;
  void _internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value);

  public:
  // int32 sysid_primary_control = 3;
  void clear_sysid_primary_control() ;
  ::int32_t sysid_primary_control() const;
  void set_sysid_primary_control(::int32_t value);

  private:
  ::int32_t _internal_sysid_primary_control() const;
  void _internal_set_sysid_primary_control(::int32_t value);

  public:
  // int32 compid_primary_control = 4;
  void clear_compid_primary_control() ;
  ::int32_t compid_primary_control() const;
  void set_compid_primary_control(::int32_t value);

  private:
  ::int32_t _internal_compid_primary_control() const;
  void _internal_set_compid_primary_control(::int32_t value);

  public:
  // int32 sysid_secondary_control = 5;
  void clear_sysid_secondary_control() ;
  ::int32_t sysid_secondary_control() const;
  void set_sysid_secondary_control(::int32_t value);

  private:
  ::int32_t _internal_sysid_secondary_control() const;
  void _internal_set_sysid_secondary_control(::int32_t value);

  public:
  // int32 compid_secondary_control = 6;
  void clear_compid_secondary_control() ;
  ::int32_t compid_secondary_control() const;
  void set_compid_secondary_control(::int32_t value);

  private:
  ::int32_t _internal_compid_secondary_control() const;
  void _internal_set_compid_secondary_control(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ControlStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControlStatus& from_msg);
    ::int32_t gimbal_id_;
    int control_mode_;
    ::int32_t sysid_primary_control_;
    ::int32_t compid_primary_control_;
    ::int32_t sysid_secondary_control_;
    ::int32_t compid_secondary_control_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.AngularVelocityBody) */ {
 public:
  inline AngularVelocityBody() : AngularVelocityBody(nullptr) {}
  ~AngularVelocityBody() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AngularVelocityBody* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AngularVelocityBody));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AngularVelocityBody(
      ::google::protobuf::internal::ConstantInitialized);

  inline AngularVelocityBody(const AngularVelocityBody& from) : AngularVelocityBody(nullptr, from) {}
  inline AngularVelocityBody(AngularVelocityBody&& from) noexcept
      : AngularVelocityBody(nullptr, std::move(from)) {}
  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AngularVelocityBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
        &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) { a.Swap(&b); }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularVelocityBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AngularVelocityBody* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AngularVelocityBody>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AngularVelocityBody& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AngularVelocityBody& from) { AngularVelocityBody::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AngularVelocityBody* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.AngularVelocityBody"; }

 protected:
  explicit AngularVelocityBody(::google::protobuf::Arena* arena);
  AngularVelocityBody(::google::protobuf::Arena* arena, const AngularVelocityBody& from);
  AngularVelocityBody(::google::protobuf::Arena* arena, AngularVelocityBody&& from) noexcept
      : AngularVelocityBody(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_roll_rad_s() ;
  float roll_rad_s() const;
  void set_roll_rad_s(float value);

  private:
  float _internal_roll_rad_s() const;
  void _internal_set_roll_rad_s(float value);

  public:
  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_pitch_rad_s() ;
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);

  private:
  float _internal_pitch_rad_s() const;
  void _internal_set_pitch_rad_s(float value);

  public:
  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_yaw_rad_s() ;
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);

  private:
  float _internal_yaw_rad_s() const;
  void _internal_set_yaw_rad_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.AngularVelocityBody)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AngularVelocityBody& from_msg);
    float roll_rad_s_;
    float pitch_rad_s_;
    float yaw_rad_s_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class TakeControlResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.TakeControlResponse) */ {
 public:
  inline TakeControlResponse() : TakeControlResponse(nullptr) {}
  ~TakeControlResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TakeControlResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TakeControlResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TakeControlResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TakeControlResponse(const TakeControlResponse& from) : TakeControlResponse(nullptr, from) {}
  inline TakeControlResponse(TakeControlResponse&& from) noexcept
      : TakeControlResponse(nullptr, std::move(from)) {}
  inline TakeControlResponse& operator=(const TakeControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeControlResponse& operator=(TakeControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakeControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakeControlResponse* internal_default_instance() {
    return reinterpret_cast<const TakeControlResponse*>(
        &_TakeControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(TakeControlResponse& a, TakeControlResponse& b) { a.Swap(&b); }
  inline void Swap(TakeControlResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeControlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakeControlResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TakeControlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TakeControlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TakeControlResponse& from) { TakeControlResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TakeControlResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.TakeControlResponse"; }

 protected:
  explicit TakeControlResponse(::google::protobuf::Arena* arena);
  TakeControlResponse(::google::protobuf::Arena* arena, const TakeControlResponse& from);
  TakeControlResponse(::google::protobuf::Arena* arena, TakeControlResponse&& from) noexcept
      : TakeControlResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.TakeControlResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TakeControlResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetRoiLocationResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetRoiLocationResponse) */ {
 public:
  inline SetRoiLocationResponse() : SetRoiLocationResponse(nullptr) {}
  ~SetRoiLocationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetRoiLocationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetRoiLocationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetRoiLocationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetRoiLocationResponse(const SetRoiLocationResponse& from) : SetRoiLocationResponse(nullptr, from) {}
  inline SetRoiLocationResponse(SetRoiLocationResponse&& from) noexcept
      : SetRoiLocationResponse(nullptr, std::move(from)) {}
  inline SetRoiLocationResponse& operator=(const SetRoiLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRoiLocationResponse& operator=(SetRoiLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRoiLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRoiLocationResponse* internal_default_instance() {
    return reinterpret_cast<const SetRoiLocationResponse*>(
        &_SetRoiLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SetRoiLocationResponse& a, SetRoiLocationResponse& b) { a.Swap(&b); }
  inline void Swap(SetRoiLocationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRoiLocationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRoiLocationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetRoiLocationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRoiLocationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetRoiLocationResponse& from) { SetRoiLocationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetRoiLocationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SetRoiLocationResponse"; }

 protected:
  explicit SetRoiLocationResponse(::google::protobuf::Arena* arena);
  SetRoiLocationResponse(::google::protobuf::Arena* arena, const SetRoiLocationResponse& from);
  SetRoiLocationResponse(::google::protobuf::Arena* arena, SetRoiLocationResponse&& from) noexcept
      : SetRoiLocationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetRoiLocationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetRoiLocationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAngularRatesResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAngularRatesResponse) */ {
 public:
  inline SetAngularRatesResponse() : SetAngularRatesResponse(nullptr) {}
  ~SetAngularRatesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetAngularRatesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetAngularRatesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetAngularRatesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetAngularRatesResponse(const SetAngularRatesResponse& from) : SetAngularRatesResponse(nullptr, from) {}
  inline SetAngularRatesResponse(SetAngularRatesResponse&& from) noexcept
      : SetAngularRatesResponse(nullptr, std::move(from)) {}
  inline SetAngularRatesResponse& operator=(const SetAngularRatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAngularRatesResponse& operator=(SetAngularRatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAngularRatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAngularRatesResponse* internal_default_instance() {
    return reinterpret_cast<const SetAngularRatesResponse*>(
        &_SetAngularRatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SetAngularRatesResponse& a, SetAngularRatesResponse& b) { a.Swap(&b); }
  inline void Swap(SetAngularRatesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAngularRatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAngularRatesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetAngularRatesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAngularRatesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetAngularRatesResponse& from) { SetAngularRatesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetAngularRatesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SetAngularRatesResponse"; }

 protected:
  explicit SetAngularRatesResponse(::google::protobuf::Arena* arena);
  SetAngularRatesResponse(::google::protobuf::Arena* arena, const SetAngularRatesResponse& from);
  SetAngularRatesResponse(::google::protobuf::Arena* arena, SetAngularRatesResponse&& from) noexcept
      : SetAngularRatesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAngularRatesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetAngularRatesResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class SetAnglesResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.SetAnglesResponse) */ {
 public:
  inline SetAnglesResponse() : SetAnglesResponse(nullptr) {}
  ~SetAnglesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetAnglesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetAnglesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetAnglesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetAnglesResponse(const SetAnglesResponse& from) : SetAnglesResponse(nullptr, from) {}
  inline SetAnglesResponse(SetAnglesResponse&& from) noexcept
      : SetAnglesResponse(nullptr, std::move(from)) {}
  inline SetAnglesResponse& operator=(const SetAnglesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAnglesResponse& operator=(SetAnglesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetAnglesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetAnglesResponse* internal_default_instance() {
    return reinterpret_cast<const SetAnglesResponse*>(
        &_SetAnglesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SetAnglesResponse& a, SetAnglesResponse& b) { a.Swap(&b); }
  inline void Swap(SetAnglesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAnglesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetAnglesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetAnglesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetAnglesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetAnglesResponse& from) { SetAnglesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetAnglesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.SetAnglesResponse"; }

 protected:
  explicit SetAnglesResponse(::google::protobuf::Arena* arena);
  SetAnglesResponse(::google::protobuf::Arena* arena, const SetAnglesResponse& from);
  SetAnglesResponse(::google::protobuf::Arena* arena, SetAnglesResponse&& from) noexcept
      : SetAnglesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.SetAnglesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetAnglesResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ReleaseControlResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ReleaseControlResponse) */ {
 public:
  inline ReleaseControlResponse() : ReleaseControlResponse(nullptr) {}
  ~ReleaseControlResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReleaseControlResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReleaseControlResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReleaseControlResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReleaseControlResponse(const ReleaseControlResponse& from) : ReleaseControlResponse(nullptr, from) {}
  inline ReleaseControlResponse(ReleaseControlResponse&& from) noexcept
      : ReleaseControlResponse(nullptr, std::move(from)) {}
  inline ReleaseControlResponse& operator=(const ReleaseControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseControlResponse& operator=(ReleaseControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseControlResponse* internal_default_instance() {
    return reinterpret_cast<const ReleaseControlResponse*>(
        &_ReleaseControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ReleaseControlResponse& a, ReleaseControlResponse& b) { a.Swap(&b); }
  inline void Swap(ReleaseControlResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseControlResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseControlResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReleaseControlResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReleaseControlResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReleaseControlResponse& from) { ReleaseControlResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReleaseControlResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.ReleaseControlResponse"; }

 protected:
  explicit ReleaseControlResponse(::google::protobuf::Arena* arena);
  ReleaseControlResponse(::google::protobuf::Arena* arena, const ReleaseControlResponse& from);
  ReleaseControlResponse(::google::protobuf::Arena* arena, ReleaseControlResponse&& from) noexcept
      : ReleaseControlResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ReleaseControlResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReleaseControlResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalList final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalList) */ {
 public:
  inline GimbalList() : GimbalList(nullptr) {}
  ~GimbalList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GimbalList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GimbalList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalList(
      ::google::protobuf::internal::ConstantInitialized);

  inline GimbalList(const GimbalList& from) : GimbalList(nullptr, from) {}
  inline GimbalList(GimbalList&& from) noexcept
      : GimbalList(nullptr, std::move(from)) {}
  inline GimbalList& operator=(const GimbalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalList& operator=(GimbalList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalList* internal_default_instance() {
    return reinterpret_cast<const GimbalList*>(
        &_GimbalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(GimbalList& a, GimbalList& b) { a.Swap(&b); }
  inline void Swap(GimbalList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GimbalList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GimbalList& from) { GimbalList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GimbalList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GimbalList"; }

 protected:
  explicit GimbalList(::google::protobuf::Arena* arena);
  GimbalList(::google::protobuf::Arena* arena, const GimbalList& from);
  GimbalList(::google::protobuf::Arena* arena, GimbalList&& from) noexcept
      : GimbalList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
  int gimbals_size() const;
  private:
  int _internal_gimbals_size() const;

  public:
  void clear_gimbals() ;
  ::mavsdk::rpc::gimbal::GimbalItem* mutable_gimbals(int index);
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>* mutable_gimbals();

  private:
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>& _internal_gimbals() const;
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>* _internal_mutable_gimbals();
  public:
  const ::mavsdk::rpc::gimbal::GimbalItem& gimbals(int index) const;
  ::mavsdk::rpc::gimbal::GimbalItem* add_gimbals();
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>& gimbals() const;
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GimbalList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mavsdk::rpc::gimbal::GimbalItem > gimbals_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetControlStatusResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetControlStatusResponse) */ {
 public:
  inline GetControlStatusResponse() : GetControlStatusResponse(nullptr) {}
  ~GetControlStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetControlStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetControlStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetControlStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetControlStatusResponse(const GetControlStatusResponse& from) : GetControlStatusResponse(nullptr, from) {}
  inline GetControlStatusResponse(GetControlStatusResponse&& from) noexcept
      : GetControlStatusResponse(nullptr, std::move(from)) {}
  inline GetControlStatusResponse& operator=(const GetControlStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetControlStatusResponse& operator=(GetControlStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetControlStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetControlStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetControlStatusResponse*>(
        &_GetControlStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetControlStatusResponse& a, GetControlStatusResponse& b) { a.Swap(&b); }
  inline void Swap(GetControlStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetControlStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetControlStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetControlStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetControlStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetControlStatusResponse& from) { GetControlStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetControlStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GetControlStatusResponse"; }

 protected:
  explicit GetControlStatusResponse(::google::protobuf::Arena* arena);
  GetControlStatusResponse(::google::protobuf::Arena* arena, const GetControlStatusResponse& from);
  GetControlStatusResponse(::google::protobuf::Arena* arena, GetControlStatusResponse&& from) noexcept
      : GetControlStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
    kControlStatusFieldNumber = 2,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
  bool has_control_status() const;
  void clear_control_status() ;
  const ::mavsdk::rpc::gimbal::ControlStatus& control_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::ControlStatus* release_control_status();
  ::mavsdk::rpc::gimbal::ControlStatus* mutable_control_status();
  void set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value);
  void unsafe_arena_set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value);
  ::mavsdk::rpc::gimbal::ControlStatus* unsafe_arena_release_control_status();

  private:
  const ::mavsdk::rpc::gimbal::ControlStatus& _internal_control_status() const;
  ::mavsdk::rpc::gimbal::ControlStatus* _internal_mutable_control_status();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetControlStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetControlStatusResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    ::mavsdk::rpc::gimbal::ControlStatus* control_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class ControlStatusResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.ControlStatusResponse) */ {
 public:
  inline ControlStatusResponse() : ControlStatusResponse(nullptr) {}
  ~ControlStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ControlStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ControlStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControlStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControlStatusResponse(const ControlStatusResponse& from) : ControlStatusResponse(nullptr, from) {}
  inline ControlStatusResponse(ControlStatusResponse&& from) noexcept
      : ControlStatusResponse(nullptr, std::move(from)) {}
  inline ControlStatusResponse& operator=(const ControlStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlStatusResponse& operator=(ControlStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ControlStatusResponse*>(
        &_ControlStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ControlStatusResponse& a, ControlStatusResponse& b) { a.Swap(&b); }
  inline void Swap(ControlStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ControlStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControlStatusResponse& from) { ControlStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ControlStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.ControlStatusResponse"; }

 protected:
  explicit ControlStatusResponse(::google::protobuf::Arena* arena);
  ControlStatusResponse(::google::protobuf::Arena* arena, const ControlStatusResponse& from);
  ControlStatusResponse(::google::protobuf::Arena* arena, ControlStatusResponse&& from) noexcept
      : ControlStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kControlStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
  bool has_control_status() const;
  void clear_control_status() ;
  const ::mavsdk::rpc::gimbal::ControlStatus& control_status() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::ControlStatus* release_control_status();
  ::mavsdk::rpc::gimbal::ControlStatus* mutable_control_status();
  void set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value);
  void unsafe_arena_set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value);
  ::mavsdk::rpc::gimbal::ControlStatus* unsafe_arena_release_control_status();

  private:
  const ::mavsdk::rpc::gimbal::ControlStatus& _internal_control_status() const;
  ::mavsdk::rpc::gimbal::ControlStatus* _internal_mutable_control_status();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.ControlStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControlStatusResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::ControlStatus* control_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class Attitude final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.Attitude) */ {
 public:
  inline Attitude() : Attitude(nullptr) {}
  ~Attitude() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Attitude* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Attitude));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Attitude(
      ::google::protobuf::internal::ConstantInitialized);

  inline Attitude(const Attitude& from) : Attitude(nullptr, from) {}
  inline Attitude(Attitude&& from) noexcept
      : Attitude(nullptr, std::move(from)) {}
  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attitude& operator=(Attitude&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attitude& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
        &_Attitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Attitude& a, Attitude& b) { a.Swap(&b); }
  inline void Swap(Attitude* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attitude* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attitude* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Attitude>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Attitude& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Attitude& from) { Attitude::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Attitude* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.Attitude"; }

 protected:
  explicit Attitude(::google::protobuf::Arena* arena);
  Attitude(::google::protobuf::Arena* arena, const Attitude& from);
  Attitude(::google::protobuf::Arena* arena, Attitude&& from) noexcept
      : Attitude(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEulerAngleForwardFieldNumber = 2,
    kQuaternionForwardFieldNumber = 3,
    kEulerAngleNorthFieldNumber = 4,
    kQuaternionNorthFieldNumber = 5,
    kAngularVelocityFieldNumber = 6,
    kTimestampUsFieldNumber = 7,
    kGimbalIdFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
  bool has_euler_angle_forward() const;
  void clear_euler_angle_forward() ;
  const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_forward() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::EulerAngle* release_euler_angle_forward();
  ::mavsdk::rpc::gimbal::EulerAngle* mutable_euler_angle_forward();
  void set_allocated_euler_angle_forward(::mavsdk::rpc::gimbal::EulerAngle* value);
  void unsafe_arena_set_allocated_euler_angle_forward(::mavsdk::rpc::gimbal::EulerAngle* value);
  ::mavsdk::rpc::gimbal::EulerAngle* unsafe_arena_release_euler_angle_forward();

  private:
  const ::mavsdk::rpc::gimbal::EulerAngle& _internal_euler_angle_forward() const;
  ::mavsdk::rpc::gimbal::EulerAngle* _internal_mutable_euler_angle_forward();

  public:
  // .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
  bool has_quaternion_forward() const;
  void clear_quaternion_forward() ;
  const ::mavsdk::rpc::gimbal::Quaternion& quaternion_forward() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Quaternion* release_quaternion_forward();
  ::mavsdk::rpc::gimbal::Quaternion* mutable_quaternion_forward();
  void set_allocated_quaternion_forward(::mavsdk::rpc::gimbal::Quaternion* value);
  void unsafe_arena_set_allocated_quaternion_forward(::mavsdk::rpc::gimbal::Quaternion* value);
  ::mavsdk::rpc::gimbal::Quaternion* unsafe_arena_release_quaternion_forward();

  private:
  const ::mavsdk::rpc::gimbal::Quaternion& _internal_quaternion_forward() const;
  ::mavsdk::rpc::gimbal::Quaternion* _internal_mutable_quaternion_forward();

  public:
  // .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
  bool has_euler_angle_north() const;
  void clear_euler_angle_north() ;
  const ::mavsdk::rpc::gimbal::EulerAngle& euler_angle_north() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::EulerAngle* release_euler_angle_north();
  ::mavsdk::rpc::gimbal::EulerAngle* mutable_euler_angle_north();
  void set_allocated_euler_angle_north(::mavsdk::rpc::gimbal::EulerAngle* value);
  void unsafe_arena_set_allocated_euler_angle_north(::mavsdk::rpc::gimbal::EulerAngle* value);
  ::mavsdk::rpc::gimbal::EulerAngle* unsafe_arena_release_euler_angle_north();

  private:
  const ::mavsdk::rpc::gimbal::EulerAngle& _internal_euler_angle_north() const;
  ::mavsdk::rpc::gimbal::EulerAngle* _internal_mutable_euler_angle_north();

  public:
  // .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
  bool has_quaternion_north() const;
  void clear_quaternion_north() ;
  const ::mavsdk::rpc::gimbal::Quaternion& quaternion_north() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Quaternion* release_quaternion_north();
  ::mavsdk::rpc::gimbal::Quaternion* mutable_quaternion_north();
  void set_allocated_quaternion_north(::mavsdk::rpc::gimbal::Quaternion* value);
  void unsafe_arena_set_allocated_quaternion_north(::mavsdk::rpc::gimbal::Quaternion* value);
  ::mavsdk::rpc::gimbal::Quaternion* unsafe_arena_release_quaternion_north();

  private:
  const ::mavsdk::rpc::gimbal::Quaternion& _internal_quaternion_north() const;
  ::mavsdk::rpc::gimbal::Quaternion* _internal_mutable_quaternion_north();

  public:
  // .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
  bool has_angular_velocity() const;
  void clear_angular_velocity() ;
  const ::mavsdk::rpc::gimbal::AngularVelocityBody& angular_velocity() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::AngularVelocityBody* release_angular_velocity();
  ::mavsdk::rpc::gimbal::AngularVelocityBody* mutable_angular_velocity();
  void set_allocated_angular_velocity(::mavsdk::rpc::gimbal::AngularVelocityBody* value);
  void unsafe_arena_set_allocated_angular_velocity(::mavsdk::rpc::gimbal::AngularVelocityBody* value);
  ::mavsdk::rpc::gimbal::AngularVelocityBody* unsafe_arena_release_angular_velocity();

  private:
  const ::mavsdk::rpc::gimbal::AngularVelocityBody& _internal_angular_velocity() const;
  ::mavsdk::rpc::gimbal::AngularVelocityBody* _internal_mutable_angular_velocity();

  public:
  // uint64 timestamp_us = 7;
  void clear_timestamp_us() ;
  ::uint64_t timestamp_us() const;
  void set_timestamp_us(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::uint64_t value);

  public:
  // int32 gimbal_id = 1;
  void clear_gimbal_id() ;
  ::int32_t gimbal_id() const;
  void set_gimbal_id(::int32_t value);

  private:
  ::int32_t _internal_gimbal_id() const;
  void _internal_set_gimbal_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.Attitude)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Attitude& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_forward_;
    ::mavsdk::rpc::gimbal::Quaternion* quaternion_forward_;
    ::mavsdk::rpc::gimbal::EulerAngle* euler_angle_north_;
    ::mavsdk::rpc::gimbal::Quaternion* quaternion_north_;
    ::mavsdk::rpc::gimbal::AngularVelocityBody* angular_velocity_;
    ::uint64_t timestamp_us_;
    ::int32_t gimbal_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GimbalListResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GimbalListResponse) */ {
 public:
  inline GimbalListResponse() : GimbalListResponse(nullptr) {}
  ~GimbalListResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GimbalListResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GimbalListResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GimbalListResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GimbalListResponse(const GimbalListResponse& from) : GimbalListResponse(nullptr, from) {}
  inline GimbalListResponse(GimbalListResponse&& from) noexcept
      : GimbalListResponse(nullptr, std::move(from)) {}
  inline GimbalListResponse& operator=(const GimbalListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GimbalListResponse& operator=(GimbalListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GimbalListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GimbalListResponse* internal_default_instance() {
    return reinterpret_cast<const GimbalListResponse*>(
        &_GimbalListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(GimbalListResponse& a, GimbalListResponse& b) { a.Swap(&b); }
  inline void Swap(GimbalListResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GimbalListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GimbalListResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GimbalListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GimbalListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GimbalListResponse& from) { GimbalListResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GimbalListResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GimbalListResponse"; }

 protected:
  explicit GimbalListResponse(::google::protobuf::Arena* arena);
  GimbalListResponse(::google::protobuf::Arena* arena, const GimbalListResponse& from);
  GimbalListResponse(::google::protobuf::Arena* arena, GimbalListResponse&& from) noexcept
      : GimbalListResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalListFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
  bool has_gimbal_list() const;
  void clear_gimbal_list() ;
  const ::mavsdk::rpc::gimbal::GimbalList& gimbal_list() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalList* release_gimbal_list();
  ::mavsdk::rpc::gimbal::GimbalList* mutable_gimbal_list();
  void set_allocated_gimbal_list(::mavsdk::rpc::gimbal::GimbalList* value);
  void unsafe_arena_set_allocated_gimbal_list(::mavsdk::rpc::gimbal::GimbalList* value);
  ::mavsdk::rpc::gimbal::GimbalList* unsafe_arena_release_gimbal_list();

  private:
  const ::mavsdk::rpc::gimbal::GimbalList& _internal_gimbal_list() const;
  ::mavsdk::rpc::gimbal::GimbalList* _internal_mutable_gimbal_list();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GimbalListResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GimbalListResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalList* gimbal_list_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class GetAttitudeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.GetAttitudeResponse) */ {
 public:
  inline GetAttitudeResponse() : GetAttitudeResponse(nullptr) {}
  ~GetAttitudeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetAttitudeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetAttitudeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetAttitudeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetAttitudeResponse(const GetAttitudeResponse& from) : GetAttitudeResponse(nullptr, from) {}
  inline GetAttitudeResponse(GetAttitudeResponse&& from) noexcept
      : GetAttitudeResponse(nullptr, std::move(from)) {}
  inline GetAttitudeResponse& operator=(const GetAttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttitudeResponse& operator=(GetAttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const GetAttitudeResponse*>(
        &_GetAttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(GetAttitudeResponse& a, GetAttitudeResponse& b) { a.Swap(&b); }
  inline void Swap(GetAttitudeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttitudeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAttitudeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetAttitudeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAttitudeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetAttitudeResponse& from) { GetAttitudeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetAttitudeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.GetAttitudeResponse"; }

 protected:
  explicit GetAttitudeResponse(::google::protobuf::Arena* arena);
  GetAttitudeResponse(::google::protobuf::Arena* arena, const GetAttitudeResponse& from);
  GetAttitudeResponse(::google::protobuf::Arena* arena, GetAttitudeResponse&& from) noexcept
      : GetAttitudeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGimbalResultFieldNumber = 1,
    kAttitudeFieldNumber = 2,
  };
  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  bool has_gimbal_result() const;
  void clear_gimbal_result() ;
  const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::GimbalResult* release_gimbal_result();
  ::mavsdk::rpc::gimbal::GimbalResult* mutable_gimbal_result();
  void set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  void unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value);
  ::mavsdk::rpc::gimbal::GimbalResult* unsafe_arena_release_gimbal_result();

  private:
  const ::mavsdk::rpc::gimbal::GimbalResult& _internal_gimbal_result() const;
  ::mavsdk::rpc::gimbal::GimbalResult* _internal_mutable_gimbal_result();

  public:
  // .mavsdk.rpc.gimbal.Attitude attitude = 2;
  bool has_attitude() const;
  void clear_attitude() ;
  const ::mavsdk::rpc::gimbal::Attitude& attitude() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Attitude* release_attitude();
  ::mavsdk::rpc::gimbal::Attitude* mutable_attitude();
  void set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value);
  void unsafe_arena_set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value);
  ::mavsdk::rpc::gimbal::Attitude* unsafe_arena_release_attitude();

  private:
  const ::mavsdk::rpc::gimbal::Attitude& _internal_attitude() const;
  ::mavsdk::rpc::gimbal::Attitude* _internal_mutable_attitude();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.GetAttitudeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetAttitudeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::GimbalResult* gimbal_result_;
    ::mavsdk::rpc::gimbal::Attitude* attitude_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};
// -------------------------------------------------------------------

class AttitudeResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.gimbal.AttitudeResponse) */ {
 public:
  inline AttitudeResponse() : AttitudeResponse(nullptr) {}
  ~AttitudeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AttitudeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AttitudeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttitudeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AttitudeResponse(const AttitudeResponse& from) : AttitudeResponse(nullptr, from) {}
  inline AttitudeResponse(AttitudeResponse&& from) noexcept
      : AttitudeResponse(nullptr, std::move(from)) {}
  inline AttitudeResponse& operator=(const AttitudeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeResponse& operator=(AttitudeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttitudeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttitudeResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeResponse*>(
        &_AttitudeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(AttitudeResponse& a, AttitudeResponse& b) { a.Swap(&b); }
  inline void Swap(AttitudeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttitudeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttitudeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AttitudeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttitudeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttitudeResponse& from) { AttitudeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AttitudeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.gimbal.AttitudeResponse"; }

 protected:
  explicit AttitudeResponse(::google::protobuf::Arena* arena);
  AttitudeResponse(::google::protobuf::Arena* arena, const AttitudeResponse& from);
  AttitudeResponse(::google::protobuf::Arena* arena, AttitudeResponse&& from) noexcept
      : AttitudeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttitudeFieldNumber = 1,
  };
  // .mavsdk.rpc.gimbal.Attitude attitude = 1;
  bool has_attitude() const;
  void clear_attitude() ;
  const ::mavsdk::rpc::gimbal::Attitude& attitude() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::gimbal::Attitude* release_attitude();
  ::mavsdk::rpc::gimbal::Attitude* mutable_attitude();
  void set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value);
  void unsafe_arena_set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value);
  ::mavsdk::rpc::gimbal::Attitude* unsafe_arena_release_attitude();

  private:
  const ::mavsdk::rpc::gimbal::Attitude& _internal_attitude() const;
  ::mavsdk::rpc::gimbal::Attitude* _internal_mutable_attitude();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.gimbal.AttitudeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AttitudeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::gimbal::Attitude* attitude_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gimbal_2fgimbal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetAnglesRequest

// int32 gimbal_id = 1;
inline void SetAnglesRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t SetAnglesRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void SetAnglesRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_id)
}
inline ::int32_t SetAnglesRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void SetAnglesRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// float roll_deg = 2;
inline void SetAnglesRequest::clear_roll_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_deg_ = 0;
}
inline float SetAnglesRequest::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.roll_deg)
  return _internal_roll_deg();
}
inline void SetAnglesRequest::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.roll_deg)
}
inline float SetAnglesRequest::_internal_roll_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_deg_;
}
inline void SetAnglesRequest::_internal_set_roll_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_deg_ = value;
}

// float pitch_deg = 3;
inline void SetAnglesRequest::clear_pitch_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_deg_ = 0;
}
inline float SetAnglesRequest::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.pitch_deg)
  return _internal_pitch_deg();
}
inline void SetAnglesRequest::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.pitch_deg)
}
inline float SetAnglesRequest::_internal_pitch_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_deg_;
}
inline void SetAnglesRequest::_internal_set_pitch_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_deg_ = value;
}

// float yaw_deg = 4;
inline void SetAnglesRequest::clear_yaw_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = 0;
}
inline float SetAnglesRequest::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.yaw_deg)
  return _internal_yaw_deg();
}
inline void SetAnglesRequest::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.yaw_deg)
}
inline float SetAnglesRequest::_internal_yaw_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_deg_;
}
inline void SetAnglesRequest::_internal_set_yaw_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = value;
}

// .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
inline void SetAnglesRequest::clear_gimbal_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAnglesRequest::gimbal_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_mode)
  return _internal_gimbal_mode();
}
inline void SetAnglesRequest::set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  _internal_set_gimbal_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_mode)
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAnglesRequest::_internal_gimbal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::GimbalMode>(_impl_.gimbal_mode_);
}
inline void SetAnglesRequest::_internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_mode_ = value;
}

// .mavsdk.rpc.gimbal.SendMode send_mode = 6;
inline void SetAnglesRequest::clear_send_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::SendMode SetAnglesRequest::send_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesRequest.send_mode)
  return _internal_send_mode();
}
inline void SetAnglesRequest::set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  _internal_set_send_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAnglesRequest.send_mode)
}
inline ::mavsdk::rpc::gimbal::SendMode SetAnglesRequest::_internal_send_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::SendMode>(_impl_.send_mode_);
}
inline void SetAnglesRequest::_internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_mode_ = value;
}

// -------------------------------------------------------------------

// SetAnglesResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool SetAnglesResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void SetAnglesResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAnglesResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAnglesResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void SetAnglesResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAnglesResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
  return _msg;
}
inline void SetAnglesResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result)
}

// -------------------------------------------------------------------

// SetAngularRatesRequest

// int32 gimbal_id = 1;
inline void SetAngularRatesRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t SetAngularRatesRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void SetAngularRatesRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_id)
}
inline ::int32_t SetAngularRatesRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void SetAngularRatesRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// float roll_rate_deg_s = 2;
inline void SetAngularRatesRequest::clear_roll_rate_deg_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_rate_deg_s_ = 0;
}
inline float SetAngularRatesRequest::roll_rate_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.roll_rate_deg_s)
  return _internal_roll_rate_deg_s();
}
inline void SetAngularRatesRequest::set_roll_rate_deg_s(float value) {
  _internal_set_roll_rate_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.roll_rate_deg_s)
}
inline float SetAngularRatesRequest::_internal_roll_rate_deg_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_rate_deg_s_;
}
inline void SetAngularRatesRequest::_internal_set_roll_rate_deg_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_rate_deg_s_ = value;
}

// float pitch_rate_deg_s = 3;
inline void SetAngularRatesRequest::clear_pitch_rate_deg_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_rate_deg_s_ = 0;
}
inline float SetAngularRatesRequest::pitch_rate_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.pitch_rate_deg_s)
  return _internal_pitch_rate_deg_s();
}
inline void SetAngularRatesRequest::set_pitch_rate_deg_s(float value) {
  _internal_set_pitch_rate_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.pitch_rate_deg_s)
}
inline float SetAngularRatesRequest::_internal_pitch_rate_deg_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_rate_deg_s_;
}
inline void SetAngularRatesRequest::_internal_set_pitch_rate_deg_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_rate_deg_s_ = value;
}

// float yaw_rate_deg_s = 4;
inline void SetAngularRatesRequest::clear_yaw_rate_deg_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_rate_deg_s_ = 0;
}
inline float SetAngularRatesRequest::yaw_rate_deg_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.yaw_rate_deg_s)
  return _internal_yaw_rate_deg_s();
}
inline void SetAngularRatesRequest::set_yaw_rate_deg_s(float value) {
  _internal_set_yaw_rate_deg_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.yaw_rate_deg_s)
}
inline float SetAngularRatesRequest::_internal_yaw_rate_deg_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_rate_deg_s_;
}
inline void SetAngularRatesRequest::_internal_set_yaw_rate_deg_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_rate_deg_s_ = value;
}

// .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 5;
inline void SetAngularRatesRequest::clear_gimbal_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAngularRatesRequest::gimbal_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_mode)
  return _internal_gimbal_mode();
}
inline void SetAngularRatesRequest::set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  _internal_set_gimbal_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_mode)
}
inline ::mavsdk::rpc::gimbal::GimbalMode SetAngularRatesRequest::_internal_gimbal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::GimbalMode>(_impl_.gimbal_mode_);
}
inline void SetAngularRatesRequest::_internal_set_gimbal_mode(::mavsdk::rpc::gimbal::GimbalMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_mode_ = value;
}

// .mavsdk.rpc.gimbal.SendMode send_mode = 6;
inline void SetAngularRatesRequest::clear_send_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::SendMode SetAngularRatesRequest::send_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesRequest.send_mode)
  return _internal_send_mode();
}
inline void SetAngularRatesRequest::set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  _internal_set_send_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetAngularRatesRequest.send_mode)
}
inline ::mavsdk::rpc::gimbal::SendMode SetAngularRatesRequest::_internal_send_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::SendMode>(_impl_.send_mode_);
}
inline void SetAngularRatesRequest::_internal_set_send_mode(::mavsdk::rpc::gimbal::SendMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.send_mode_ = value;
}

// -------------------------------------------------------------------

// SetAngularRatesResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool SetAngularRatesResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void SetAngularRatesResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAngularRatesResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetAngularRatesResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void SetAngularRatesResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetAngularRatesResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
  return _msg;
}
inline void SetAngularRatesResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result)
}

// -------------------------------------------------------------------

// SetRoiLocationRequest

// int32 gimbal_id = 1;
inline void SetRoiLocationRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t SetRoiLocationRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void SetRoiLocationRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.gimbal_id)
}
inline ::int32_t SetRoiLocationRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void SetRoiLocationRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// double latitude_deg = 2;
inline void SetRoiLocationRequest::clear_latitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = 0;
}
inline double SetRoiLocationRequest::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.latitude_deg)
  return _internal_latitude_deg();
}
inline void SetRoiLocationRequest::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.latitude_deg)
}
inline double SetRoiLocationRequest::_internal_latitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_deg_;
}
inline void SetRoiLocationRequest::_internal_set_latitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 3;
inline void SetRoiLocationRequest::clear_longitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = 0;
}
inline double SetRoiLocationRequest::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.longitude_deg)
  return _internal_longitude_deg();
}
inline void SetRoiLocationRequest::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.longitude_deg)
}
inline double SetRoiLocationRequest::_internal_longitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_deg_;
}
inline void SetRoiLocationRequest::_internal_set_longitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = value;
}

// float altitude_m = 4;
inline void SetRoiLocationRequest::clear_altitude_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_m_ = 0;
}
inline float SetRoiLocationRequest::altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationRequest.altitude_m)
  return _internal_altitude_m();
}
inline void SetRoiLocationRequest::set_altitude_m(float value) {
  _internal_set_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.SetRoiLocationRequest.altitude_m)
}
inline float SetRoiLocationRequest::_internal_altitude_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.altitude_m_;
}
inline void SetRoiLocationRequest::_internal_set_altitude_m(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.altitude_m_ = value;
}

// -------------------------------------------------------------------

// SetRoiLocationResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool SetRoiLocationResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void SetRoiLocationResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetRoiLocationResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& SetRoiLocationResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void SetRoiLocationResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* SetRoiLocationResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
  return _msg;
}
inline void SetRoiLocationResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result)
}

// -------------------------------------------------------------------

// TakeControlRequest

// int32 gimbal_id = 1;
inline void TakeControlRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t TakeControlRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.TakeControlRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void TakeControlRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.TakeControlRequest.gimbal_id)
}
inline ::int32_t TakeControlRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void TakeControlRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
inline void TakeControlRequest::clear_control_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::ControlMode TakeControlRequest::control_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.TakeControlRequest.control_mode)
  return _internal_control_mode();
}
inline void TakeControlRequest::set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  _internal_set_control_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.TakeControlRequest.control_mode)
}
inline ::mavsdk::rpc::gimbal::ControlMode TakeControlRequest::_internal_control_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::ControlMode>(_impl_.control_mode_);
}
inline void TakeControlRequest::_internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_mode_ = value;
}

// -------------------------------------------------------------------

// TakeControlResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool TakeControlResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void TakeControlResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& TakeControlResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& TakeControlResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void TakeControlResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* TakeControlResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
  return _msg;
}
inline void TakeControlResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result)
}

// -------------------------------------------------------------------

// ReleaseControlRequest

// int32 gimbal_id = 1;
inline void ReleaseControlRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t ReleaseControlRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ReleaseControlRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void ReleaseControlRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ReleaseControlRequest.gimbal_id)
}
inline ::int32_t ReleaseControlRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void ReleaseControlRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// -------------------------------------------------------------------

// ReleaseControlResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool ReleaseControlResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void ReleaseControlResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& ReleaseControlResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& ReleaseControlResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void ReleaseControlResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* ReleaseControlResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
  return _msg;
}
inline void ReleaseControlResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result)
}

// -------------------------------------------------------------------

// SubscribeControlStatusRequest

// -------------------------------------------------------------------

// ControlStatusResponse

// .mavsdk.rpc.gimbal.ControlStatus control_status = 1;
inline bool ControlStatusResponse::has_control_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_status_ != nullptr);
  return value;
}
inline void ControlStatusResponse::clear_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_status_ != nullptr) _impl_.control_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& ControlStatusResponse::_internal_control_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::ControlStatus* p = _impl_.control_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::ControlStatus&>(::mavsdk::rpc::gimbal::_ControlStatus_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& ControlStatusResponse::control_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
  return _internal_control_status();
}
inline void ControlStatusResponse::unsafe_arena_set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_status_);
  }
  _impl_.control_status_ = reinterpret_cast<::mavsdk::rpc::gimbal::ControlStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::release_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::ControlStatus* released = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::unsafe_arena_release_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::ControlStatus* temp = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::_internal_mutable_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::ControlStatus>(GetArena());
    _impl_.control_status_ = reinterpret_cast<::mavsdk::rpc::gimbal::ControlStatus*>(p);
  }
  return _impl_.control_status_;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* ControlStatusResponse::mutable_control_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::ControlStatus* _msg = _internal_mutable_control_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
  return _msg;
}
inline void ControlStatusResponse::set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.control_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.control_status_ = reinterpret_cast<::mavsdk::rpc::gimbal::ControlStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.ControlStatusResponse.control_status)
}

// -------------------------------------------------------------------

// GetControlStatusRequest

// int32 gimbal_id = 1;
inline void GetControlStatusRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t GetControlStatusRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetControlStatusRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void GetControlStatusRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GetControlStatusRequest.gimbal_id)
}
inline ::int32_t GetControlStatusRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void GetControlStatusRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// -------------------------------------------------------------------

// GetControlStatusResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool GetControlStatusResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void GetControlStatusResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetControlStatusResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetControlStatusResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void GetControlStatusResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetControlStatusResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
  return _msg;
}
inline void GetControlStatusResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result)
}

// .mavsdk.rpc.gimbal.ControlStatus control_status = 2;
inline bool GetControlStatusResponse::has_control_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_status_ != nullptr);
  return value;
}
inline void GetControlStatusResponse::clear_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_status_ != nullptr) _impl_.control_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& GetControlStatusResponse::_internal_control_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::ControlStatus* p = _impl_.control_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::ControlStatus&>(::mavsdk::rpc::gimbal::_ControlStatus_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::ControlStatus& GetControlStatusResponse::control_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
  return _internal_control_status();
}
inline void GetControlStatusResponse::unsafe_arena_set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_status_);
  }
  _impl_.control_status_ = reinterpret_cast<::mavsdk::rpc::gimbal::ControlStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::release_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::gimbal::ControlStatus* released = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::unsafe_arena_release_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::gimbal::ControlStatus* temp = _impl_.control_status_;
  _impl_.control_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::_internal_mutable_control_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.control_status_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::ControlStatus>(GetArena());
    _impl_.control_status_ = reinterpret_cast<::mavsdk::rpc::gimbal::ControlStatus*>(p);
  }
  return _impl_.control_status_;
}
inline ::mavsdk::rpc::gimbal::ControlStatus* GetControlStatusResponse::mutable_control_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::gimbal::ControlStatus* _msg = _internal_mutable_control_status();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
  return _msg;
}
inline void GetControlStatusResponse::set_allocated_control_status(::mavsdk::rpc::gimbal::ControlStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.control_status_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.control_status_ = reinterpret_cast<::mavsdk::rpc::gimbal::ControlStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetControlStatusResponse.control_status)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_w() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.w)
}
inline float Quaternion::_internal_w() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.w_;
}
inline void Quaternion::_internal_set_w(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.w_ = value;
}

// float x = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.x)
}
inline float Quaternion::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Quaternion::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.y)
}
inline float Quaternion::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Quaternion::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void Quaternion::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Quaternion.z)
}
inline float Quaternion::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Quaternion::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_roll_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_deg_ = 0;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.EulerAngle.roll_deg)
  return _internal_roll_deg();
}
inline void EulerAngle::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.EulerAngle.roll_deg)
}
inline float EulerAngle::_internal_roll_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_deg_;
}
inline void EulerAngle::_internal_set_roll_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_deg_ = value;
}

// float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_pitch_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_deg_ = 0;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.EulerAngle.pitch_deg)
  return _internal_pitch_deg();
}
inline void EulerAngle::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.EulerAngle.pitch_deg)
}
inline float EulerAngle::_internal_pitch_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_deg_;
}
inline void EulerAngle::_internal_set_pitch_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_deg_ = value;
}

// float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void EulerAngle::clear_yaw_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = 0;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.EulerAngle.yaw_deg)
  return _internal_yaw_deg();
}
inline void EulerAngle::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.EulerAngle.yaw_deg)
}
inline float EulerAngle::_internal_yaw_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_deg_;
}
inline void EulerAngle::_internal_set_yaw_deg(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_deg_ = value;
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_roll_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_rad_s_ = 0;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AngularVelocityBody.roll_rad_s)
  return _internal_roll_rad_s();
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  _internal_set_roll_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.AngularVelocityBody.roll_rad_s)
}
inline float AngularVelocityBody::_internal_roll_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_rad_s_;
}
inline void AngularVelocityBody::_internal_set_roll_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_rad_s_ = value;
}

// float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_pitch_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AngularVelocityBody.pitch_rad_s)
  return _internal_pitch_rad_s();
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  _internal_set_pitch_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.AngularVelocityBody.pitch_rad_s)
}
inline float AngularVelocityBody::_internal_pitch_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_rad_s_;
}
inline void AngularVelocityBody::_internal_set_pitch_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_rad_s_ = value;
}

// float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void AngularVelocityBody::clear_yaw_rad_s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AngularVelocityBody.yaw_rad_s)
  return _internal_yaw_rad_s();
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  _internal_set_yaw_rad_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.AngularVelocityBody.yaw_rad_s)
}
inline float AngularVelocityBody::_internal_yaw_rad_s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_rad_s_;
}
inline void AngularVelocityBody::_internal_set_yaw_rad_s(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_rad_s_ = value;
}

// -------------------------------------------------------------------

// Attitude

// int32 gimbal_id = 1;
inline void Attitude::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t Attitude::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.gimbal_id)
  return _internal_gimbal_id();
}
inline void Attitude::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Attitude.gimbal_id)
}
inline ::int32_t Attitude::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void Attitude::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// .mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 2;
inline bool Attitude::has_euler_angle_forward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.euler_angle_forward_ != nullptr);
  return value;
}
inline void Attitude::clear_euler_angle_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.euler_angle_forward_ != nullptr) _impl_.euler_angle_forward_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::_internal_euler_angle_forward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::EulerAngle* p = _impl_.euler_angle_forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::EulerAngle&>(::mavsdk::rpc::gimbal::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::euler_angle_forward() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
  return _internal_euler_angle_forward();
}
inline void Attitude::unsafe_arena_set_allocated_euler_angle_forward(::mavsdk::rpc::gimbal::EulerAngle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.euler_angle_forward_);
  }
  _impl_.euler_angle_forward_ = reinterpret_cast<::mavsdk::rpc::gimbal::EulerAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::release_euler_angle_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::EulerAngle* released = _impl_.euler_angle_forward_;
  _impl_.euler_angle_forward_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::unsafe_arena_release_euler_angle_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::EulerAngle* temp = _impl_.euler_angle_forward_;
  _impl_.euler_angle_forward_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::_internal_mutable_euler_angle_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.euler_angle_forward_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::EulerAngle>(GetArena());
    _impl_.euler_angle_forward_ = reinterpret_cast<::mavsdk::rpc::gimbal::EulerAngle*>(p);
  }
  return _impl_.euler_angle_forward_;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::mutable_euler_angle_forward() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::EulerAngle* _msg = _internal_mutable_euler_angle_forward();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
  return _msg;
}
inline void Attitude::set_allocated_euler_angle_forward(::mavsdk::rpc::gimbal::EulerAngle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.euler_angle_forward_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.euler_angle_forward_ = reinterpret_cast<::mavsdk::rpc::gimbal::EulerAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_forward)
}

// .mavsdk.rpc.gimbal.Quaternion quaternion_forward = 3;
inline bool Attitude::has_quaternion_forward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quaternion_forward_ != nullptr);
  return value;
}
inline void Attitude::clear_quaternion_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quaternion_forward_ != nullptr) _impl_.quaternion_forward_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::_internal_quaternion_forward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::Quaternion* p = _impl_.quaternion_forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Quaternion&>(::mavsdk::rpc::gimbal::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::quaternion_forward() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
  return _internal_quaternion_forward();
}
inline void Attitude::unsafe_arena_set_allocated_quaternion_forward(::mavsdk::rpc::gimbal::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quaternion_forward_);
  }
  _impl_.quaternion_forward_ = reinterpret_cast<::mavsdk::rpc::gimbal::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::release_quaternion_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::gimbal::Quaternion* released = _impl_.quaternion_forward_;
  _impl_.quaternion_forward_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::unsafe_arena_release_quaternion_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.quaternion_forward)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::gimbal::Quaternion* temp = _impl_.quaternion_forward_;
  _impl_.quaternion_forward_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::_internal_mutable_quaternion_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quaternion_forward_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::Quaternion>(GetArena());
    _impl_.quaternion_forward_ = reinterpret_cast<::mavsdk::rpc::gimbal::Quaternion*>(p);
  }
  return _impl_.quaternion_forward_;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::mutable_quaternion_forward() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::gimbal::Quaternion* _msg = _internal_mutable_quaternion_forward();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
  return _msg;
}
inline void Attitude::set_allocated_quaternion_forward(::mavsdk::rpc::gimbal::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.quaternion_forward_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.quaternion_forward_ = reinterpret_cast<::mavsdk::rpc::gimbal::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_forward)
}

// .mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 4;
inline bool Attitude::has_euler_angle_north() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.euler_angle_north_ != nullptr);
  return value;
}
inline void Attitude::clear_euler_angle_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.euler_angle_north_ != nullptr) _impl_.euler_angle_north_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::_internal_euler_angle_north() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::EulerAngle* p = _impl_.euler_angle_north_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::EulerAngle&>(::mavsdk::rpc::gimbal::_EulerAngle_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::EulerAngle& Attitude::euler_angle_north() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
  return _internal_euler_angle_north();
}
inline void Attitude::unsafe_arena_set_allocated_euler_angle_north(::mavsdk::rpc::gimbal::EulerAngle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.euler_angle_north_);
  }
  _impl_.euler_angle_north_ = reinterpret_cast<::mavsdk::rpc::gimbal::EulerAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::release_euler_angle_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::gimbal::EulerAngle* released = _impl_.euler_angle_north_;
  _impl_.euler_angle_north_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::unsafe_arena_release_euler_angle_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.euler_angle_north)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mavsdk::rpc::gimbal::EulerAngle* temp = _impl_.euler_angle_north_;
  _impl_.euler_angle_north_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::_internal_mutable_euler_angle_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.euler_angle_north_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::EulerAngle>(GetArena());
    _impl_.euler_angle_north_ = reinterpret_cast<::mavsdk::rpc::gimbal::EulerAngle*>(p);
  }
  return _impl_.euler_angle_north_;
}
inline ::mavsdk::rpc::gimbal::EulerAngle* Attitude::mutable_euler_angle_north() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::mavsdk::rpc::gimbal::EulerAngle* _msg = _internal_mutable_euler_angle_north();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
  return _msg;
}
inline void Attitude::set_allocated_euler_angle_north(::mavsdk::rpc::gimbal::EulerAngle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.euler_angle_north_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.euler_angle_north_ = reinterpret_cast<::mavsdk::rpc::gimbal::EulerAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.euler_angle_north)
}

// .mavsdk.rpc.gimbal.Quaternion quaternion_north = 5;
inline bool Attitude::has_quaternion_north() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quaternion_north_ != nullptr);
  return value;
}
inline void Attitude::clear_quaternion_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quaternion_north_ != nullptr) _impl_.quaternion_north_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::_internal_quaternion_north() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::Quaternion* p = _impl_.quaternion_north_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Quaternion&>(::mavsdk::rpc::gimbal::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Quaternion& Attitude::quaternion_north() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.quaternion_north)
  return _internal_quaternion_north();
}
inline void Attitude::unsafe_arena_set_allocated_quaternion_north(::mavsdk::rpc::gimbal::Quaternion* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.quaternion_north_);
  }
  _impl_.quaternion_north_ = reinterpret_cast<::mavsdk::rpc::gimbal::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_north)
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::release_quaternion_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mavsdk::rpc::gimbal::Quaternion* released = _impl_.quaternion_north_;
  _impl_.quaternion_north_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::unsafe_arena_release_quaternion_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.quaternion_north)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mavsdk::rpc::gimbal::Quaternion* temp = _impl_.quaternion_north_;
  _impl_.quaternion_north_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::_internal_mutable_quaternion_north() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quaternion_north_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::Quaternion>(GetArena());
    _impl_.quaternion_north_ = reinterpret_cast<::mavsdk::rpc::gimbal::Quaternion*>(p);
  }
  return _impl_.quaternion_north_;
}
inline ::mavsdk::rpc::gimbal::Quaternion* Attitude::mutable_quaternion_north() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::mavsdk::rpc::gimbal::Quaternion* _msg = _internal_mutable_quaternion_north();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.quaternion_north)
  return _msg;
}
inline void Attitude::set_allocated_quaternion_north(::mavsdk::rpc::gimbal::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.quaternion_north_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.quaternion_north_ = reinterpret_cast<::mavsdk::rpc::gimbal::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.quaternion_north)
}

// .mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 6;
inline bool Attitude::has_angular_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angular_velocity_ != nullptr);
  return value;
}
inline void Attitude::clear_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::mavsdk::rpc::gimbal::AngularVelocityBody& Attitude::_internal_angular_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::AngularVelocityBody* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::AngularVelocityBody&>(::mavsdk::rpc::gimbal::_AngularVelocityBody_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::AngularVelocityBody& Attitude::angular_velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.angular_velocity)
  return _internal_angular_velocity();
}
inline void Attitude::unsafe_arena_set_allocated_angular_velocity(::mavsdk::rpc::gimbal::AngularVelocityBody* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = reinterpret_cast<::mavsdk::rpc::gimbal::AngularVelocityBody*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.Attitude.angular_velocity)
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::mavsdk::rpc::gimbal::AngularVelocityBody* released = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::unsafe_arena_release_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.Attitude.angular_velocity)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::mavsdk::rpc::gimbal::AngularVelocityBody* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::_internal_mutable_angular_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::AngularVelocityBody>(GetArena());
    _impl_.angular_velocity_ = reinterpret_cast<::mavsdk::rpc::gimbal::AngularVelocityBody*>(p);
  }
  return _impl_.angular_velocity_;
}
inline ::mavsdk::rpc::gimbal::AngularVelocityBody* Attitude::mutable_angular_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::mavsdk::rpc::gimbal::AngularVelocityBody* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.Attitude.angular_velocity)
  return _msg;
}
inline void Attitude::set_allocated_angular_velocity(::mavsdk::rpc::gimbal::AngularVelocityBody* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.angular_velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.angular_velocity_ = reinterpret_cast<::mavsdk::rpc::gimbal::AngularVelocityBody*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.Attitude.angular_velocity)
}

// uint64 timestamp_us = 7;
inline void Attitude::clear_timestamp_us() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = ::uint64_t{0u};
}
inline ::uint64_t Attitude::timestamp_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.Attitude.timestamp_us)
  return _internal_timestamp_us();
}
inline void Attitude::set_timestamp_us(::uint64_t value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.Attitude.timestamp_us)
}
inline ::uint64_t Attitude::_internal_timestamp_us() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_us_;
}
inline void Attitude::_internal_set_timestamp_us(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_us_ = value;
}

// -------------------------------------------------------------------

// SubscribeAttitudeRequest

// -------------------------------------------------------------------

// AttitudeResponse

// .mavsdk.rpc.gimbal.Attitude attitude = 1;
inline bool AttitudeResponse::has_attitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attitude_ != nullptr);
  return value;
}
inline void AttitudeResponse::clear_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attitude_ != nullptr) _impl_.attitude_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::Attitude& AttitudeResponse::_internal_attitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::Attitude* p = _impl_.attitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Attitude&>(::mavsdk::rpc::gimbal::_Attitude_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Attitude& AttitudeResponse::attitude() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
  return _internal_attitude();
}
inline void AttitudeResponse::unsafe_arena_set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attitude_);
  }
  _impl_.attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal::Attitude*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::release_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::Attitude* released = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::unsafe_arena_release_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.AttitudeResponse.attitude)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::Attitude* temp = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::_internal_mutable_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attitude_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::Attitude>(GetArena());
    _impl_.attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal::Attitude*>(p);
  }
  return _impl_.attitude_;
}
inline ::mavsdk::rpc::gimbal::Attitude* AttitudeResponse::mutable_attitude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::Attitude* _msg = _internal_mutable_attitude();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
  return _msg;
}
inline void AttitudeResponse::set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.attitude_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal::Attitude*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.AttitudeResponse.attitude)
}

// -------------------------------------------------------------------

// GetAttitudeRequest

// int32 gimbal_id = 1;
inline void GetAttitudeRequest::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t GetAttitudeRequest::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetAttitudeRequest.gimbal_id)
  return _internal_gimbal_id();
}
inline void GetAttitudeRequest::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GetAttitudeRequest.gimbal_id)
}
inline ::int32_t GetAttitudeRequest::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void GetAttitudeRequest::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// -------------------------------------------------------------------

// GetAttitudeResponse

// .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
inline bool GetAttitudeResponse::has_gimbal_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_result_ != nullptr);
  return value;
}
inline void GetAttitudeResponse::clear_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ != nullptr) _impl_.gimbal_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetAttitudeResponse::_internal_gimbal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalResult* p = _impl_.gimbal_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalResult&>(::mavsdk::rpc::gimbal::_GimbalResult_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalResult& GetAttitudeResponse::gimbal_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
  return _internal_gimbal_result();
}
inline void GetAttitudeResponse::unsafe_arena_set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_result_);
  }
  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* released = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::unsafe_arena_release_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* temp = _impl_.gimbal_result_;
  _impl_.gimbal_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::_internal_mutable_gimbal_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalResult>(GetArena());
    _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(p);
  }
  return _impl_.gimbal_result_;
}
inline ::mavsdk::rpc::gimbal::GimbalResult* GetAttitudeResponse::mutable_gimbal_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalResult* _msg = _internal_mutable_gimbal_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
  return _msg;
}
inline void GetAttitudeResponse::set_allocated_gimbal_result(::mavsdk::rpc::gimbal::GimbalResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_result_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result)
}

// .mavsdk.rpc.gimbal.Attitude attitude = 2;
inline bool GetAttitudeResponse::has_attitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attitude_ != nullptr);
  return value;
}
inline void GetAttitudeResponse::clear_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attitude_ != nullptr) _impl_.attitude_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::gimbal::Attitude& GetAttitudeResponse::_internal_attitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::Attitude* p = _impl_.attitude_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::Attitude&>(::mavsdk::rpc::gimbal::_Attitude_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::Attitude& GetAttitudeResponse::attitude() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
  return _internal_attitude();
}
inline void GetAttitudeResponse::unsafe_arena_set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attitude_);
  }
  _impl_.attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal::Attitude*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::release_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::gimbal::Attitude* released = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::unsafe_arena_release_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::gimbal::Attitude* temp = _impl_.attitude_;
  _impl_.attitude_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::_internal_mutable_attitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attitude_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::Attitude>(GetArena());
    _impl_.attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal::Attitude*>(p);
  }
  return _impl_.attitude_;
}
inline ::mavsdk::rpc::gimbal::Attitude* GetAttitudeResponse::mutable_attitude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::gimbal::Attitude* _msg = _internal_mutable_attitude();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
  return _msg;
}
inline void GetAttitudeResponse::set_allocated_attitude(::mavsdk::rpc::gimbal::Attitude* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.attitude_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.attitude_ = reinterpret_cast<::mavsdk::rpc::gimbal::Attitude*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GetAttitudeResponse.attitude)
}

// -------------------------------------------------------------------

// SubscribeGimbalListRequest

// -------------------------------------------------------------------

// GimbalListResponse

// .mavsdk.rpc.gimbal.GimbalList gimbal_list = 1;
inline bool GimbalListResponse::has_gimbal_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gimbal_list_ != nullptr);
  return value;
}
inline void GimbalListResponse::clear_gimbal_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_list_ != nullptr) _impl_.gimbal_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::gimbal::GimbalList& GimbalListResponse::_internal_gimbal_list() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::gimbal::GimbalList* p = _impl_.gimbal_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::gimbal::GimbalList&>(::mavsdk::rpc::gimbal::_GimbalList_default_instance_);
}
inline const ::mavsdk::rpc::gimbal::GimbalList& GimbalListResponse::gimbal_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
  return _internal_gimbal_list();
}
inline void GimbalListResponse::unsafe_arena_set_allocated_gimbal_list(::mavsdk::rpc::gimbal::GimbalList* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gimbal_list_);
  }
  _impl_.gimbal_list_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::release_gimbal_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalList* released = _impl_.gimbal_list_;
  _impl_.gimbal_list_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::unsafe_arena_release_gimbal_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalList* temp = _impl_.gimbal_list_;
  _impl_.gimbal_list_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::_internal_mutable_gimbal_list() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gimbal_list_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::gimbal::GimbalList>(GetArena());
    _impl_.gimbal_list_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalList*>(p);
  }
  return _impl_.gimbal_list_;
}
inline ::mavsdk::rpc::gimbal::GimbalList* GimbalListResponse::mutable_gimbal_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::gimbal::GimbalList* _msg = _internal_mutable_gimbal_list();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
  return _msg;
}
inline void GimbalListResponse::set_allocated_gimbal_list(::mavsdk::rpc::gimbal::GimbalList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.gimbal_list_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gimbal_list_ = reinterpret_cast<::mavsdk::rpc::gimbal::GimbalList*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list)
}

// -------------------------------------------------------------------

// GimbalItem

// int32 gimbal_id = 1;
inline void GimbalItem::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t GimbalItem::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.gimbal_id)
  return _internal_gimbal_id();
}
inline void GimbalItem::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.gimbal_id)
}
inline ::int32_t GimbalItem::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void GimbalItem::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// string vendor_name = 2;
inline void GimbalItem::clear_vendor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_name_.ClearToEmpty();
}
inline const std::string& GimbalItem::vendor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
  return _internal_vendor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GimbalItem::set_vendor_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
}
inline std::string* GimbalItem::mutable_vendor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vendor_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
  return _s;
}
inline const std::string& GimbalItem::_internal_vendor_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vendor_name_.Get();
}
inline void GimbalItem::_internal_set_vendor_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_name_.Set(value, GetArena());
}
inline std::string* GimbalItem::_internal_mutable_vendor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vendor_name_.Mutable( GetArena());
}
inline std::string* GimbalItem::release_vendor_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
  return _impl_.vendor_name_.Release();
}
inline void GimbalItem::set_allocated_vendor_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vendor_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vendor_name_.IsDefault()) {
    _impl_.vendor_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalItem.vendor_name)
}

// string model_name = 3;
inline void GimbalItem::clear_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& GimbalItem::model_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.model_name)
  return _internal_model_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GimbalItem::set_model_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.model_name)
}
inline std::string* GimbalItem::mutable_model_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalItem.model_name)
  return _s;
}
inline const std::string& GimbalItem::_internal_model_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_name_.Get();
}
inline void GimbalItem::_internal_set_model_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.Set(value, GetArena());
}
inline std::string* GimbalItem::_internal_mutable_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_name_.Mutable( GetArena());
}
inline std::string* GimbalItem::release_model_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalItem.model_name)
  return _impl_.model_name_.Release();
}
inline void GimbalItem::set_allocated_model_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.model_name_.IsDefault()) {
    _impl_.model_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalItem.model_name)
}

// string custom_name = 4;
inline void GimbalItem::clear_custom_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_name_.ClearToEmpty();
}
inline const std::string& GimbalItem::custom_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.custom_name)
  return _internal_custom_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GimbalItem::set_custom_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.custom_name)
}
inline std::string* GimbalItem::mutable_custom_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_custom_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalItem.custom_name)
  return _s;
}
inline const std::string& GimbalItem::_internal_custom_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.custom_name_.Get();
}
inline void GimbalItem::_internal_set_custom_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_name_.Set(value, GetArena());
}
inline std::string* GimbalItem::_internal_mutable_custom_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.custom_name_.Mutable( GetArena());
}
inline std::string* GimbalItem::release_custom_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalItem.custom_name)
  return _impl_.custom_name_.Release();
}
inline void GimbalItem::set_allocated_custom_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.custom_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.custom_name_.IsDefault()) {
    _impl_.custom_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalItem.custom_name)
}

// int32 gimbal_manager_component_id = 5;
inline void GimbalItem::clear_gimbal_manager_component_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_manager_component_id_ = 0;
}
inline ::int32_t GimbalItem::gimbal_manager_component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.gimbal_manager_component_id)
  return _internal_gimbal_manager_component_id();
}
inline void GimbalItem::set_gimbal_manager_component_id(::int32_t value) {
  _internal_set_gimbal_manager_component_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.gimbal_manager_component_id)
}
inline ::int32_t GimbalItem::_internal_gimbal_manager_component_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_manager_component_id_;
}
inline void GimbalItem::_internal_set_gimbal_manager_component_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_manager_component_id_ = value;
}

// int32 gimbal_device_id = 6;
inline void GimbalItem::clear_gimbal_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_device_id_ = 0;
}
inline ::int32_t GimbalItem::gimbal_device_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalItem.gimbal_device_id)
  return _internal_gimbal_device_id();
}
inline void GimbalItem::set_gimbal_device_id(::int32_t value) {
  _internal_set_gimbal_device_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalItem.gimbal_device_id)
}
inline ::int32_t GimbalItem::_internal_gimbal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_device_id_;
}
inline void GimbalItem::_internal_set_gimbal_device_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_device_id_ = value;
}

// -------------------------------------------------------------------

// GimbalList

// repeated .mavsdk.rpc.gimbal.GimbalItem gimbals = 1;
inline int GimbalList::_internal_gimbals_size() const {
  return _internal_gimbals().size();
}
inline int GimbalList::gimbals_size() const {
  return _internal_gimbals_size();
}
inline void GimbalList::clear_gimbals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbals_.Clear();
}
inline ::mavsdk::rpc::gimbal::GimbalItem* GimbalList::mutable_gimbals(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _internal_mutable_gimbals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>* GimbalList::mutable_gimbals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.gimbal.GimbalList.gimbals)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_gimbals();
}
inline const ::mavsdk::rpc::gimbal::GimbalItem& GimbalList::gimbals(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _internal_gimbals().Get(index);
}
inline ::mavsdk::rpc::gimbal::GimbalItem* GimbalList::add_gimbals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mavsdk::rpc::gimbal::GimbalItem* _add = _internal_mutable_gimbals()->Add();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>& GimbalList::gimbals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.gimbal.GimbalList.gimbals)
  return _internal_gimbals();
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>&
GimbalList::_internal_gimbals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbals_;
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::gimbal::GimbalItem>*
GimbalList::_internal_mutable_gimbals() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.gimbals_;
}

// -------------------------------------------------------------------

// ControlStatus

// int32 gimbal_id = 1;
inline void ControlStatus::clear_gimbal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = 0;
}
inline ::int32_t ControlStatus::gimbal_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.gimbal_id)
  return _internal_gimbal_id();
}
inline void ControlStatus::set_gimbal_id(::int32_t value) {
  _internal_set_gimbal_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.gimbal_id)
}
inline ::int32_t ControlStatus::_internal_gimbal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gimbal_id_;
}
inline void ControlStatus::_internal_set_gimbal_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gimbal_id_ = value;
}

// .mavsdk.rpc.gimbal.ControlMode control_mode = 2;
inline void ControlStatus::clear_control_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_mode_ = 0;
}
inline ::mavsdk::rpc::gimbal::ControlMode ControlStatus::control_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.control_mode)
  return _internal_control_mode();
}
inline void ControlStatus::set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  _internal_set_control_mode(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.control_mode)
}
inline ::mavsdk::rpc::gimbal::ControlMode ControlStatus::_internal_control_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::ControlMode>(_impl_.control_mode_);
}
inline void ControlStatus::_internal_set_control_mode(::mavsdk::rpc::gimbal::ControlMode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.control_mode_ = value;
}

// int32 sysid_primary_control = 3;
inline void ControlStatus::clear_sysid_primary_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sysid_primary_control_ = 0;
}
inline ::int32_t ControlStatus::sysid_primary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.sysid_primary_control)
  return _internal_sysid_primary_control();
}
inline void ControlStatus::set_sysid_primary_control(::int32_t value) {
  _internal_set_sysid_primary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.sysid_primary_control)
}
inline ::int32_t ControlStatus::_internal_sysid_primary_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sysid_primary_control_;
}
inline void ControlStatus::_internal_set_sysid_primary_control(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sysid_primary_control_ = value;
}

// int32 compid_primary_control = 4;
inline void ControlStatus::clear_compid_primary_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compid_primary_control_ = 0;
}
inline ::int32_t ControlStatus::compid_primary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.compid_primary_control)
  return _internal_compid_primary_control();
}
inline void ControlStatus::set_compid_primary_control(::int32_t value) {
  _internal_set_compid_primary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.compid_primary_control)
}
inline ::int32_t ControlStatus::_internal_compid_primary_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compid_primary_control_;
}
inline void ControlStatus::_internal_set_compid_primary_control(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compid_primary_control_ = value;
}

// int32 sysid_secondary_control = 5;
inline void ControlStatus::clear_sysid_secondary_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sysid_secondary_control_ = 0;
}
inline ::int32_t ControlStatus::sysid_secondary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.sysid_secondary_control)
  return _internal_sysid_secondary_control();
}
inline void ControlStatus::set_sysid_secondary_control(::int32_t value) {
  _internal_set_sysid_secondary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.sysid_secondary_control)
}
inline ::int32_t ControlStatus::_internal_sysid_secondary_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sysid_secondary_control_;
}
inline void ControlStatus::_internal_set_sysid_secondary_control(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sysid_secondary_control_ = value;
}

// int32 compid_secondary_control = 6;
inline void ControlStatus::clear_compid_secondary_control() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compid_secondary_control_ = 0;
}
inline ::int32_t ControlStatus::compid_secondary_control() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.ControlStatus.compid_secondary_control)
  return _internal_compid_secondary_control();
}
inline void ControlStatus::set_compid_secondary_control(::int32_t value) {
  _internal_set_compid_secondary_control(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.ControlStatus.compid_secondary_control)
}
inline ::int32_t ControlStatus::_internal_compid_secondary_control() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.compid_secondary_control_;
}
inline void ControlStatus::_internal_set_compid_secondary_control(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.compid_secondary_control_ = value;
}

// -------------------------------------------------------------------

// GimbalResult

// .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
inline void GimbalResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::gimbal::GimbalResult_Result GimbalResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalResult.result)
  return _internal_result();
}
inline void GimbalResult::set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalResult.result)
}
inline ::mavsdk::rpc::gimbal::GimbalResult_Result GimbalResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::gimbal::GimbalResult_Result>(_impl_.result_);
}
inline void GimbalResult::_internal_set_result(::mavsdk::rpc::gimbal::GimbalResult_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string result_str = 2;
inline void GimbalResult::clear_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& GimbalResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.gimbal.GimbalResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GimbalResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.gimbal.GimbalResult.result_str)
}
inline std::string* GimbalResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.gimbal.GimbalResult.result_str)
  return _s;
}
inline const std::string& GimbalResult::_internal_result_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_str_.Get();
}
inline void GimbalResult::_internal_set_result_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* GimbalResult::_internal_mutable_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* GimbalResult::release_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.gimbal.GimbalResult.result_str)
  return _impl_.result_str_.Release();
}
inline void GimbalResult::set_allocated_result_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.gimbal.GimbalResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::gimbal::GimbalResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::gimbal::GimbalResult_Result>() {
  return ::mavsdk::rpc::gimbal::GimbalResult_Result_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::gimbal::GimbalMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::gimbal::GimbalMode>() {
  return ::mavsdk::rpc::gimbal::GimbalMode_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::gimbal::ControlMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::gimbal::ControlMode>() {
  return ::mavsdk::rpc::gimbal::ControlMode_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::gimbal::SendMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::gimbal::SendMode>() {
  return ::mavsdk::rpc::gimbal::SendMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // gimbal_2fgimbal_2eproto_2epb_2eh
