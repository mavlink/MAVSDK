// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gimbal/gimbal.proto
#ifndef GRPC_gimbal_2fgimbal_2eproto__INCLUDED
#define GRPC_gimbal_2fgimbal_2eproto__INCLUDED

#include "gimbal/gimbal.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace gimbal {

// Provide control over a gimbal.
class GimbalService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.gimbal.GimbalService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Set gimbal roll, pitch and yaw angles.
    //
    // This sets the desired roll, pitch and yaw angles of a gimbal.
    // Will return when the command is accepted, however, it might
    // take the gimbal longer to actually be set to the new angles.
    //
    // Note that the roll angle needs to be set to 0 when send_mode is Once.
    virtual ::grpc::Status SetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAnglesResponse>> AsyncSetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAnglesResponse>>(AsyncSetAnglesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAnglesResponse>> PrepareAsyncSetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAnglesResponse>>(PrepareAsyncSetAnglesRaw(context, request, cq));
    }
    //
    // Set gimbal angular rates.
    //
    // This sets the desired angular rates around roll, pitch and yaw axes of a gimbal.
    // Will return when the command is accepted, however, it might
    // take the gimbal longer to actually reach the angular rate.
    //
    // Note that the roll angle needs to be set to 0 when send_mode is Once.
    virtual ::grpc::Status SetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>> AsyncSetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>>(AsyncSetAngularRatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>> PrepareAsyncSetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>>(PrepareAsyncSetAngularRatesRaw(context, request, cq));
    }
    //
    // Set gimbal region of interest (ROI).
    //
    // This sets a region of interest that the gimbal will point to.
    // The gimbal will continue to point to the specified region until it
    // receives a new command.
    // The function will return when the command is accepted, however, it might
    // take the gimbal longer to actually rotate to the ROI.
    virtual ::grpc::Status SetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>> AsyncSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>>(AsyncSetRoiLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>> PrepareAsyncSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>>(PrepareAsyncSetRoiLocationRaw(context, request, cq));
    }
    //
    // Take control.
    //
    // There can be only two components in control of a gimbal at any given time.
    // One with "primary" control, and one with "secondary" control. The way the
    // secondary control is implemented is not specified and hence depends on the
    // vehicle.
    //
    // Components are expected to be cooperative, which means that they can
    // override each other and should therefore do it carefully.
    virtual ::grpc::Status TakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::mavsdk::rpc::gimbal::TakeControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::TakeControlResponse>> AsyncTakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::TakeControlResponse>>(AsyncTakeControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::TakeControlResponse>> PrepareAsyncTakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::TakeControlResponse>>(PrepareAsyncTakeControlRaw(context, request, cq));
    }
    //
    // Release control.
    //
    // Release control, such that other components can control the gimbal.
    virtual ::grpc::Status ReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::ReleaseControlResponse>> AsyncReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::ReleaseControlResponse>>(AsyncReleaseControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::ReleaseControlResponse>> PrepareAsyncReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::ReleaseControlResponse>>(PrepareAsyncReleaseControlRaw(context, request, cq));
    }
    //
    // Subscribe to list of gimbals.
    //
    // This allows to find out what gimbals are connected to the system.
    // Based on the gimbal ID, we can then address a specific gimbal.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>> SubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>>(SubscribeGimbalListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>> AsyncSubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>>(AsyncSubscribeGimbalListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>> PrepareAsyncSubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>>(PrepareAsyncSubscribeGimbalListRaw(context, request, cq));
    }
    //
    // Subscribe to control status updates.
    //
    // This allows a component to know if it has primary, secondary or
    // no control over the gimbal. Also, it gives the system and component ids
    // of the other components in control (if any).
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>> SubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>>(SubscribeControlStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>> AsyncSubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>>(AsyncSubscribeControlStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>> PrepareAsyncSubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>>(PrepareAsyncSubscribeControlStatusRaw(context, request, cq));
    }
    //
    // Get control status for specific gimbal.
    virtual ::grpc::Status GetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetControlStatusResponse>> AsyncGetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetControlStatusResponse>>(AsyncGetControlStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetControlStatusResponse>> PrepareAsyncGetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetControlStatusResponse>>(PrepareAsyncGetControlStatusRaw(context, request, cq));
    }
    //
    // Subscribe to attitude updates.
    //
    // This gets you the gimbal's attitude and angular rate.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>> SubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>>(SubscribeAttitudeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>> AsyncSubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>>(AsyncSubscribeAttitudeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>> PrepareAsyncSubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>>(PrepareAsyncSubscribeAttitudeRaw(context, request, cq));
    }
    //
    // Get attitude for specific gimbal.
    virtual ::grpc::Status GetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetAttitudeResponse>> AsyncGetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetAttitudeResponse>>(AsyncGetAttitudeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetAttitudeResponse>> PrepareAsyncGetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetAttitudeResponse>>(PrepareAsyncGetAttitudeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Set gimbal roll, pitch and yaw angles.
      //
      // This sets the desired roll, pitch and yaw angles of a gimbal.
      // Will return when the command is accepted, however, it might
      // take the gimbal longer to actually be set to the new angles.
      //
      // Note that the roll angle needs to be set to 0 when send_mode is Once.
      virtual void SetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Set gimbal angular rates.
      //
      // This sets the desired angular rates around roll, pitch and yaw axes of a gimbal.
      // Will return when the command is accepted, however, it might
      // take the gimbal longer to actually reach the angular rate.
      //
      // Note that the roll angle needs to be set to 0 when send_mode is Once.
      virtual void SetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Set gimbal region of interest (ROI).
      //
      // This sets a region of interest that the gimbal will point to.
      // The gimbal will continue to point to the specified region until it
      // receives a new command.
      // The function will return when the command is accepted, however, it might
      // take the gimbal longer to actually rotate to the ROI.
      virtual void SetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Take control.
      //
      // There can be only two components in control of a gimbal at any given time.
      // One with "primary" control, and one with "secondary" control. The way the
      // secondary control is implemented is not specified and hence depends on the
      // vehicle.
      //
      // Components are expected to be cooperative, which means that they can
      // override each other and should therefore do it carefully.
      virtual void TakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::mavsdk::rpc::gimbal::TakeControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::mavsdk::rpc::gimbal::TakeControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Release control.
      //
      // Release control, such that other components can control the gimbal.
      virtual void ReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Subscribe to list of gimbals.
      //
      // This allows to find out what gimbals are connected to the system.
      // Based on the gimbal ID, we can then address a specific gimbal.
      virtual void SubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal::GimbalListResponse>* reactor) = 0;
      //
      // Subscribe to control status updates.
      //
      // This allows a component to know if it has primary, secondary or
      // no control over the gimbal. Also, it gives the system and component ids
      // of the other components in control (if any).
      virtual void SubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal::ControlStatusResponse>* reactor) = 0;
      //
      // Get control status for specific gimbal.
      virtual void GetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Subscribe to attitude updates.
      //
      // This gets you the gimbal's attitude and angular rate.
      virtual void SubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal::AttitudeResponse>* reactor) = 0;
      //
      // Get attitude for specific gimbal.
      virtual void GetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAnglesResponse>* AsyncSetAnglesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAnglesResponse>* PrepareAsyncSetAnglesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* AsyncSetAngularRatesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* PrepareAsyncSetAngularRatesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* AsyncSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* PrepareAsyncSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::TakeControlResponse>* AsyncTakeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::TakeControlResponse>* PrepareAsyncTakeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::ReleaseControlResponse>* AsyncReleaseControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::ReleaseControlResponse>* PrepareAsyncReleaseControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>* SubscribeGimbalListRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>* AsyncSubscribeGimbalListRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::GimbalListResponse>* PrepareAsyncSubscribeGimbalListRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>* SubscribeControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>* AsyncSubscribeControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::ControlStatusResponse>* PrepareAsyncSubscribeControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetControlStatusResponse>* AsyncGetControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetControlStatusResponse>* PrepareAsyncGetControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>* SubscribeAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>* AsyncSubscribeAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::gimbal::AttitudeResponse>* PrepareAsyncSubscribeAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetAttitudeResponse>* AsyncGetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::gimbal::GetAttitudeResponse>* PrepareAsyncGetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAnglesResponse>> AsyncSetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAnglesResponse>>(AsyncSetAnglesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAnglesResponse>> PrepareAsyncSetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAnglesResponse>>(PrepareAsyncSetAnglesRaw(context, request, cq));
    }
    ::grpc::Status SetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>> AsyncSetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>>(AsyncSetAngularRatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>> PrepareAsyncSetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>>(PrepareAsyncSetAngularRatesRaw(context, request, cq));
    }
    ::grpc::Status SetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>> AsyncSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>>(AsyncSetRoiLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>> PrepareAsyncSetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>>(PrepareAsyncSetRoiLocationRaw(context, request, cq));
    }
    ::grpc::Status TakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::mavsdk::rpc::gimbal::TakeControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::TakeControlResponse>> AsyncTakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::TakeControlResponse>>(AsyncTakeControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::TakeControlResponse>> PrepareAsyncTakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::TakeControlResponse>>(PrepareAsyncTakeControlRaw(context, request, cq));
    }
    ::grpc::Status ReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::ReleaseControlResponse>> AsyncReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::ReleaseControlResponse>>(AsyncReleaseControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::ReleaseControlResponse>> PrepareAsyncReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::ReleaseControlResponse>>(PrepareAsyncReleaseControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal::GimbalListResponse>> SubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal::GimbalListResponse>>(SubscribeGimbalListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::GimbalListResponse>> AsyncSubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::GimbalListResponse>>(AsyncSubscribeGimbalListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::GimbalListResponse>> PrepareAsyncSubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::GimbalListResponse>>(PrepareAsyncSubscribeGimbalListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>> SubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>>(SubscribeControlStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>> AsyncSubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>>(AsyncSubscribeControlStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>> PrepareAsyncSubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>>(PrepareAsyncSubscribeControlStatusRaw(context, request, cq));
    }
    ::grpc::Status GetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetControlStatusResponse>> AsyncGetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetControlStatusResponse>>(AsyncGetControlStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetControlStatusResponse>> PrepareAsyncGetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetControlStatusResponse>>(PrepareAsyncGetControlStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal::AttitudeResponse>> SubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::gimbal::AttitudeResponse>>(SubscribeAttitudeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::AttitudeResponse>> AsyncSubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::AttitudeResponse>>(AsyncSubscribeAttitudeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::AttitudeResponse>> PrepareAsyncSubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::AttitudeResponse>>(PrepareAsyncSubscribeAttitudeRaw(context, request, cq));
    }
    ::grpc::Status GetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetAttitudeResponse>> AsyncGetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetAttitudeResponse>>(AsyncGetAttitudeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetAttitudeResponse>> PrepareAsyncGetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetAttitudeResponse>>(PrepareAsyncGetAttitudeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAngles(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAngularRates(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetRoiLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::mavsdk::rpc::gimbal::TakeControlResponse* response, std::function<void(::grpc::Status)>) override;
      void TakeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::mavsdk::rpc::gimbal::TakeControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response, std::function<void(::grpc::Status)>) override;
      void ReleaseControl(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeGimbalList(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal::GimbalListResponse>* reactor) override;
      void SubscribeControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal::ControlStatusResponse>* reactor) override;
      void GetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetControlStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::gimbal::AttitudeResponse>* reactor) override;
      void GetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAttitude(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAnglesResponse>* AsyncSetAnglesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAnglesResponse>* PrepareAsyncSetAnglesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* AsyncSetAngularRatesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* PrepareAsyncSetAngularRatesRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* AsyncSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* PrepareAsyncSetRoiLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::TakeControlResponse>* AsyncTakeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::TakeControlResponse>* PrepareAsyncTakeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::ReleaseControlResponse>* AsyncReleaseControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::ReleaseControlResponse>* PrepareAsyncReleaseControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal::GimbalListResponse>* SubscribeGimbalListRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::GimbalListResponse>* AsyncSubscribeGimbalListRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::GimbalListResponse>* PrepareAsyncSubscribeGimbalListRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>* SubscribeControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>* AsyncSubscribeControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::ControlStatusResponse>* PrepareAsyncSubscribeControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetControlStatusResponse>* AsyncGetControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetControlStatusResponse>* PrepareAsyncGetControlStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::gimbal::AttitudeResponse>* SubscribeAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::AttitudeResponse>* AsyncSubscribeAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::gimbal::AttitudeResponse>* PrepareAsyncSubscribeAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetAttitudeResponse>* AsyncGetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::gimbal::GetAttitudeResponse>* PrepareAsyncGetAttitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetAngles_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAngularRates_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRoiLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_TakeControl_;
    const ::grpc::internal::RpcMethod rpcmethod_ReleaseControl_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeGimbalList_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeControlStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetControlStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeAttitude_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAttitude_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Set gimbal roll, pitch and yaw angles.
    //
    // This sets the desired roll, pitch and yaw angles of a gimbal.
    // Will return when the command is accepted, however, it might
    // take the gimbal longer to actually be set to the new angles.
    //
    // Note that the roll angle needs to be set to 0 when send_mode is Once.
    virtual ::grpc::Status SetAngles(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response);
    //
    // Set gimbal angular rates.
    //
    // This sets the desired angular rates around roll, pitch and yaw axes of a gimbal.
    // Will return when the command is accepted, however, it might
    // take the gimbal longer to actually reach the angular rate.
    //
    // Note that the roll angle needs to be set to 0 when send_mode is Once.
    virtual ::grpc::Status SetAngularRates(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response);
    //
    // Set gimbal region of interest (ROI).
    //
    // This sets a region of interest that the gimbal will point to.
    // The gimbal will continue to point to the specified region until it
    // receives a new command.
    // The function will return when the command is accepted, however, it might
    // take the gimbal longer to actually rotate to the ROI.
    virtual ::grpc::Status SetRoiLocation(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response);
    //
    // Take control.
    //
    // There can be only two components in control of a gimbal at any given time.
    // One with "primary" control, and one with "secondary" control. The way the
    // secondary control is implemented is not specified and hence depends on the
    // vehicle.
    //
    // Components are expected to be cooperative, which means that they can
    // override each other and should therefore do it carefully.
    virtual ::grpc::Status TakeControl(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::mavsdk::rpc::gimbal::TakeControlResponse* response);
    //
    // Release control.
    //
    // Release control, such that other components can control the gimbal.
    virtual ::grpc::Status ReleaseControl(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response);
    //
    // Subscribe to list of gimbals.
    //
    // This allows to find out what gimbals are connected to the system.
    // Based on the gimbal ID, we can then address a specific gimbal.
    virtual ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* writer);
    //
    // Subscribe to control status updates.
    //
    // This allows a component to know if it has primary, secondary or
    // no control over the gimbal. Also, it gives the system and component ids
    // of the other components in control (if any).
    virtual ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* writer);
    //
    // Get control status for specific gimbal.
    virtual ::grpc::Status GetControlStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response);
    //
    // Subscribe to attitude updates.
    //
    // This gets you the gimbal's attitude and angular rate.
    virtual ::grpc::Status SubscribeAttitude(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* writer);
    //
    // Get attitude for specific gimbal.
    virtual ::grpc::Status GetAttitude(::grpc::ServerContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAngles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAngles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetAngles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngles(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAngles(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::SetAnglesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAngularRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAngularRates() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetAngularRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngularRates(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAngularRates(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRoiLocation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRoiLocation(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TakeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TakeControl() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TakeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakeControl(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::TakeControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReleaseControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReleaseControl() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReleaseControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseControl(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::ReleaseControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeGimbalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeGimbalList() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubscribeGimbalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeGimbalList(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeControlStatus() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubscribeControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeControlStatus(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetControlStatus() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetControlStatus(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::GetControlStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeAttitude() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubscribeAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeAttitude(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAttitude() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAttitude(::grpc::ServerContext* context, ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::gimbal::GetAttitudeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetAngles<WithAsyncMethod_SetAngularRates<WithAsyncMethod_SetRoiLocation<WithAsyncMethod_TakeControl<WithAsyncMethod_ReleaseControl<WithAsyncMethod_SubscribeGimbalList<WithAsyncMethod_SubscribeControlStatus<WithAsyncMethod_GetControlStatus<WithAsyncMethod_SubscribeAttitude<WithAsyncMethod_GetAttitude<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetAngles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAngles() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::SetAnglesRequest, ::mavsdk::rpc::gimbal::SetAnglesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::SetAnglesRequest* request, ::mavsdk::rpc::gimbal::SetAnglesResponse* response) { return this->SetAngles(context, request, response); }));}
    void SetMessageAllocatorFor_SetAngles(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::SetAnglesRequest, ::mavsdk::rpc::gimbal::SetAnglesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::SetAnglesRequest, ::mavsdk::rpc::gimbal::SetAnglesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAngles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngles(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAngles(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAngularRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAngularRates() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::SetAngularRatesRequest, ::mavsdk::rpc::gimbal::SetAngularRatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* request, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* response) { return this->SetAngularRates(context, request, response); }));}
    void SetMessageAllocatorFor_SetAngularRates(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::SetAngularRatesRequest, ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::SetAngularRatesRequest, ::mavsdk::rpc::gimbal::SetAngularRatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAngularRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngularRates(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAngularRates(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetRoiLocation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::SetRoiLocationRequest, ::mavsdk::rpc::gimbal::SetRoiLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* request, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* response) { return this->SetRoiLocation(context, request, response); }));}
    void SetMessageAllocatorFor_SetRoiLocation(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::SetRoiLocationRequest, ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::SetRoiLocationRequest, ::mavsdk::rpc::gimbal::SetRoiLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRoiLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TakeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TakeControl() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::TakeControlRequest, ::mavsdk::rpc::gimbal::TakeControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::TakeControlRequest* request, ::mavsdk::rpc::gimbal::TakeControlResponse* response) { return this->TakeControl(context, request, response); }));}
    void SetMessageAllocatorFor_TakeControl(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::TakeControlRequest, ::mavsdk::rpc::gimbal::TakeControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::TakeControlRequest, ::mavsdk::rpc::gimbal::TakeControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TakeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TakeControl(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReleaseControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReleaseControl() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::ReleaseControlRequest, ::mavsdk::rpc::gimbal::ReleaseControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* request, ::mavsdk::rpc::gimbal::ReleaseControlResponse* response) { return this->ReleaseControl(context, request, response); }));}
    void SetMessageAllocatorFor_ReleaseControl(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::ReleaseControlRequest, ::mavsdk::rpc::gimbal::ReleaseControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::ReleaseControlRequest, ::mavsdk::rpc::gimbal::ReleaseControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReleaseControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReleaseControl(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeGimbalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeGimbalList() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest, ::mavsdk::rpc::gimbal::GimbalListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* request) { return this->SubscribeGimbalList(context, request); }));
    }
    ~WithCallbackMethod_SubscribeGimbalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal::GimbalListResponse>* SubscribeGimbalList(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeControlStatus() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest, ::mavsdk::rpc::gimbal::ControlStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* request) { return this->SubscribeControlStatus(context, request); }));
    }
    ~WithCallbackMethod_SubscribeControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal::ControlStatusResponse>* SubscribeControlStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetControlStatus() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::GetControlStatusRequest, ::mavsdk::rpc::gimbal::GetControlStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* request, ::mavsdk::rpc::gimbal::GetControlStatusResponse* response) { return this->GetControlStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetControlStatus(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::GetControlStatusRequest, ::mavsdk::rpc::gimbal::GetControlStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::GetControlStatusRequest, ::mavsdk::rpc::gimbal::GetControlStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetControlStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeAttitude() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest, ::mavsdk::rpc::gimbal::AttitudeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* request) { return this->SubscribeAttitude(context, request); }));
    }
    ~WithCallbackMethod_SubscribeAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::gimbal::AttitudeResponse>* SubscribeAttitude(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAttitude() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::GetAttitudeRequest, ::mavsdk::rpc::gimbal::GetAttitudeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* request, ::mavsdk::rpc::gimbal::GetAttitudeResponse* response) { return this->GetAttitude(context, request, response); }));}
    void SetMessageAllocatorFor_GetAttitude(
        ::grpc::MessageAllocator< ::mavsdk::rpc::gimbal::GetAttitudeRequest, ::mavsdk::rpc::gimbal::GetAttitudeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::gimbal::GetAttitudeRequest, ::mavsdk::rpc::gimbal::GetAttitudeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAttitude(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetAngles<WithCallbackMethod_SetAngularRates<WithCallbackMethod_SetRoiLocation<WithCallbackMethod_TakeControl<WithCallbackMethod_ReleaseControl<WithCallbackMethod_SubscribeGimbalList<WithCallbackMethod_SubscribeControlStatus<WithCallbackMethod_GetControlStatus<WithCallbackMethod_SubscribeAttitude<WithCallbackMethod_GetAttitude<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetAngles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAngles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetAngles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngles(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAngularRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAngularRates() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetAngularRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngularRates(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRoiLocation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TakeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TakeControl() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TakeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReleaseControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReleaseControl() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReleaseControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeGimbalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeGimbalList() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubscribeGimbalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeControlStatus() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubscribeControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetControlStatus() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeAttitude() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubscribeAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAttitude() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAngles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAngles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetAngles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngles(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAngles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAngularRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAngularRates() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetAngularRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngularRates(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAngularRates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRoiLocation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRoiLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TakeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TakeControl() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TakeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakeControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReleaseControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReleaseControl() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReleaseControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReleaseControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeGimbalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeGimbalList() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubscribeGimbalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeGimbalList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeControlStatus() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubscribeControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeControlStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetControlStatus() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetControlStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeAttitude() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubscribeAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeAttitude(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAttitude() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAttitude(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAngles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAngles() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAngles(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAngles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngles(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAngles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAngularRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAngularRates() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAngularRates(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAngularRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAngularRates(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAngularRates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetRoiLocation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRoiLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRoiLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TakeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TakeControl() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TakeControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_TakeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TakeControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReleaseControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReleaseControl() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReleaseControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReleaseControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReleaseControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReleaseControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeGimbalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeGimbalList() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeGimbalList(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeGimbalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeGimbalList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeControlStatus() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeControlStatus(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeControlStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetControlStatus() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetControlStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetControlStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeAttitude() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeAttitude(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeAttitude(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAttitude() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAttitude(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAttitude(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAngles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAngles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::SetAnglesRequest, ::mavsdk::rpc::gimbal::SetAnglesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::SetAnglesRequest, ::mavsdk::rpc::gimbal::SetAnglesResponse>* streamer) {
                       return this->StreamedSetAngles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAngles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAngles(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAnglesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAnglesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAngles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::SetAnglesRequest,::mavsdk::rpc::gimbal::SetAnglesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAngularRates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAngularRates() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::SetAngularRatesRequest, ::mavsdk::rpc::gimbal::SetAngularRatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::SetAngularRatesRequest, ::mavsdk::rpc::gimbal::SetAngularRatesResponse>* streamer) {
                       return this->StreamedSetAngularRates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAngularRates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAngularRates(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetAngularRatesRequest* /*request*/, ::mavsdk::rpc::gimbal::SetAngularRatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAngularRates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::SetAngularRatesRequest,::mavsdk::rpc::gimbal::SetAngularRatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRoiLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRoiLocation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::SetRoiLocationRequest, ::mavsdk::rpc::gimbal::SetRoiLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::SetRoiLocationRequest, ::mavsdk::rpc::gimbal::SetRoiLocationResponse>* streamer) {
                       return this->StreamedSetRoiLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRoiLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRoiLocation(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SetRoiLocationRequest* /*request*/, ::mavsdk::rpc::gimbal::SetRoiLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRoiLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::SetRoiLocationRequest,::mavsdk::rpc::gimbal::SetRoiLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TakeControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TakeControl() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::TakeControlRequest, ::mavsdk::rpc::gimbal::TakeControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::TakeControlRequest, ::mavsdk::rpc::gimbal::TakeControlResponse>* streamer) {
                       return this->StreamedTakeControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TakeControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TakeControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::TakeControlRequest* /*request*/, ::mavsdk::rpc::gimbal::TakeControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTakeControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::TakeControlRequest,::mavsdk::rpc::gimbal::TakeControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReleaseControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReleaseControl() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::ReleaseControlRequest, ::mavsdk::rpc::gimbal::ReleaseControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::ReleaseControlRequest, ::mavsdk::rpc::gimbal::ReleaseControlResponse>* streamer) {
                       return this->StreamedReleaseControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReleaseControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReleaseControl(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::ReleaseControlRequest* /*request*/, ::mavsdk::rpc::gimbal::ReleaseControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReleaseControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::ReleaseControlRequest,::mavsdk::rpc::gimbal::ReleaseControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetControlStatus() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::GetControlStatusRequest, ::mavsdk::rpc::gimbal::GetControlStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::GetControlStatusRequest, ::mavsdk::rpc::gimbal::GetControlStatusResponse>* streamer) {
                       return this->StreamedGetControlStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetControlStatusRequest* /*request*/, ::mavsdk::rpc::gimbal::GetControlStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetControlStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::GetControlStatusRequest,::mavsdk::rpc::gimbal::GetControlStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAttitude() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::gimbal::GetAttitudeRequest, ::mavsdk::rpc::gimbal::GetAttitudeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::gimbal::GetAttitudeRequest, ::mavsdk::rpc::gimbal::GetAttitudeResponse>* streamer) {
                       return this->StreamedGetAttitude(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::GetAttitudeRequest* /*request*/, ::mavsdk::rpc::gimbal::GetAttitudeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAttitude(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::gimbal::GetAttitudeRequest,::mavsdk::rpc::gimbal::GetAttitudeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetAngles<WithStreamedUnaryMethod_SetAngularRates<WithStreamedUnaryMethod_SetRoiLocation<WithStreamedUnaryMethod_TakeControl<WithStreamedUnaryMethod_ReleaseControl<WithStreamedUnaryMethod_GetControlStatus<WithStreamedUnaryMethod_GetAttitude<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeGimbalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeGimbalList() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest, ::mavsdk::rpc::gimbal::GimbalListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest, ::mavsdk::rpc::gimbal::GimbalListResponse>* streamer) {
                       return this->StreamedSubscribeGimbalList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeGimbalList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeGimbalList(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::GimbalListResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeGimbalList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal::SubscribeGimbalListRequest,::mavsdk::rpc::gimbal::GimbalListResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeControlStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeControlStatus() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest, ::mavsdk::rpc::gimbal::ControlStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest, ::mavsdk::rpc::gimbal::ControlStatusResponse>* streamer) {
                       return this->StreamedSubscribeControlStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeControlStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeControlStatus(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::ControlStatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeControlStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal::SubscribeControlStatusRequest,::mavsdk::rpc::gimbal::ControlStatusResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeAttitude : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeAttitude() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest, ::mavsdk::rpc::gimbal::AttitudeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest, ::mavsdk::rpc::gimbal::AttitudeResponse>* streamer) {
                       return this->StreamedSubscribeAttitude(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeAttitude() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeAttitude(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::gimbal::AttitudeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeAttitude(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::gimbal::SubscribeAttitudeRequest,::mavsdk::rpc::gimbal::AttitudeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeGimbalList<WithSplitStreamingMethod_SubscribeControlStatus<WithSplitStreamingMethod_SubscribeAttitude<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetAngles<WithStreamedUnaryMethod_SetAngularRates<WithStreamedUnaryMethod_SetRoiLocation<WithStreamedUnaryMethod_TakeControl<WithStreamedUnaryMethod_ReleaseControl<WithSplitStreamingMethod_SubscribeGimbalList<WithSplitStreamingMethod_SubscribeControlStatus<WithStreamedUnaryMethod_GetControlStatus<WithSplitStreamingMethod_SubscribeAttitude<WithStreamedUnaryMethod_GetAttitude<Service > > > > > > > > > > StreamedService;
};

}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_gimbal_2fgimbal_2eproto__INCLUDED
