// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component_metadata/component_metadata.proto
#ifndef GRPC_component_5fmetadata_2fcomponent_5fmetadata_2eproto__INCLUDED
#define GRPC_component_5fmetadata_2fcomponent_5fmetadata_2eproto__INCLUDED

#include "component_metadata/component_metadata.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace component_metadata {

// Access component metadata json definitions, such as parameters.
class ComponentMetadataService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.component_metadata.ComponentMetadataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Request metadata from a specific component. This is used to start requesting metadata from a component.
    // The metadata can later be accessed via subscription (see below) or GetMetadata.
    virtual ::grpc::Status RequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestComponentResponse>> AsyncRequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestComponentResponse>>(AsyncRequestComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestComponentResponse>> PrepareAsyncRequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestComponentResponse>>(PrepareAsyncRequestComponentRaw(context, request, cq));
    }
    //
    // Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
    // The metadata can later be accessed via subscription (see below) or GetMetadata.
    virtual ::grpc::Status RequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>> AsyncRequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>>(AsyncRequestAutopilotComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>> PrepareAsyncRequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>>(PrepareAsyncRequestAutopilotComponentRaw(context, request, cq));
    }
    //
    // Register a callback that gets called when metadata is available
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>> SubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>>(SubscribeMetadataAvailableRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>> AsyncSubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>>(AsyncSubscribeMetadataAvailableRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>> PrepareAsyncSubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>>(PrepareAsyncSubscribeMetadataAvailableRaw(context, request, cq));
    }
    //
    // Access metadata. This can be used if you know the metadata is available already, otherwise use
    // the subscription to get notified when it becomes available.
    virtual ::grpc::Status GetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::GetMetadataResponse>> AsyncGetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::GetMetadataResponse>>(AsyncGetMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::GetMetadataResponse>> PrepareAsyncGetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::GetMetadataResponse>>(PrepareAsyncGetMetadataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Request metadata from a specific component. This is used to start requesting metadata from a component.
      // The metadata can later be accessed via subscription (see below) or GetMetadata.
      virtual void RequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
      // The metadata can later be accessed via subscription (see below) or GetMetadata.
      virtual void RequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Register a callback that gets called when metadata is available
      virtual void SubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* reactor) = 0;
      //
      // Access metadata. This can be used if you know the metadata is available already, otherwise use
      // the subscription to get notified when it becomes available.
      virtual void GetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestComponentResponse>* AsyncRequestComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestComponentResponse>* PrepareAsyncRequestComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* AsyncRequestAutopilotComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* PrepareAsyncRequestAutopilotComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* SubscribeMetadataAvailableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* AsyncSubscribeMetadataAvailableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* PrepareAsyncSubscribeMetadataAvailableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::GetMetadataResponse>* AsyncGetMetadataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::component_metadata::GetMetadataResponse>* PrepareAsyncGetMetadataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestComponentResponse>> AsyncRequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestComponentResponse>>(AsyncRequestComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestComponentResponse>> PrepareAsyncRequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestComponentResponse>>(PrepareAsyncRequestComponentRaw(context, request, cq));
    }
    ::grpc::Status RequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>> AsyncRequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>>(AsyncRequestAutopilotComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>> PrepareAsyncRequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>>(PrepareAsyncRequestAutopilotComponentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>> SubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>>(SubscribeMetadataAvailableRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>> AsyncSubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>>(AsyncSubscribeMetadataAvailableRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>> PrepareAsyncSubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>>(PrepareAsyncSubscribeMetadataAvailableRaw(context, request, cq));
    }
    ::grpc::Status GetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::GetMetadataResponse>> AsyncGetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::GetMetadataResponse>>(AsyncGetMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::GetMetadataResponse>> PrepareAsyncGetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::GetMetadataResponse>>(PrepareAsyncGetMetadataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestAutopilotComponent(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeMetadataAvailable(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* reactor) override;
      void GetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMetadata(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestComponentResponse>* AsyncRequestComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestComponentResponse>* PrepareAsyncRequestComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* AsyncRequestAutopilotComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* PrepareAsyncRequestAutopilotComponentRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* SubscribeMetadataAvailableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* AsyncSubscribeMetadataAvailableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* PrepareAsyncSubscribeMetadataAvailableRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::GetMetadataResponse>* AsyncGetMetadataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_metadata::GetMetadataResponse>* PrepareAsyncGetMetadataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestComponent_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestAutopilotComponent_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMetadataAvailable_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetadata_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Request metadata from a specific component. This is used to start requesting metadata from a component.
    // The metadata can later be accessed via subscription (see below) or GetMetadata.
    virtual ::grpc::Status RequestComponent(::grpc::ServerContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response);
    //
    // Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
    // The metadata can later be accessed via subscription (see below) or GetMetadata.
    virtual ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response);
    //
    // Register a callback that gets called when metadata is available
    virtual ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* writer);
    //
    // Access metadata. This can be used if you know the metadata is available already, otherwise use
    // the subscription to get notified when it becomes available.
    virtual ::grpc::Status GetMetadata(::grpc::ServerContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestComponent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestComponent(::grpc::ServerContext* context, ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::component_metadata::RequestComponentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestAutopilotComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestAutopilotComponent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestAutopilotComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestAutopilotComponent(::grpc::ServerContext* context, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMetadataAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeMetadataAvailable() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeMetadataAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMetadataAvailable(::grpc::ServerContext* context, ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMetadata() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetadata(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetadata(::grpc::ServerContext* context, ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::component_metadata::GetMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestComponent<WithAsyncMethod_RequestAutopilotComponent<WithAsyncMethod_SubscribeMetadataAvailable<WithAsyncMethod_GetMetadata<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestComponent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::component_metadata::RequestComponentRequest, ::mavsdk::rpc::component_metadata::RequestComponentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestComponentResponse* response) { return this->RequestComponent(context, request, response); }));}
    void SetMessageAllocatorFor_RequestComponent(
        ::grpc::MessageAllocator< ::mavsdk::rpc::component_metadata::RequestComponentRequest, ::mavsdk::rpc::component_metadata::RequestComponentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::component_metadata::RequestComponentRequest, ::mavsdk::rpc::component_metadata::RequestComponentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestAutopilotComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestAutopilotComponent() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* request, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* response) { return this->RequestAutopilotComponent(context, request, response); }));}
    void SetMessageAllocatorFor_RequestAutopilotComponent(
        ::grpc::MessageAllocator< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestAutopilotComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestAutopilotComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeMetadataAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeMetadataAvailable() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest, ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* request) { return this->SubscribeMetadataAvailable(context, request); }));
    }
    ~WithCallbackMethod_SubscribeMetadataAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* SubscribeMetadataAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMetadata() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::component_metadata::GetMetadataRequest, ::mavsdk::rpc::component_metadata::GetMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* request, ::mavsdk::rpc::component_metadata::GetMetadataResponse* response) { return this->GetMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_GetMetadata(
        ::grpc::MessageAllocator< ::mavsdk::rpc::component_metadata::GetMetadataRequest, ::mavsdk::rpc::component_metadata::GetMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::component_metadata::GetMetadataRequest, ::mavsdk::rpc::component_metadata::GetMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetadata(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestComponent<WithCallbackMethod_RequestAutopilotComponent<WithCallbackMethod_SubscribeMetadataAvailable<WithCallbackMethod_GetMetadata<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestComponent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestAutopilotComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestAutopilotComponent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestAutopilotComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMetadataAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeMetadataAvailable() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeMetadataAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMetadata() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetadata(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestComponent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestComponent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestAutopilotComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestAutopilotComponent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestAutopilotComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestAutopilotComponent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMetadataAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeMetadataAvailable() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeMetadataAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMetadataAvailable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMetadata() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetadata(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestComponent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestComponent(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestAutopilotComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestAutopilotComponent() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestAutopilotComponent(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestAutopilotComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestAutopilotComponent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeMetadataAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeMetadataAvailable() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeMetadataAvailable(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeMetadataAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeMetadataAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMetadata() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetadata(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestComponent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::component_metadata::RequestComponentRequest, ::mavsdk::rpc::component_metadata::RequestComponentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::component_metadata::RequestComponentRequest, ::mavsdk::rpc::component_metadata::RequestComponentResponse>* streamer) {
                       return this->StreamedRequestComponent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestComponent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::component_metadata::RequestComponentRequest,::mavsdk::rpc::component_metadata::RequestComponentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestAutopilotComponent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestAutopilotComponent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* streamer) {
                       return this->StreamedRequestAutopilotComponent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestAutopilotComponent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestAutopilotComponent(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest* /*request*/, ::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestAutopilotComponent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::component_metadata::RequestAutopilotComponentRequest,::mavsdk::rpc::component_metadata::RequestAutopilotComponentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMetadata() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::component_metadata::GetMetadataRequest, ::mavsdk::rpc::component_metadata::GetMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::component_metadata::GetMetadataRequest, ::mavsdk::rpc::component_metadata::GetMetadataResponse>* streamer) {
                       return this->StreamedGetMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetadata(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::GetMetadataRequest* /*request*/, ::mavsdk::rpc::component_metadata::GetMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::component_metadata::GetMetadataRequest,::mavsdk::rpc::component_metadata::GetMetadataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestComponent<WithStreamedUnaryMethod_RequestAutopilotComponent<WithStreamedUnaryMethod_GetMetadata<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMetadataAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeMetadataAvailable() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest, ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest, ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* streamer) {
                       return this->StreamedSubscribeMetadataAvailable(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeMetadataAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMetadataAvailable(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMetadataAvailable(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::component_metadata::SubscribeMetadataAvailableRequest,::mavsdk::rpc::component_metadata::MetadataAvailableResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeMetadataAvailable<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestComponent<WithStreamedUnaryMethod_RequestAutopilotComponent<WithSplitStreamingMethod_SubscribeMetadataAvailable<WithStreamedUnaryMethod_GetMetadata<Service > > > > StreamedService;
};

}  // namespace component_metadata
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_component_5fmetadata_2fcomponent_5fmetadata_2eproto__INCLUDED
