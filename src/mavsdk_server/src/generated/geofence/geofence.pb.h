// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: geofence/geofence.proto
// Protobuf C++ Version: 5.29.1

#ifndef geofence_2fgeofence_2eproto_2epb_2eh
#define geofence_2fgeofence_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_geofence_2fgeofence_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_geofence_2fgeofence_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_geofence_2fgeofence_2eproto;
namespace mavsdk {
namespace rpc {
namespace geofence {
class Circle;
struct CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class ClearGeofenceRequest;
struct ClearGeofenceRequestDefaultTypeInternal;
extern ClearGeofenceRequestDefaultTypeInternal _ClearGeofenceRequest_default_instance_;
class ClearGeofenceResponse;
struct ClearGeofenceResponseDefaultTypeInternal;
extern ClearGeofenceResponseDefaultTypeInternal _ClearGeofenceResponse_default_instance_;
class GeofenceData;
struct GeofenceDataDefaultTypeInternal;
extern GeofenceDataDefaultTypeInternal _GeofenceData_default_instance_;
class GeofenceResult;
struct GeofenceResultDefaultTypeInternal;
extern GeofenceResultDefaultTypeInternal _GeofenceResult_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class UploadGeofenceRequest;
struct UploadGeofenceRequestDefaultTypeInternal;
extern UploadGeofenceRequestDefaultTypeInternal _UploadGeofenceRequest_default_instance_;
class UploadGeofenceResponse;
struct UploadGeofenceResponseDefaultTypeInternal;
extern UploadGeofenceResponseDefaultTypeInternal _UploadGeofenceResponse_default_instance_;
}  // namespace geofence
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace geofence {
enum GeofenceResult_Result : int {
  GeofenceResult_Result_RESULT_UNKNOWN = 0,
  GeofenceResult_Result_RESULT_SUCCESS = 1,
  GeofenceResult_Result_RESULT_ERROR = 2,
  GeofenceResult_Result_RESULT_TOO_MANY_GEOFENCE_ITEMS = 3,
  GeofenceResult_Result_RESULT_BUSY = 4,
  GeofenceResult_Result_RESULT_TIMEOUT = 5,
  GeofenceResult_Result_RESULT_INVALID_ARGUMENT = 6,
  GeofenceResult_Result_RESULT_NO_SYSTEM = 7,
  GeofenceResult_Result_GeofenceResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GeofenceResult_Result_GeofenceResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GeofenceResult_Result_IsValid(int value);
extern const uint32_t GeofenceResult_Result_internal_data_[];
constexpr GeofenceResult_Result GeofenceResult_Result_Result_MIN = static_cast<GeofenceResult_Result>(0);
constexpr GeofenceResult_Result GeofenceResult_Result_Result_MAX = static_cast<GeofenceResult_Result>(7);
constexpr int GeofenceResult_Result_Result_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
GeofenceResult_Result_descriptor();
template <typename T>
const std::string& GeofenceResult_Result_Name(T value) {
  static_assert(std::is_same<T, GeofenceResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return GeofenceResult_Result_Name(static_cast<GeofenceResult_Result>(value));
}
template <>
inline const std::string& GeofenceResult_Result_Name(GeofenceResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GeofenceResult_Result_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool GeofenceResult_Result_Parse(absl::string_view name, GeofenceResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeofenceResult_Result>(
      GeofenceResult_Result_descriptor(), name, value);
}
enum FenceType : int {
  FENCE_TYPE_INCLUSION = 0,
  FENCE_TYPE_EXCLUSION = 1,
  FenceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FenceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FenceType_IsValid(int value);
extern const uint32_t FenceType_internal_data_[];
constexpr FenceType FenceType_MIN = static_cast<FenceType>(0);
constexpr FenceType FenceType_MAX = static_cast<FenceType>(1);
constexpr int FenceType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
FenceType_descriptor();
template <typename T>
const std::string& FenceType_Name(T value) {
  static_assert(std::is_same<T, FenceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FenceType_Name().");
  return FenceType_Name(static_cast<FenceType>(value));
}
template <>
inline const std::string& FenceType_Name(FenceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FenceType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool FenceType_Parse(absl::string_view name, FenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FenceType>(
      FenceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Point final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Point* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Point));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Point(
      ::google::protobuf::internal::ConstantInitialized);

  inline Point(const Point& from) : Point(nullptr, from) {}
  inline Point(Point&& from) noexcept
      : Point(nullptr, std::move(from)) {}
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
        &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Point& a, Point& b) { a.Swap(&b); }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Point& from) { Point::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Point* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.Point"; }

 protected:
  explicit Point(::google::protobuf::Arena* arena);
  Point(::google::protobuf::Arena* arena, const Point& from);
  Point(::google::protobuf::Arena* arena, Point&& from) noexcept
      : Point(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // double longitude_deg = 2;
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Point)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Point& from_msg);
    double latitude_deg_;
    double longitude_deg_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class GeofenceResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.GeofenceResult) */ {
 public:
  inline GeofenceResult() : GeofenceResult(nullptr) {}
  ~GeofenceResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GeofenceResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GeofenceResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GeofenceResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline GeofenceResult(const GeofenceResult& from) : GeofenceResult(nullptr, from) {}
  inline GeofenceResult(GeofenceResult&& from) noexcept
      : GeofenceResult(nullptr, std::move(from)) {}
  inline GeofenceResult& operator=(const GeofenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeofenceResult& operator=(GeofenceResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeofenceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeofenceResult* internal_default_instance() {
    return reinterpret_cast<const GeofenceResult*>(
        &_GeofenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GeofenceResult& a, GeofenceResult& b) { a.Swap(&b); }
  inline void Swap(GeofenceResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeofenceResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeofenceResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GeofenceResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GeofenceResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GeofenceResult& from) { GeofenceResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GeofenceResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.GeofenceResult"; }

 protected:
  explicit GeofenceResult(::google::protobuf::Arena* arena);
  GeofenceResult(::google::protobuf::Arena* arena, const GeofenceResult& from);
  GeofenceResult(::google::protobuf::Arena* arena, GeofenceResult&& from) noexcept
      : GeofenceResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = GeofenceResult_Result;
  static constexpr Result RESULT_UNKNOWN = GeofenceResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = GeofenceResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR = GeofenceResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_GEOFENCE_ITEMS = GeofenceResult_Result_RESULT_TOO_MANY_GEOFENCE_ITEMS;
  static constexpr Result RESULT_BUSY = GeofenceResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT = GeofenceResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT = GeofenceResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_NO_SYSTEM = GeofenceResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return GeofenceResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = GeofenceResult_Result_Result_MIN;
  static constexpr Result Result_MAX = GeofenceResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = GeofenceResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return GeofenceResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return GeofenceResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return GeofenceResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::geofence::GeofenceResult_Result result() const;
  void set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value);

  private:
  ::mavsdk::rpc::geofence::GeofenceResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.GeofenceResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GeofenceResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class ClearGeofenceRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.ClearGeofenceRequest) */ {
 public:
  inline ClearGeofenceRequest() : ClearGeofenceRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClearGeofenceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClearGeofenceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClearGeofenceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClearGeofenceRequest(const ClearGeofenceRequest& from) : ClearGeofenceRequest(nullptr, from) {}
  inline ClearGeofenceRequest(ClearGeofenceRequest&& from) noexcept
      : ClearGeofenceRequest(nullptr, std::move(from)) {}
  inline ClearGeofenceRequest& operator=(const ClearGeofenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearGeofenceRequest& operator=(ClearGeofenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearGeofenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearGeofenceRequest* internal_default_instance() {
    return reinterpret_cast<const ClearGeofenceRequest*>(
        &_ClearGeofenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ClearGeofenceRequest& a, ClearGeofenceRequest& b) { a.Swap(&b); }
  inline void Swap(ClearGeofenceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearGeofenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearGeofenceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ClearGeofenceRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearGeofenceRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearGeofenceRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.ClearGeofenceRequest"; }

 protected:
  explicit ClearGeofenceRequest(::google::protobuf::Arena* arena);
  ClearGeofenceRequest(::google::protobuf::Arena* arena, const ClearGeofenceRequest& from);
  ClearGeofenceRequest(::google::protobuf::Arena* arena, ClearGeofenceRequest&& from) noexcept
      : ClearGeofenceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.ClearGeofenceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClearGeofenceRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class UploadGeofenceResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.UploadGeofenceResponse) */ {
 public:
  inline UploadGeofenceResponse() : UploadGeofenceResponse(nullptr) {}
  ~UploadGeofenceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadGeofenceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadGeofenceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadGeofenceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadGeofenceResponse(const UploadGeofenceResponse& from) : UploadGeofenceResponse(nullptr, from) {}
  inline UploadGeofenceResponse(UploadGeofenceResponse&& from) noexcept
      : UploadGeofenceResponse(nullptr, std::move(from)) {}
  inline UploadGeofenceResponse& operator=(const UploadGeofenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGeofenceResponse& operator=(UploadGeofenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGeofenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGeofenceResponse* internal_default_instance() {
    return reinterpret_cast<const UploadGeofenceResponse*>(
        &_UploadGeofenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UploadGeofenceResponse& a, UploadGeofenceResponse& b) { a.Swap(&b); }
  inline void Swap(UploadGeofenceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGeofenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadGeofenceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadGeofenceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadGeofenceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadGeofenceResponse& from) { UploadGeofenceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadGeofenceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.UploadGeofenceResponse"; }

 protected:
  explicit UploadGeofenceResponse(::google::protobuf::Arena* arena);
  UploadGeofenceResponse(::google::protobuf::Arena* arena, const UploadGeofenceResponse& from);
  UploadGeofenceResponse(::google::protobuf::Arena* arena, UploadGeofenceResponse&& from) noexcept
      : UploadGeofenceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGeofenceResultFieldNumber = 1,
  };
  // .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
  bool has_geofence_result() const;
  void clear_geofence_result() ;
  const ::mavsdk::rpc::geofence::GeofenceResult& geofence_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::geofence::GeofenceResult* release_geofence_result();
  ::mavsdk::rpc::geofence::GeofenceResult* mutable_geofence_result();
  void set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value);
  void unsafe_arena_set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value);
  ::mavsdk::rpc::geofence::GeofenceResult* unsafe_arena_release_geofence_result();

  private:
  const ::mavsdk::rpc::geofence::GeofenceResult& _internal_geofence_result() const;
  ::mavsdk::rpc::geofence::GeofenceResult* _internal_mutable_geofence_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.UploadGeofenceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadGeofenceResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::geofence::GeofenceResult* geofence_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class Polygon final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Polygon* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Polygon));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Polygon(
      ::google::protobuf::internal::ConstantInitialized);

  inline Polygon(const Polygon& from) : Polygon(nullptr, from) {}
  inline Polygon(Polygon&& from) noexcept
      : Polygon(nullptr, std::move(from)) {}
  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
        &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Polygon& a, Polygon& b) { a.Swap(&b); }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Polygon>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Polygon& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Polygon& from) { Polygon::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Polygon* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.Polygon"; }

 protected:
  explicit Polygon(::google::protobuf::Arena* arena);
  Polygon(::google::protobuf::Arena* arena, const Polygon& from);
  Polygon(::google::protobuf::Arena* arena, Polygon&& from) noexcept
      : Polygon(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPointsFieldNumber = 1,
    kFenceTypeFieldNumber = 2,
  };
  // repeated .mavsdk.rpc.geofence.Point points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::mavsdk::rpc::geofence::Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>* _internal_mutable_points();
  public:
  const ::mavsdk::rpc::geofence::Point& points(int index) const;
  ::mavsdk::rpc::geofence::Point* add_points();
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>& points() const;
  // .mavsdk.rpc.geofence.FenceType fence_type = 2;
  void clear_fence_type() ;
  ::mavsdk::rpc::geofence::FenceType fence_type() const;
  void set_fence_type(::mavsdk::rpc::geofence::FenceType value);

  private:
  ::mavsdk::rpc::geofence::FenceType _internal_fence_type() const;
  void _internal_set_fence_type(::mavsdk::rpc::geofence::FenceType value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Polygon)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Polygon& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mavsdk::rpc::geofence::Point > points_;
    int fence_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class ClearGeofenceResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.ClearGeofenceResponse) */ {
 public:
  inline ClearGeofenceResponse() : ClearGeofenceResponse(nullptr) {}
  ~ClearGeofenceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClearGeofenceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClearGeofenceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClearGeofenceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClearGeofenceResponse(const ClearGeofenceResponse& from) : ClearGeofenceResponse(nullptr, from) {}
  inline ClearGeofenceResponse(ClearGeofenceResponse&& from) noexcept
      : ClearGeofenceResponse(nullptr, std::move(from)) {}
  inline ClearGeofenceResponse& operator=(const ClearGeofenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearGeofenceResponse& operator=(ClearGeofenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearGeofenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearGeofenceResponse* internal_default_instance() {
    return reinterpret_cast<const ClearGeofenceResponse*>(
        &_ClearGeofenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ClearGeofenceResponse& a, ClearGeofenceResponse& b) { a.Swap(&b); }
  inline void Swap(ClearGeofenceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearGeofenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearGeofenceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClearGeofenceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClearGeofenceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClearGeofenceResponse& from) { ClearGeofenceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClearGeofenceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.ClearGeofenceResponse"; }

 protected:
  explicit ClearGeofenceResponse(::google::protobuf::Arena* arena);
  ClearGeofenceResponse(::google::protobuf::Arena* arena, const ClearGeofenceResponse& from);
  ClearGeofenceResponse(::google::protobuf::Arena* arena, ClearGeofenceResponse&& from) noexcept
      : ClearGeofenceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGeofenceResultFieldNumber = 1,
  };
  // .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
  bool has_geofence_result() const;
  void clear_geofence_result() ;
  const ::mavsdk::rpc::geofence::GeofenceResult& geofence_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::geofence::GeofenceResult* release_geofence_result();
  ::mavsdk::rpc::geofence::GeofenceResult* mutable_geofence_result();
  void set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value);
  void unsafe_arena_set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value);
  ::mavsdk::rpc::geofence::GeofenceResult* unsafe_arena_release_geofence_result();

  private:
  const ::mavsdk::rpc::geofence::GeofenceResult& _internal_geofence_result() const;
  ::mavsdk::rpc::geofence::GeofenceResult* _internal_mutable_geofence_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.ClearGeofenceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClearGeofenceResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::geofence::GeofenceResult* geofence_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class Circle final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.Circle) */ {
 public:
  inline Circle() : Circle(nullptr) {}
  ~Circle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Circle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Circle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Circle(
      ::google::protobuf::internal::ConstantInitialized);

  inline Circle(const Circle& from) : Circle(nullptr, from) {}
  inline Circle(Circle&& from) noexcept
      : Circle(nullptr, std::move(from)) {}
  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Circle& operator=(Circle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Circle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
        &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Circle& a, Circle& b) { a.Swap(&b); }
  inline void Swap(Circle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Circle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Circle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Circle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Circle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Circle& from) { Circle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Circle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.Circle"; }

 protected:
  explicit Circle(::google::protobuf::Arena* arena);
  Circle(::google::protobuf::Arena* arena, const Circle& from);
  Circle(::google::protobuf::Arena* arena, Circle&& from) noexcept
      : Circle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPointFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kFenceTypeFieldNumber = 3,
  };
  // .mavsdk.rpc.geofence.Point point = 1;
  bool has_point() const;
  void clear_point() ;
  const ::mavsdk::rpc::geofence::Point& point() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::geofence::Point* release_point();
  ::mavsdk::rpc::geofence::Point* mutable_point();
  void set_allocated_point(::mavsdk::rpc::geofence::Point* value);
  void unsafe_arena_set_allocated_point(::mavsdk::rpc::geofence::Point* value);
  ::mavsdk::rpc::geofence::Point* unsafe_arena_release_point();

  private:
  const ::mavsdk::rpc::geofence::Point& _internal_point() const;
  ::mavsdk::rpc::geofence::Point* _internal_mutable_point();

  public:
  // float radius = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_radius() ;
  float radius() const;
  void set_radius(float value);

  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);

  public:
  // .mavsdk.rpc.geofence.FenceType fence_type = 3;
  void clear_fence_type() ;
  ::mavsdk::rpc::geofence::FenceType fence_type() const;
  void set_fence_type(::mavsdk::rpc::geofence::FenceType value);

  private:
  ::mavsdk::rpc::geofence::FenceType _internal_fence_type() const;
  void _internal_set_fence_type(::mavsdk::rpc::geofence::FenceType value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.Circle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Circle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::geofence::Point* point_;
    float radius_;
    int fence_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class GeofenceData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.GeofenceData) */ {
 public:
  inline GeofenceData() : GeofenceData(nullptr) {}
  ~GeofenceData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GeofenceData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GeofenceData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GeofenceData(
      ::google::protobuf::internal::ConstantInitialized);

  inline GeofenceData(const GeofenceData& from) : GeofenceData(nullptr, from) {}
  inline GeofenceData(GeofenceData&& from) noexcept
      : GeofenceData(nullptr, std::move(from)) {}
  inline GeofenceData& operator=(const GeofenceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeofenceData& operator=(GeofenceData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeofenceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeofenceData* internal_default_instance() {
    return reinterpret_cast<const GeofenceData*>(
        &_GeofenceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GeofenceData& a, GeofenceData& b) { a.Swap(&b); }
  inline void Swap(GeofenceData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeofenceData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeofenceData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GeofenceData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GeofenceData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GeofenceData& from) { GeofenceData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GeofenceData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.GeofenceData"; }

 protected:
  explicit GeofenceData(::google::protobuf::Arena* arena);
  GeofenceData(::google::protobuf::Arena* arena, const GeofenceData& from);
  GeofenceData(::google::protobuf::Arena* arena, GeofenceData&& from) noexcept
      : GeofenceData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPolygonsFieldNumber = 1,
    kCirclesFieldNumber = 2,
  };
  // repeated .mavsdk.rpc.geofence.Polygon polygons = 1;
  int polygons_size() const;
  private:
  int _internal_polygons_size() const;

  public:
  void clear_polygons() ;
  ::mavsdk::rpc::geofence::Polygon* mutable_polygons(int index);
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>* mutable_polygons();

  private:
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>& _internal_polygons() const;
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>* _internal_mutable_polygons();
  public:
  const ::mavsdk::rpc::geofence::Polygon& polygons(int index) const;
  ::mavsdk::rpc::geofence::Polygon* add_polygons();
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>& polygons() const;
  // repeated .mavsdk.rpc.geofence.Circle circles = 2;
  int circles_size() const;
  private:
  int _internal_circles_size() const;

  public:
  void clear_circles() ;
  ::mavsdk::rpc::geofence::Circle* mutable_circles(int index);
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>* mutable_circles();

  private:
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>& _internal_circles() const;
  ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>* _internal_mutable_circles();
  public:
  const ::mavsdk::rpc::geofence::Circle& circles(int index) const;
  ::mavsdk::rpc::geofence::Circle* add_circles();
  const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>& circles() const;
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.GeofenceData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GeofenceData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mavsdk::rpc::geofence::Polygon > polygons_;
    ::google::protobuf::RepeatedPtrField< ::mavsdk::rpc::geofence::Circle > circles_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};
// -------------------------------------------------------------------

class UploadGeofenceRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.geofence.UploadGeofenceRequest) */ {
 public:
  inline UploadGeofenceRequest() : UploadGeofenceRequest(nullptr) {}
  ~UploadGeofenceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UploadGeofenceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UploadGeofenceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UploadGeofenceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UploadGeofenceRequest(const UploadGeofenceRequest& from) : UploadGeofenceRequest(nullptr, from) {}
  inline UploadGeofenceRequest(UploadGeofenceRequest&& from) noexcept
      : UploadGeofenceRequest(nullptr, std::move(from)) {}
  inline UploadGeofenceRequest& operator=(const UploadGeofenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGeofenceRequest& operator=(UploadGeofenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadGeofenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadGeofenceRequest* internal_default_instance() {
    return reinterpret_cast<const UploadGeofenceRequest*>(
        &_UploadGeofenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(UploadGeofenceRequest& a, UploadGeofenceRequest& b) { a.Swap(&b); }
  inline void Swap(UploadGeofenceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGeofenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadGeofenceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UploadGeofenceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadGeofenceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UploadGeofenceRequest& from) { UploadGeofenceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UploadGeofenceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.geofence.UploadGeofenceRequest"; }

 protected:
  explicit UploadGeofenceRequest(::google::protobuf::Arena* arena);
  UploadGeofenceRequest(::google::protobuf::Arena* arena, const UploadGeofenceRequest& from);
  UploadGeofenceRequest(::google::protobuf::Arena* arena, UploadGeofenceRequest&& from) noexcept
      : UploadGeofenceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGeofenceDataFieldNumber = 1,
  };
  // .mavsdk.rpc.geofence.GeofenceData geofence_data = 1;
  bool has_geofence_data() const;
  void clear_geofence_data() ;
  const ::mavsdk::rpc::geofence::GeofenceData& geofence_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::geofence::GeofenceData* release_geofence_data();
  ::mavsdk::rpc::geofence::GeofenceData* mutable_geofence_data();
  void set_allocated_geofence_data(::mavsdk::rpc::geofence::GeofenceData* value);
  void unsafe_arena_set_allocated_geofence_data(::mavsdk::rpc::geofence::GeofenceData* value);
  ::mavsdk::rpc::geofence::GeofenceData* unsafe_arena_release_geofence_data();

  private:
  const ::mavsdk::rpc::geofence::GeofenceData& _internal_geofence_data() const;
  ::mavsdk::rpc::geofence::GeofenceData* _internal_mutable_geofence_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.geofence.UploadGeofenceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UploadGeofenceRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::geofence::GeofenceData* geofence_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geofence_2fgeofence_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Point

// double latitude_deg = 1;
inline void Point::clear_latitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = 0;
}
inline double Point::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Point.latitude_deg)
  return _internal_latitude_deg();
}
inline void Point::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Point.latitude_deg)
}
inline double Point::_internal_latitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_deg_;
}
inline void Point::_internal_set_latitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 2;
inline void Point::clear_longitude_deg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = 0;
}
inline double Point::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Point.longitude_deg)
  return _internal_longitude_deg();
}
inline void Point::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Point.longitude_deg)
}
inline double Point::_internal_longitude_deg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_deg_;
}
inline void Point::_internal_set_longitude_deg(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_deg_ = value;
}

// -------------------------------------------------------------------

// Polygon

// repeated .mavsdk.rpc.geofence.Point points = 1;
inline int Polygon::_internal_points_size() const {
  return _internal_points().size();
}
inline int Polygon::points_size() const {
  return _internal_points_size();
}
inline void Polygon::clear_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.points_.Clear();
}
inline ::mavsdk::rpc::geofence::Point* Polygon::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.Polygon.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>* Polygon::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.Polygon.points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_points();
}
inline const ::mavsdk::rpc::geofence::Point& Polygon::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Polygon.points)
  return _internal_points().Get(index);
}
inline ::mavsdk::rpc::geofence::Point* Polygon::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mavsdk::rpc::geofence::Point* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.Polygon.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>& Polygon::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.Polygon.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>&
Polygon::_internal_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Point>*
Polygon::_internal_mutable_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.points_;
}

// .mavsdk.rpc.geofence.FenceType fence_type = 2;
inline void Polygon::clear_fence_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fence_type_ = 0;
}
inline ::mavsdk::rpc::geofence::FenceType Polygon::fence_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Polygon.fence_type)
  return _internal_fence_type();
}
inline void Polygon::set_fence_type(::mavsdk::rpc::geofence::FenceType value) {
  _internal_set_fence_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Polygon.fence_type)
}
inline ::mavsdk::rpc::geofence::FenceType Polygon::_internal_fence_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::geofence::FenceType>(_impl_.fence_type_);
}
inline void Polygon::_internal_set_fence_type(::mavsdk::rpc::geofence::FenceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fence_type_ = value;
}

// -------------------------------------------------------------------

// Circle

// .mavsdk.rpc.geofence.Point point = 1;
inline bool Circle::has_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.point_ != nullptr);
  return value;
}
inline void Circle::clear_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.point_ != nullptr) _impl_.point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::geofence::Point& Circle::_internal_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::geofence::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::geofence::Point&>(::mavsdk::rpc::geofence::_Point_default_instance_);
}
inline const ::mavsdk::rpc::geofence::Point& Circle::point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Circle.point)
  return _internal_point();
}
inline void Circle::unsafe_arena_set_allocated_point(::mavsdk::rpc::geofence::Point* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = reinterpret_cast<::mavsdk::rpc::geofence::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.geofence.Circle.point)
}
inline ::mavsdk::rpc::geofence::Point* Circle::release_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::Point* released = _impl_.point_;
  _impl_.point_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::geofence::Point* Circle::unsafe_arena_release_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.Circle.point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::Point* Circle::_internal_mutable_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.point_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::geofence::Point>(GetArena());
    _impl_.point_ = reinterpret_cast<::mavsdk::rpc::geofence::Point*>(p);
  }
  return _impl_.point_;
}
inline ::mavsdk::rpc::geofence::Point* Circle::mutable_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::geofence::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.Circle.point)
  return _msg;
}
inline void Circle::set_allocated_point(::mavsdk::rpc::geofence::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.point_ = reinterpret_cast<::mavsdk::rpc::geofence::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.Circle.point)
}

// float radius = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void Circle::clear_radius() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radius_ = 0;
}
inline float Circle::radius() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Circle.radius)
  return _internal_radius();
}
inline void Circle::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Circle.radius)
}
inline float Circle::_internal_radius() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.radius_;
}
inline void Circle::_internal_set_radius(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radius_ = value;
}

// .mavsdk.rpc.geofence.FenceType fence_type = 3;
inline void Circle::clear_fence_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fence_type_ = 0;
}
inline ::mavsdk::rpc::geofence::FenceType Circle::fence_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.Circle.fence_type)
  return _internal_fence_type();
}
inline void Circle::set_fence_type(::mavsdk::rpc::geofence::FenceType value) {
  _internal_set_fence_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.Circle.fence_type)
}
inline ::mavsdk::rpc::geofence::FenceType Circle::_internal_fence_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::geofence::FenceType>(_impl_.fence_type_);
}
inline void Circle::_internal_set_fence_type(::mavsdk::rpc::geofence::FenceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fence_type_ = value;
}

// -------------------------------------------------------------------

// GeofenceData

// repeated .mavsdk.rpc.geofence.Polygon polygons = 1;
inline int GeofenceData::_internal_polygons_size() const {
  return _internal_polygons().size();
}
inline int GeofenceData::polygons_size() const {
  return _internal_polygons_size();
}
inline void GeofenceData::clear_polygons() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polygons_.Clear();
}
inline ::mavsdk::rpc::geofence::Polygon* GeofenceData::mutable_polygons(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.GeofenceData.polygons)
  return _internal_mutable_polygons()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>* GeofenceData::mutable_polygons()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.GeofenceData.polygons)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_polygons();
}
inline const ::mavsdk::rpc::geofence::Polygon& GeofenceData::polygons(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceData.polygons)
  return _internal_polygons().Get(index);
}
inline ::mavsdk::rpc::geofence::Polygon* GeofenceData::add_polygons() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mavsdk::rpc::geofence::Polygon* _add = _internal_mutable_polygons()->Add();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.GeofenceData.polygons)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>& GeofenceData::polygons() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.GeofenceData.polygons)
  return _internal_polygons();
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>&
GeofenceData::_internal_polygons() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.polygons_;
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Polygon>*
GeofenceData::_internal_mutable_polygons() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.polygons_;
}

// repeated .mavsdk.rpc.geofence.Circle circles = 2;
inline int GeofenceData::_internal_circles_size() const {
  return _internal_circles().size();
}
inline int GeofenceData::circles_size() const {
  return _internal_circles_size();
}
inline void GeofenceData::clear_circles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.circles_.Clear();
}
inline ::mavsdk::rpc::geofence::Circle* GeofenceData::mutable_circles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.GeofenceData.circles)
  return _internal_mutable_circles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>* GeofenceData::mutable_circles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.geofence.GeofenceData.circles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_circles();
}
inline const ::mavsdk::rpc::geofence::Circle& GeofenceData::circles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceData.circles)
  return _internal_circles().Get(index);
}
inline ::mavsdk::rpc::geofence::Circle* GeofenceData::add_circles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mavsdk::rpc::geofence::Circle* _add = _internal_mutable_circles()->Add();
  // @@protoc_insertion_point(field_add:mavsdk.rpc.geofence.GeofenceData.circles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>& GeofenceData::circles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.geofence.GeofenceData.circles)
  return _internal_circles();
}
inline const ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>&
GeofenceData::_internal_circles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.circles_;
}
inline ::google::protobuf::RepeatedPtrField<::mavsdk::rpc::geofence::Circle>*
GeofenceData::_internal_mutable_circles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.circles_;
}

// -------------------------------------------------------------------

// UploadGeofenceRequest

// .mavsdk.rpc.geofence.GeofenceData geofence_data = 1;
inline bool UploadGeofenceRequest::has_geofence_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geofence_data_ != nullptr);
  return value;
}
inline void UploadGeofenceRequest::clear_geofence_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.geofence_data_ != nullptr) _impl_.geofence_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::geofence::GeofenceData& UploadGeofenceRequest::_internal_geofence_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::geofence::GeofenceData* p = _impl_.geofence_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::geofence::GeofenceData&>(::mavsdk::rpc::geofence::_GeofenceData_default_instance_);
}
inline const ::mavsdk::rpc::geofence::GeofenceData& UploadGeofenceRequest::geofence_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.UploadGeofenceRequest.geofence_data)
  return _internal_geofence_data();
}
inline void UploadGeofenceRequest::unsafe_arena_set_allocated_geofence_data(::mavsdk::rpc::geofence::GeofenceData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.geofence_data_);
  }
  _impl_.geofence_data_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.geofence.UploadGeofenceRequest.geofence_data)
}
inline ::mavsdk::rpc::geofence::GeofenceData* UploadGeofenceRequest::release_geofence_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceData* released = _impl_.geofence_data_;
  _impl_.geofence_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::geofence::GeofenceData* UploadGeofenceRequest::unsafe_arena_release_geofence_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.UploadGeofenceRequest.geofence_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceData* temp = _impl_.geofence_data_;
  _impl_.geofence_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceData* UploadGeofenceRequest::_internal_mutable_geofence_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.geofence_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::geofence::GeofenceData>(GetArena());
    _impl_.geofence_data_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceData*>(p);
  }
  return _impl_.geofence_data_;
}
inline ::mavsdk::rpc::geofence::GeofenceData* UploadGeofenceRequest::mutable_geofence_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceData* _msg = _internal_mutable_geofence_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.UploadGeofenceRequest.geofence_data)
  return _msg;
}
inline void UploadGeofenceRequest::set_allocated_geofence_data(::mavsdk::rpc::geofence::GeofenceData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.geofence_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.geofence_data_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.UploadGeofenceRequest.geofence_data)
}

// -------------------------------------------------------------------

// UploadGeofenceResponse

// .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
inline bool UploadGeofenceResponse::has_geofence_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geofence_result_ != nullptr);
  return value;
}
inline void UploadGeofenceResponse::clear_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.geofence_result_ != nullptr) _impl_.geofence_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& UploadGeofenceResponse::_internal_geofence_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::geofence::GeofenceResult* p = _impl_.geofence_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::geofence::GeofenceResult&>(::mavsdk::rpc::geofence::_GeofenceResult_default_instance_);
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& UploadGeofenceResponse::geofence_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  return _internal_geofence_result();
}
inline void UploadGeofenceResponse::unsafe_arena_set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.geofence_result_);
  }
  _impl_.geofence_result_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::release_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceResult* released = _impl_.geofence_result_;
  _impl_.geofence_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::unsafe_arena_release_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceResult* temp = _impl_.geofence_result_;
  _impl_.geofence_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::_internal_mutable_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.geofence_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::geofence::GeofenceResult>(GetArena());
    _impl_.geofence_result_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceResult*>(p);
  }
  return _impl_.geofence_result_;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* UploadGeofenceResponse::mutable_geofence_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceResult* _msg = _internal_mutable_geofence_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
  return _msg;
}
inline void UploadGeofenceResponse::set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.geofence_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.geofence_result_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.UploadGeofenceResponse.geofence_result)
}

// -------------------------------------------------------------------

// ClearGeofenceRequest

// -------------------------------------------------------------------

// ClearGeofenceResponse

// .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;
inline bool ClearGeofenceResponse::has_geofence_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geofence_result_ != nullptr);
  return value;
}
inline void ClearGeofenceResponse::clear_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.geofence_result_ != nullptr) _impl_.geofence_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& ClearGeofenceResponse::_internal_geofence_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::geofence::GeofenceResult* p = _impl_.geofence_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::geofence::GeofenceResult&>(::mavsdk::rpc::geofence::_GeofenceResult_default_instance_);
}
inline const ::mavsdk::rpc::geofence::GeofenceResult& ClearGeofenceResponse::geofence_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
  return _internal_geofence_result();
}
inline void ClearGeofenceResponse::unsafe_arena_set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.geofence_result_);
  }
  _impl_.geofence_result_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::release_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceResult* released = _impl_.geofence_result_;
  _impl_.geofence_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::unsafe_arena_release_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceResult* temp = _impl_.geofence_result_;
  _impl_.geofence_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::_internal_mutable_geofence_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.geofence_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::geofence::GeofenceResult>(GetArena());
    _impl_.geofence_result_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceResult*>(p);
  }
  return _impl_.geofence_result_;
}
inline ::mavsdk::rpc::geofence::GeofenceResult* ClearGeofenceResponse::mutable_geofence_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::geofence::GeofenceResult* _msg = _internal_mutable_geofence_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
  return _msg;
}
inline void ClearGeofenceResponse::set_allocated_geofence_result(::mavsdk::rpc::geofence::GeofenceResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.geofence_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.geofence_result_ = reinterpret_cast<::mavsdk::rpc::geofence::GeofenceResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.ClearGeofenceResponse.geofence_result)
}

// -------------------------------------------------------------------

// GeofenceResult

// .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;
inline void GeofenceResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::geofence::GeofenceResult_Result GeofenceResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceResult.result)
  return _internal_result();
}
inline void GeofenceResult::set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.GeofenceResult.result)
}
inline ::mavsdk::rpc::geofence::GeofenceResult_Result GeofenceResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::geofence::GeofenceResult_Result>(_impl_.result_);
}
inline void GeofenceResult::_internal_set_result(::mavsdk::rpc::geofence::GeofenceResult_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string result_str = 2;
inline void GeofenceResult::clear_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& GeofenceResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GeofenceResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.geofence.GeofenceResult.result_str)
}
inline std::string* GeofenceResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _s;
}
inline const std::string& GeofenceResult::_internal_result_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_str_.Get();
}
inline void GeofenceResult::_internal_set_result_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* GeofenceResult::_internal_mutable_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* GeofenceResult::release_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.geofence.GeofenceResult.result_str)
  return _impl_.result_str_.Release();
}
inline void GeofenceResult::set_allocated_result_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.geofence.GeofenceResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace geofence
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::geofence::GeofenceResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::geofence::GeofenceResult_Result>() {
  return ::mavsdk::rpc::geofence::GeofenceResult_Result_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::geofence::FenceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::geofence::FenceType>() {
  return ::mavsdk::rpc::geofence::FenceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // geofence_2fgeofence_2eproto_2epb_2eh
