// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: calibration/calibration.proto
// Protobuf C++ Version: 5.29.1

#ifndef calibration_2fcalibration_2eproto_2epb_2eh
#define calibration_2fcalibration_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_calibration_2fcalibration_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_calibration_2fcalibration_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_calibration_2fcalibration_2eproto;
namespace mavsdk {
namespace rpc {
namespace calibration {
class CalibrateAccelerometerResponse;
struct CalibrateAccelerometerResponseDefaultTypeInternal;
extern CalibrateAccelerometerResponseDefaultTypeInternal _CalibrateAccelerometerResponse_default_instance_;
class CalibrateGimbalAccelerometerResponse;
struct CalibrateGimbalAccelerometerResponseDefaultTypeInternal;
extern CalibrateGimbalAccelerometerResponseDefaultTypeInternal _CalibrateGimbalAccelerometerResponse_default_instance_;
class CalibrateGyroResponse;
struct CalibrateGyroResponseDefaultTypeInternal;
extern CalibrateGyroResponseDefaultTypeInternal _CalibrateGyroResponse_default_instance_;
class CalibrateLevelHorizonResponse;
struct CalibrateLevelHorizonResponseDefaultTypeInternal;
extern CalibrateLevelHorizonResponseDefaultTypeInternal _CalibrateLevelHorizonResponse_default_instance_;
class CalibrateMagnetometerResponse;
struct CalibrateMagnetometerResponseDefaultTypeInternal;
extern CalibrateMagnetometerResponseDefaultTypeInternal _CalibrateMagnetometerResponse_default_instance_;
class CalibrationResult;
struct CalibrationResultDefaultTypeInternal;
extern CalibrationResultDefaultTypeInternal _CalibrationResult_default_instance_;
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class ProgressData;
struct ProgressDataDefaultTypeInternal;
extern ProgressDataDefaultTypeInternal _ProgressData_default_instance_;
class SubscribeCalibrateAccelerometerRequest;
struct SubscribeCalibrateAccelerometerRequestDefaultTypeInternal;
extern SubscribeCalibrateAccelerometerRequestDefaultTypeInternal _SubscribeCalibrateAccelerometerRequest_default_instance_;
class SubscribeCalibrateGimbalAccelerometerRequest;
struct SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal;
extern SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal _SubscribeCalibrateGimbalAccelerometerRequest_default_instance_;
class SubscribeCalibrateGyroRequest;
struct SubscribeCalibrateGyroRequestDefaultTypeInternal;
extern SubscribeCalibrateGyroRequestDefaultTypeInternal _SubscribeCalibrateGyroRequest_default_instance_;
class SubscribeCalibrateLevelHorizonRequest;
struct SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal;
extern SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal _SubscribeCalibrateLevelHorizonRequest_default_instance_;
class SubscribeCalibrateMagnetometerRequest;
struct SubscribeCalibrateMagnetometerRequestDefaultTypeInternal;
extern SubscribeCalibrateMagnetometerRequestDefaultTypeInternal _SubscribeCalibrateMagnetometerRequest_default_instance_;
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace calibration {
enum CalibrationResult_Result : int {
  CalibrationResult_Result_RESULT_UNKNOWN = 0,
  CalibrationResult_Result_RESULT_SUCCESS = 1,
  CalibrationResult_Result_RESULT_NEXT = 2,
  CalibrationResult_Result_RESULT_FAILED = 3,
  CalibrationResult_Result_RESULT_NO_SYSTEM = 4,
  CalibrationResult_Result_RESULT_CONNECTION_ERROR = 5,
  CalibrationResult_Result_RESULT_BUSY = 6,
  CalibrationResult_Result_RESULT_COMMAND_DENIED = 7,
  CalibrationResult_Result_RESULT_TIMEOUT = 8,
  CalibrationResult_Result_RESULT_CANCELLED = 9,
  CalibrationResult_Result_RESULT_FAILED_ARMED = 10,
  CalibrationResult_Result_RESULT_UNSUPPORTED = 11,
  CalibrationResult_Result_CalibrationResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CalibrationResult_Result_CalibrationResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CalibrationResult_Result_IsValid(int value);
extern const uint32_t CalibrationResult_Result_internal_data_[];
constexpr CalibrationResult_Result CalibrationResult_Result_Result_MIN = static_cast<CalibrationResult_Result>(0);
constexpr CalibrationResult_Result CalibrationResult_Result_Result_MAX = static_cast<CalibrationResult_Result>(11);
constexpr int CalibrationResult_Result_Result_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
CalibrationResult_Result_descriptor();
template <typename T>
const std::string& CalibrationResult_Result_Name(T value) {
  static_assert(std::is_same<T, CalibrationResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return CalibrationResult_Result_Name(static_cast<CalibrationResult_Result>(value));
}
template <>
inline const std::string& CalibrationResult_Result_Name(CalibrationResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CalibrationResult_Result_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool CalibrationResult_Result_Parse(absl::string_view name, CalibrationResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalibrationResult_Result>(
      CalibrationResult_Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SubscribeCalibrateMagnetometerRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest) */ {
 public:
  inline SubscribeCalibrateMagnetometerRequest() : SubscribeCalibrateMagnetometerRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCalibrateMagnetometerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCalibrateMagnetometerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateMagnetometerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCalibrateMagnetometerRequest(const SubscribeCalibrateMagnetometerRequest& from) : SubscribeCalibrateMagnetometerRequest(nullptr, from) {}
  inline SubscribeCalibrateMagnetometerRequest(SubscribeCalibrateMagnetometerRequest&& from) noexcept
      : SubscribeCalibrateMagnetometerRequest(nullptr, std::move(from)) {}
  inline SubscribeCalibrateMagnetometerRequest& operator=(const SubscribeCalibrateMagnetometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateMagnetometerRequest& operator=(SubscribeCalibrateMagnetometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateMagnetometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateMagnetometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateMagnetometerRequest*>(
        &_SubscribeCalibrateMagnetometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SubscribeCalibrateMagnetometerRequest& a, SubscribeCalibrateMagnetometerRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeCalibrateMagnetometerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateMagnetometerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateMagnetometerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeCalibrateMagnetometerRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateMagnetometerRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateMagnetometerRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest"; }

 protected:
  explicit SubscribeCalibrateMagnetometerRequest(::google::protobuf::Arena* arena);
  SubscribeCalibrateMagnetometerRequest(::google::protobuf::Arena* arena, const SubscribeCalibrateMagnetometerRequest& from);
  SubscribeCalibrateMagnetometerRequest(::google::protobuf::Arena* arena, SubscribeCalibrateMagnetometerRequest&& from) noexcept
      : SubscribeCalibrateMagnetometerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCalibrateMagnetometerRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateLevelHorizonRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest) */ {
 public:
  inline SubscribeCalibrateLevelHorizonRequest() : SubscribeCalibrateLevelHorizonRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCalibrateLevelHorizonRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCalibrateLevelHorizonRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateLevelHorizonRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCalibrateLevelHorizonRequest(const SubscribeCalibrateLevelHorizonRequest& from) : SubscribeCalibrateLevelHorizonRequest(nullptr, from) {}
  inline SubscribeCalibrateLevelHorizonRequest(SubscribeCalibrateLevelHorizonRequest&& from) noexcept
      : SubscribeCalibrateLevelHorizonRequest(nullptr, std::move(from)) {}
  inline SubscribeCalibrateLevelHorizonRequest& operator=(const SubscribeCalibrateLevelHorizonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateLevelHorizonRequest& operator=(SubscribeCalibrateLevelHorizonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateLevelHorizonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateLevelHorizonRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateLevelHorizonRequest*>(
        &_SubscribeCalibrateLevelHorizonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SubscribeCalibrateLevelHorizonRequest& a, SubscribeCalibrateLevelHorizonRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeCalibrateLevelHorizonRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateLevelHorizonRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateLevelHorizonRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeCalibrateLevelHorizonRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateLevelHorizonRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateLevelHorizonRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest"; }

 protected:
  explicit SubscribeCalibrateLevelHorizonRequest(::google::protobuf::Arena* arena);
  SubscribeCalibrateLevelHorizonRequest(::google::protobuf::Arena* arena, const SubscribeCalibrateLevelHorizonRequest& from);
  SubscribeCalibrateLevelHorizonRequest(::google::protobuf::Arena* arena, SubscribeCalibrateLevelHorizonRequest&& from) noexcept
      : SubscribeCalibrateLevelHorizonRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCalibrateLevelHorizonRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateGyroRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest) */ {
 public:
  inline SubscribeCalibrateGyroRequest() : SubscribeCalibrateGyroRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCalibrateGyroRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCalibrateGyroRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateGyroRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCalibrateGyroRequest(const SubscribeCalibrateGyroRequest& from) : SubscribeCalibrateGyroRequest(nullptr, from) {}
  inline SubscribeCalibrateGyroRequest(SubscribeCalibrateGyroRequest&& from) noexcept
      : SubscribeCalibrateGyroRequest(nullptr, std::move(from)) {}
  inline SubscribeCalibrateGyroRequest& operator=(const SubscribeCalibrateGyroRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateGyroRequest& operator=(SubscribeCalibrateGyroRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateGyroRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateGyroRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateGyroRequest*>(
        &_SubscribeCalibrateGyroRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SubscribeCalibrateGyroRequest& a, SubscribeCalibrateGyroRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeCalibrateGyroRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateGyroRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateGyroRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeCalibrateGyroRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateGyroRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateGyroRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest"; }

 protected:
  explicit SubscribeCalibrateGyroRequest(::google::protobuf::Arena* arena);
  SubscribeCalibrateGyroRequest(::google::protobuf::Arena* arena, const SubscribeCalibrateGyroRequest& from);
  SubscribeCalibrateGyroRequest(::google::protobuf::Arena* arena, SubscribeCalibrateGyroRequest&& from) noexcept
      : SubscribeCalibrateGyroRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCalibrateGyroRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateGimbalAccelerometerRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest) */ {
 public:
  inline SubscribeCalibrateGimbalAccelerometerRequest() : SubscribeCalibrateGimbalAccelerometerRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCalibrateGimbalAccelerometerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCalibrateGimbalAccelerometerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateGimbalAccelerometerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCalibrateGimbalAccelerometerRequest(const SubscribeCalibrateGimbalAccelerometerRequest& from) : SubscribeCalibrateGimbalAccelerometerRequest(nullptr, from) {}
  inline SubscribeCalibrateGimbalAccelerometerRequest(SubscribeCalibrateGimbalAccelerometerRequest&& from) noexcept
      : SubscribeCalibrateGimbalAccelerometerRequest(nullptr, std::move(from)) {}
  inline SubscribeCalibrateGimbalAccelerometerRequest& operator=(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateGimbalAccelerometerRequest& operator=(SubscribeCalibrateGimbalAccelerometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateGimbalAccelerometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateGimbalAccelerometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateGimbalAccelerometerRequest*>(
        &_SubscribeCalibrateGimbalAccelerometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SubscribeCalibrateGimbalAccelerometerRequest& a, SubscribeCalibrateGimbalAccelerometerRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeCalibrateGimbalAccelerometerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateGimbalAccelerometerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateGimbalAccelerometerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeCalibrateGimbalAccelerometerRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest"; }

 protected:
  explicit SubscribeCalibrateGimbalAccelerometerRequest(::google::protobuf::Arena* arena);
  SubscribeCalibrateGimbalAccelerometerRequest(::google::protobuf::Arena* arena, const SubscribeCalibrateGimbalAccelerometerRequest& from);
  SubscribeCalibrateGimbalAccelerometerRequest(::google::protobuf::Arena* arena, SubscribeCalibrateGimbalAccelerometerRequest&& from) noexcept
      : SubscribeCalibrateGimbalAccelerometerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCalibrateGimbalAccelerometerRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCalibrateAccelerometerRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest) */ {
 public:
  inline SubscribeCalibrateAccelerometerRequest() : SubscribeCalibrateAccelerometerRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCalibrateAccelerometerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCalibrateAccelerometerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCalibrateAccelerometerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCalibrateAccelerometerRequest(const SubscribeCalibrateAccelerometerRequest& from) : SubscribeCalibrateAccelerometerRequest(nullptr, from) {}
  inline SubscribeCalibrateAccelerometerRequest(SubscribeCalibrateAccelerometerRequest&& from) noexcept
      : SubscribeCalibrateAccelerometerRequest(nullptr, std::move(from)) {}
  inline SubscribeCalibrateAccelerometerRequest& operator=(const SubscribeCalibrateAccelerometerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCalibrateAccelerometerRequest& operator=(SubscribeCalibrateAccelerometerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCalibrateAccelerometerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCalibrateAccelerometerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCalibrateAccelerometerRequest*>(
        &_SubscribeCalibrateAccelerometerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SubscribeCalibrateAccelerometerRequest& a, SubscribeCalibrateAccelerometerRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeCalibrateAccelerometerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCalibrateAccelerometerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCalibrateAccelerometerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SubscribeCalibrateAccelerometerRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeCalibrateAccelerometerRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeCalibrateAccelerometerRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest"; }

 protected:
  explicit SubscribeCalibrateAccelerometerRequest(::google::protobuf::Arena* arena);
  SubscribeCalibrateAccelerometerRequest(::google::protobuf::Arena* arena, const SubscribeCalibrateAccelerometerRequest& from);
  SubscribeCalibrateAccelerometerRequest(::google::protobuf::Arena* arena, SubscribeCalibrateAccelerometerRequest&& from) noexcept
      : SubscribeCalibrateAccelerometerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCalibrateAccelerometerRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class ProgressData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.ProgressData) */ {
 public:
  inline ProgressData() : ProgressData(nullptr) {}
  ~ProgressData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ProgressData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ProgressData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProgressData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProgressData(const ProgressData& from) : ProgressData(nullptr, from) {}
  inline ProgressData(ProgressData&& from) noexcept
      : ProgressData(nullptr, std::move(from)) {}
  inline ProgressData& operator=(const ProgressData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgressData& operator=(ProgressData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgressData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgressData* internal_default_instance() {
    return reinterpret_cast<const ProgressData*>(
        &_ProgressData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(ProgressData& a, ProgressData& b) { a.Swap(&b); }
  inline void Swap(ProgressData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgressData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProgressData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ProgressData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProgressData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProgressData& from) { ProgressData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ProgressData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.ProgressData"; }

 protected:
  explicit ProgressData(::google::protobuf::Arena* arena);
  ProgressData(::google::protobuf::Arena* arena, const ProgressData& from);
  ProgressData(::google::protobuf::Arena* arena, ProgressData&& from) noexcept
      : ProgressData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusTextFieldNumber = 4,
    kProgressFieldNumber = 2,
    kHasProgressFieldNumber = 1,
    kHasStatusTextFieldNumber = 3,
  };
  // string status_text = 4;
  void clear_status_text() ;
  const std::string& status_text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_text(Arg_&& arg, Args_... args);
  std::string* mutable_status_text();
  PROTOBUF_NODISCARD std::string* release_status_text();
  void set_allocated_status_text(std::string* value);

  private:
  const std::string& _internal_status_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_text(
      const std::string& value);
  std::string* _internal_mutable_status_text();

  public:
  // float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_progress() ;
  float progress() const;
  void set_progress(float value);

  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);

  public:
  // bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
  void clear_has_progress() ;
  bool has_progress() const;
  void set_has_progress(bool value);

  private:
  bool _internal_has_progress() const;
  void _internal_set_has_progress(bool value);

  public:
  // bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
  void clear_has_status_text() ;
  bool has_status_text() const;
  void set_has_status_text(bool value);

  private:
  bool _internal_has_status_text() const;
  void _internal_set_has_status_text(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.ProgressData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProgressData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr status_text_;
    float progress_;
    bool has_progress_;
    bool has_status_text_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelRequest(const CancelRequest& from) : CancelRequest(nullptr, from) {}
  inline CancelRequest(CancelRequest&& from) noexcept
      : CancelRequest(nullptr, std::move(from)) {}
  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
        &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(CancelRequest& a, CancelRequest& b) { a.Swap(&b); }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CancelRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CancelRequest"; }

 protected:
  explicit CancelRequest(::google::protobuf::Arena* arena);
  CancelRequest(::google::protobuf::Arena* arena, const CancelRequest& from);
  CancelRequest(::google::protobuf::Arena* arena, CancelRequest&& from) noexcept
      : CancelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CancelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrationResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrationResult) */ {
 public:
  inline CalibrationResult() : CalibrationResult(nullptr) {}
  ~CalibrationResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrationResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrationResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrationResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrationResult(const CalibrationResult& from) : CalibrationResult(nullptr, from) {}
  inline CalibrationResult(CalibrationResult&& from) noexcept
      : CalibrationResult(nullptr, std::move(from)) {}
  inline CalibrationResult& operator=(const CalibrationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationResult& operator=(CalibrationResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationResult* internal_default_instance() {
    return reinterpret_cast<const CalibrationResult*>(
        &_CalibrationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(CalibrationResult& a, CalibrationResult& b) { a.Swap(&b); }
  inline void Swap(CalibrationResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrationResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CalibrationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrationResult& from) { CalibrationResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CalibrationResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CalibrationResult"; }

 protected:
  explicit CalibrationResult(::google::protobuf::Arena* arena);
  CalibrationResult(::google::protobuf::Arena* arena, const CalibrationResult& from);
  CalibrationResult(::google::protobuf::Arena* arena, CalibrationResult&& from) noexcept
      : CalibrationResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = CalibrationResult_Result;
  static constexpr Result RESULT_UNKNOWN = CalibrationResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = CalibrationResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NEXT = CalibrationResult_Result_RESULT_NEXT;
  static constexpr Result RESULT_FAILED = CalibrationResult_Result_RESULT_FAILED;
  static constexpr Result RESULT_NO_SYSTEM = CalibrationResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR = CalibrationResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_BUSY = CalibrationResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_COMMAND_DENIED = CalibrationResult_Result_RESULT_COMMAND_DENIED;
  static constexpr Result RESULT_TIMEOUT = CalibrationResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_CANCELLED = CalibrationResult_Result_RESULT_CANCELLED;
  static constexpr Result RESULT_FAILED_ARMED = CalibrationResult_Result_RESULT_FAILED_ARMED;
  static constexpr Result RESULT_UNSUPPORTED = CalibrationResult_Result_RESULT_UNSUPPORTED;
  static inline bool Result_IsValid(int value) {
    return CalibrationResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = CalibrationResult_Result_Result_MIN;
  static constexpr Result Result_MAX = CalibrationResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = CalibrationResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return CalibrationResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return CalibrationResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return CalibrationResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::calibration::CalibrationResult_Result result() const;
  void set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value);

  private:
  ::mavsdk::rpc::calibration::CalibrationResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrationResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrationResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  ~CancelResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CancelResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CancelResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CancelResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CancelResponse(const CancelResponse& from) : CancelResponse(nullptr, from) {}
  inline CancelResponse(CancelResponse&& from) noexcept
      : CancelResponse(nullptr, std::move(from)) {}
  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
        &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(CancelResponse& a, CancelResponse& b) { a.Swap(&b); }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CancelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CancelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CancelResponse& from) { CancelResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CancelResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CancelResponse"; }

 protected:
  explicit CancelResponse(::google::protobuf::Arena* arena);
  CancelResponse(::google::protobuf::Arena* arena, const CancelResponse& from);
  CancelResponse(::google::protobuf::Arena* arena, CancelResponse&& from) noexcept
      : CancelResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationResultFieldNumber = 1,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  void clear_calibration_result() ;
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  void unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CancelResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CancelResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateMagnetometerResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateMagnetometerResponse) */ {
 public:
  inline CalibrateMagnetometerResponse() : CalibrateMagnetometerResponse(nullptr) {}
  ~CalibrateMagnetometerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateMagnetometerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateMagnetometerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateMagnetometerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateMagnetometerResponse(const CalibrateMagnetometerResponse& from) : CalibrateMagnetometerResponse(nullptr, from) {}
  inline CalibrateMagnetometerResponse(CalibrateMagnetometerResponse&& from) noexcept
      : CalibrateMagnetometerResponse(nullptr, std::move(from)) {}
  inline CalibrateMagnetometerResponse& operator=(const CalibrateMagnetometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateMagnetometerResponse& operator=(CalibrateMagnetometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateMagnetometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateMagnetometerResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateMagnetometerResponse*>(
        &_CalibrateMagnetometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CalibrateMagnetometerResponse& a, CalibrateMagnetometerResponse& b) { a.Swap(&b); }
  inline void Swap(CalibrateMagnetometerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateMagnetometerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateMagnetometerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CalibrateMagnetometerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrateMagnetometerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrateMagnetometerResponse& from) { CalibrateMagnetometerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CalibrateMagnetometerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CalibrateMagnetometerResponse"; }

 protected:
  explicit CalibrateMagnetometerResponse(::google::protobuf::Arena* arena);
  CalibrateMagnetometerResponse(::google::protobuf::Arena* arena, const CalibrateMagnetometerResponse& from);
  CalibrateMagnetometerResponse(::google::protobuf::Arena* arena, CalibrateMagnetometerResponse&& from) noexcept
      : CalibrateMagnetometerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  void clear_calibration_result() ;
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  void unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();

  public:
  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  void clear_progress_data() ;
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  void unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateMagnetometerResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
    ::mavsdk::rpc::calibration::ProgressData* progress_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateLevelHorizonResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse) */ {
 public:
  inline CalibrateLevelHorizonResponse() : CalibrateLevelHorizonResponse(nullptr) {}
  ~CalibrateLevelHorizonResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateLevelHorizonResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateLevelHorizonResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateLevelHorizonResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateLevelHorizonResponse(const CalibrateLevelHorizonResponse& from) : CalibrateLevelHorizonResponse(nullptr, from) {}
  inline CalibrateLevelHorizonResponse(CalibrateLevelHorizonResponse&& from) noexcept
      : CalibrateLevelHorizonResponse(nullptr, std::move(from)) {}
  inline CalibrateLevelHorizonResponse& operator=(const CalibrateLevelHorizonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateLevelHorizonResponse& operator=(CalibrateLevelHorizonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateLevelHorizonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateLevelHorizonResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateLevelHorizonResponse*>(
        &_CalibrateLevelHorizonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CalibrateLevelHorizonResponse& a, CalibrateLevelHorizonResponse& b) { a.Swap(&b); }
  inline void Swap(CalibrateLevelHorizonResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateLevelHorizonResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateLevelHorizonResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CalibrateLevelHorizonResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrateLevelHorizonResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrateLevelHorizonResponse& from) { CalibrateLevelHorizonResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CalibrateLevelHorizonResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CalibrateLevelHorizonResponse"; }

 protected:
  explicit CalibrateLevelHorizonResponse(::google::protobuf::Arena* arena);
  CalibrateLevelHorizonResponse(::google::protobuf::Arena* arena, const CalibrateLevelHorizonResponse& from);
  CalibrateLevelHorizonResponse(::google::protobuf::Arena* arena, CalibrateLevelHorizonResponse&& from) noexcept
      : CalibrateLevelHorizonResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  void clear_calibration_result() ;
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  void unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();

  public:
  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  void clear_progress_data() ;
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  void unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateLevelHorizonResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
    ::mavsdk::rpc::calibration::ProgressData* progress_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateGyroResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateGyroResponse) */ {
 public:
  inline CalibrateGyroResponse() : CalibrateGyroResponse(nullptr) {}
  ~CalibrateGyroResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateGyroResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateGyroResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateGyroResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateGyroResponse(const CalibrateGyroResponse& from) : CalibrateGyroResponse(nullptr, from) {}
  inline CalibrateGyroResponse(CalibrateGyroResponse&& from) noexcept
      : CalibrateGyroResponse(nullptr, std::move(from)) {}
  inline CalibrateGyroResponse& operator=(const CalibrateGyroResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateGyroResponse& operator=(CalibrateGyroResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateGyroResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateGyroResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateGyroResponse*>(
        &_CalibrateGyroResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CalibrateGyroResponse& a, CalibrateGyroResponse& b) { a.Swap(&b); }
  inline void Swap(CalibrateGyroResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateGyroResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateGyroResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CalibrateGyroResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrateGyroResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrateGyroResponse& from) { CalibrateGyroResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CalibrateGyroResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CalibrateGyroResponse"; }

 protected:
  explicit CalibrateGyroResponse(::google::protobuf::Arena* arena);
  CalibrateGyroResponse(::google::protobuf::Arena* arena, const CalibrateGyroResponse& from);
  CalibrateGyroResponse(::google::protobuf::Arena* arena, CalibrateGyroResponse&& from) noexcept
      : CalibrateGyroResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  void clear_calibration_result() ;
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  void unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();

  public:
  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  void clear_progress_data() ;
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  void unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateGyroResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateGyroResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
    ::mavsdk::rpc::calibration::ProgressData* progress_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateGimbalAccelerometerResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse) */ {
 public:
  inline CalibrateGimbalAccelerometerResponse() : CalibrateGimbalAccelerometerResponse(nullptr) {}
  ~CalibrateGimbalAccelerometerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateGimbalAccelerometerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateGimbalAccelerometerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateGimbalAccelerometerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateGimbalAccelerometerResponse(const CalibrateGimbalAccelerometerResponse& from) : CalibrateGimbalAccelerometerResponse(nullptr, from) {}
  inline CalibrateGimbalAccelerometerResponse(CalibrateGimbalAccelerometerResponse&& from) noexcept
      : CalibrateGimbalAccelerometerResponse(nullptr, std::move(from)) {}
  inline CalibrateGimbalAccelerometerResponse& operator=(const CalibrateGimbalAccelerometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateGimbalAccelerometerResponse& operator=(CalibrateGimbalAccelerometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateGimbalAccelerometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateGimbalAccelerometerResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateGimbalAccelerometerResponse*>(
        &_CalibrateGimbalAccelerometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(CalibrateGimbalAccelerometerResponse& a, CalibrateGimbalAccelerometerResponse& b) { a.Swap(&b); }
  inline void Swap(CalibrateGimbalAccelerometerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateGimbalAccelerometerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateGimbalAccelerometerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CalibrateGimbalAccelerometerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrateGimbalAccelerometerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrateGimbalAccelerometerResponse& from) { CalibrateGimbalAccelerometerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CalibrateGimbalAccelerometerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse"; }

 protected:
  explicit CalibrateGimbalAccelerometerResponse(::google::protobuf::Arena* arena);
  CalibrateGimbalAccelerometerResponse(::google::protobuf::Arena* arena, const CalibrateGimbalAccelerometerResponse& from);
  CalibrateGimbalAccelerometerResponse(::google::protobuf::Arena* arena, CalibrateGimbalAccelerometerResponse&& from) noexcept
      : CalibrateGimbalAccelerometerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  void clear_calibration_result() ;
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  void unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();

  public:
  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  void clear_progress_data() ;
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  void unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateGimbalAccelerometerResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
    ::mavsdk::rpc::calibration::ProgressData* progress_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};
// -------------------------------------------------------------------

class CalibrateAccelerometerResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.calibration.CalibrateAccelerometerResponse) */ {
 public:
  inline CalibrateAccelerometerResponse() : CalibrateAccelerometerResponse(nullptr) {}
  ~CalibrateAccelerometerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateAccelerometerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateAccelerometerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateAccelerometerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateAccelerometerResponse(const CalibrateAccelerometerResponse& from) : CalibrateAccelerometerResponse(nullptr, from) {}
  inline CalibrateAccelerometerResponse(CalibrateAccelerometerResponse&& from) noexcept
      : CalibrateAccelerometerResponse(nullptr, std::move(from)) {}
  inline CalibrateAccelerometerResponse& operator=(const CalibrateAccelerometerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateAccelerometerResponse& operator=(CalibrateAccelerometerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateAccelerometerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateAccelerometerResponse* internal_default_instance() {
    return reinterpret_cast<const CalibrateAccelerometerResponse*>(
        &_CalibrateAccelerometerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CalibrateAccelerometerResponse& a, CalibrateAccelerometerResponse& b) { a.Swap(&b); }
  inline void Swap(CalibrateAccelerometerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateAccelerometerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateAccelerometerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CalibrateAccelerometerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CalibrateAccelerometerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CalibrateAccelerometerResponse& from) { CalibrateAccelerometerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CalibrateAccelerometerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.calibration.CalibrateAccelerometerResponse"; }

 protected:
  explicit CalibrateAccelerometerResponse(::google::protobuf::Arena* arena);
  CalibrateAccelerometerResponse(::google::protobuf::Arena* arena, const CalibrateAccelerometerResponse& from);
  CalibrateAccelerometerResponse(::google::protobuf::Arena* arena, CalibrateAccelerometerResponse&& from) noexcept
      : CalibrateAccelerometerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibrationResultFieldNumber = 1,
    kProgressDataFieldNumber = 2,
  };
  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  bool has_calibration_result() const;
  void clear_calibration_result() ;
  const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::CalibrationResult* release_calibration_result();
  ::mavsdk::rpc::calibration::CalibrationResult* mutable_calibration_result();
  void set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  void unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value);
  ::mavsdk::rpc::calibration::CalibrationResult* unsafe_arena_release_calibration_result();

  private:
  const ::mavsdk::rpc::calibration::CalibrationResult& _internal_calibration_result() const;
  ::mavsdk::rpc::calibration::CalibrationResult* _internal_mutable_calibration_result();

  public:
  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  bool has_progress_data() const;
  void clear_progress_data() ;
  const ::mavsdk::rpc::calibration::ProgressData& progress_data() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::calibration::ProgressData* release_progress_data();
  ::mavsdk::rpc::calibration::ProgressData* mutable_progress_data();
  void set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  void unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value);
  ::mavsdk::rpc::calibration::ProgressData* unsafe_arena_release_progress_data();

  private:
  const ::mavsdk::rpc::calibration::ProgressData& _internal_progress_data() const;
  ::mavsdk::rpc::calibration::ProgressData* _internal_mutable_progress_data();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateAccelerometerResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::calibration::CalibrationResult* calibration_result_;
    ::mavsdk::rpc::calibration::ProgressData* progress_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_calibration_2fcalibration_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubscribeCalibrateGyroRequest

// -------------------------------------------------------------------

// CalibrateGyroResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateGyroResponse::has_calibration_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_result_ != nullptr);
  return value;
}
inline void CalibrateGyroResponse::clear_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ != nullptr) _impl_.calibration_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGyroResponse::_internal_calibration_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::CalibrationResult* p = _impl_.calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGyroResponse::calibration_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateGyroResponse::unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.calibration_result_);
  }
  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* released = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::unsafe_arena_release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* temp = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::_internal_mutable_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::CalibrationResult>(GetArena());
    _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(p);
  }
  return _impl_.calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGyroResponse::mutable_calibration_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
  return _msg;
}
inline void CalibrateGyroResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.calibration_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateGyroResponse::has_progress_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.progress_data_ != nullptr);
  return value;
}
inline void CalibrateGyroResponse::clear_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ != nullptr) _impl_.progress_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGyroResponse::_internal_progress_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::ProgressData* p = _impl_.progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGyroResponse::progress_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateGyroResponse::unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.progress_data_);
  }
  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* released = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::unsafe_arena_release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* temp = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::_internal_mutable_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::ProgressData>(GetArena());
    _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(p);
  }
  return _impl_.progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGyroResponse::mutable_progress_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
  return _msg;
}
inline void CalibrateGyroResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.progress_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateAccelerometerRequest

// -------------------------------------------------------------------

// CalibrateAccelerometerResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateAccelerometerResponse::has_calibration_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_result_ != nullptr);
  return value;
}
inline void CalibrateAccelerometerResponse::clear_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ != nullptr) _impl_.calibration_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateAccelerometerResponse::_internal_calibration_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::CalibrationResult* p = _impl_.calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateAccelerometerResponse::calibration_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateAccelerometerResponse::unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.calibration_result_);
  }
  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* released = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::unsafe_arena_release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* temp = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::_internal_mutable_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::CalibrationResult>(GetArena());
    _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(p);
  }
  return _impl_.calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateAccelerometerResponse::mutable_calibration_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
  return _msg;
}
inline void CalibrateAccelerometerResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.calibration_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateAccelerometerResponse::has_progress_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.progress_data_ != nullptr);
  return value;
}
inline void CalibrateAccelerometerResponse::clear_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ != nullptr) _impl_.progress_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateAccelerometerResponse::_internal_progress_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::ProgressData* p = _impl_.progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateAccelerometerResponse::progress_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateAccelerometerResponse::unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.progress_data_);
  }
  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* released = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::unsafe_arena_release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* temp = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::_internal_mutable_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::ProgressData>(GetArena());
    _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(p);
  }
  return _impl_.progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateAccelerometerResponse::mutable_progress_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
  return _msg;
}
inline void CalibrateAccelerometerResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.progress_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateMagnetometerRequest

// -------------------------------------------------------------------

// CalibrateMagnetometerResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateMagnetometerResponse::has_calibration_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_result_ != nullptr);
  return value;
}
inline void CalibrateMagnetometerResponse::clear_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ != nullptr) _impl_.calibration_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateMagnetometerResponse::_internal_calibration_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::CalibrationResult* p = _impl_.calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateMagnetometerResponse::calibration_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateMagnetometerResponse::unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.calibration_result_);
  }
  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* released = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::unsafe_arena_release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* temp = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::_internal_mutable_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::CalibrationResult>(GetArena());
    _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(p);
  }
  return _impl_.calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateMagnetometerResponse::mutable_calibration_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
  return _msg;
}
inline void CalibrateMagnetometerResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.calibration_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateMagnetometerResponse::has_progress_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.progress_data_ != nullptr);
  return value;
}
inline void CalibrateMagnetometerResponse::clear_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ != nullptr) _impl_.progress_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateMagnetometerResponse::_internal_progress_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::ProgressData* p = _impl_.progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateMagnetometerResponse::progress_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateMagnetometerResponse::unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.progress_data_);
  }
  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* released = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::unsafe_arena_release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* temp = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::_internal_mutable_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::ProgressData>(GetArena());
    _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(p);
  }
  return _impl_.progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateMagnetometerResponse::mutable_progress_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
  return _msg;
}
inline void CalibrateMagnetometerResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.progress_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateLevelHorizonRequest

// -------------------------------------------------------------------

// CalibrateLevelHorizonResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateLevelHorizonResponse::has_calibration_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_result_ != nullptr);
  return value;
}
inline void CalibrateLevelHorizonResponse::clear_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ != nullptr) _impl_.calibration_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateLevelHorizonResponse::_internal_calibration_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::CalibrationResult* p = _impl_.calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateLevelHorizonResponse::calibration_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateLevelHorizonResponse::unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.calibration_result_);
  }
  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* released = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::unsafe_arena_release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* temp = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::_internal_mutable_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::CalibrationResult>(GetArena());
    _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(p);
  }
  return _impl_.calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateLevelHorizonResponse::mutable_calibration_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
  return _msg;
}
inline void CalibrateLevelHorizonResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.calibration_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateLevelHorizonResponse::has_progress_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.progress_data_ != nullptr);
  return value;
}
inline void CalibrateLevelHorizonResponse::clear_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ != nullptr) _impl_.progress_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateLevelHorizonResponse::_internal_progress_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::ProgressData* p = _impl_.progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateLevelHorizonResponse::progress_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateLevelHorizonResponse::unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.progress_data_);
  }
  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* released = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::unsafe_arena_release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* temp = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::_internal_mutable_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::ProgressData>(GetArena());
    _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(p);
  }
  return _impl_.progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateLevelHorizonResponse::mutable_progress_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
  return _msg;
}
inline void CalibrateLevelHorizonResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.progress_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data)
}

// -------------------------------------------------------------------

// SubscribeCalibrateGimbalAccelerometerRequest

// -------------------------------------------------------------------

// CalibrateGimbalAccelerometerResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CalibrateGimbalAccelerometerResponse::has_calibration_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_result_ != nullptr);
  return value;
}
inline void CalibrateGimbalAccelerometerResponse::clear_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ != nullptr) _impl_.calibration_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGimbalAccelerometerResponse::_internal_calibration_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::CalibrationResult* p = _impl_.calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CalibrateGimbalAccelerometerResponse::calibration_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CalibrateGimbalAccelerometerResponse::unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.calibration_result_);
  }
  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* released = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::unsafe_arena_release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* temp = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::_internal_mutable_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::CalibrationResult>(GetArena());
    _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(p);
  }
  return _impl_.calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CalibrateGimbalAccelerometerResponse::mutable_calibration_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
  return _msg;
}
inline void CalibrateGimbalAccelerometerResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.calibration_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result)
}

// .mavsdk.rpc.calibration.ProgressData progress_data = 2;
inline bool CalibrateGimbalAccelerometerResponse::has_progress_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.progress_data_ != nullptr);
  return value;
}
inline void CalibrateGimbalAccelerometerResponse::clear_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ != nullptr) _impl_.progress_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGimbalAccelerometerResponse::_internal_progress_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::ProgressData* p = _impl_.progress_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::ProgressData&>(::mavsdk::rpc::calibration::_ProgressData_default_instance_);
}
inline const ::mavsdk::rpc::calibration::ProgressData& CalibrateGimbalAccelerometerResponse::progress_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
  return _internal_progress_data();
}
inline void CalibrateGimbalAccelerometerResponse::unsafe_arena_set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.progress_data_);
  }
  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* released = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::unsafe_arena_release_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* temp = _impl_.progress_data_;
  _impl_.progress_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::_internal_mutable_progress_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.progress_data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::ProgressData>(GetArena());
    _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(p);
  }
  return _impl_.progress_data_;
}
inline ::mavsdk::rpc::calibration::ProgressData* CalibrateGimbalAccelerometerResponse::mutable_progress_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mavsdk::rpc::calibration::ProgressData* _msg = _internal_mutable_progress_data();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
  return _msg;
}
inline void CalibrateGimbalAccelerometerResponse::set_allocated_progress_data(::mavsdk::rpc::calibration::ProgressData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.progress_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.progress_data_ = reinterpret_cast<::mavsdk::rpc::calibration::ProgressData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data)
}

// -------------------------------------------------------------------

// CancelRequest

// -------------------------------------------------------------------

// CancelResponse

// .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
inline bool CancelResponse::has_calibration_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calibration_result_ != nullptr);
  return value;
}
inline void CancelResponse::clear_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ != nullptr) _impl_.calibration_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CancelResponse::_internal_calibration_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::calibration::CalibrationResult* p = _impl_.calibration_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::calibration::CalibrationResult&>(::mavsdk::rpc::calibration::_CalibrationResult_default_instance_);
}
inline const ::mavsdk::rpc::calibration::CalibrationResult& CancelResponse::calibration_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CancelResponse.calibration_result)
  return _internal_calibration_result();
}
inline void CancelResponse::unsafe_arena_set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.calibration_result_);
  }
  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.calibration.CancelResponse.calibration_result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* released = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::unsafe_arena_release_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CancelResponse.calibration_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* temp = _impl_.calibration_result_;
  _impl_.calibration_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::_internal_mutable_calibration_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.calibration_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::calibration::CalibrationResult>(GetArena());
    _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(p);
  }
  return _impl_.calibration_result_;
}
inline ::mavsdk::rpc::calibration::CalibrationResult* CancelResponse::mutable_calibration_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::calibration::CalibrationResult* _msg = _internal_mutable_calibration_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CancelResponse.calibration_result)
  return _msg;
}
inline void CancelResponse::set_allocated_calibration_result(::mavsdk::rpc::calibration::CalibrationResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.calibration_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.calibration_result_ = reinterpret_cast<::mavsdk::rpc::calibration::CalibrationResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CancelResponse.calibration_result)
}

// -------------------------------------------------------------------

// CalibrationResult

// .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
inline void CalibrationResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::calibration::CalibrationResult_Result CalibrationResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrationResult.result)
  return _internal_result();
}
inline void CalibrationResult::set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.CalibrationResult.result)
}
inline ::mavsdk::rpc::calibration::CalibrationResult_Result CalibrationResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::calibration::CalibrationResult_Result>(_impl_.result_);
}
inline void CalibrationResult::_internal_set_result(::mavsdk::rpc::calibration::CalibrationResult_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string result_str = 2;
inline void CalibrationResult::clear_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& CalibrationResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.CalibrationResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CalibrationResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.CalibrationResult.result_str)
}
inline std::string* CalibrationResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.CalibrationResult.result_str)
  return _s;
}
inline const std::string& CalibrationResult::_internal_result_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_str_.Get();
}
inline void CalibrationResult::_internal_set_result_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* CalibrationResult::_internal_mutable_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* CalibrationResult::release_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.CalibrationResult.result_str)
  return _impl_.result_str_.Release();
}
inline void CalibrationResult::set_allocated_result_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.CalibrationResult.result_str)
}

// -------------------------------------------------------------------

// ProgressData

// bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
inline void ProgressData::clear_has_progress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_progress_ = false;
}
inline bool ProgressData::has_progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.has_progress)
  return _internal_has_progress();
}
inline void ProgressData::set_has_progress(bool value) {
  _internal_set_has_progress(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.has_progress)
}
inline bool ProgressData::_internal_has_progress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_progress_;
}
inline void ProgressData::_internal_set_has_progress(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_progress_ = value;
}

// float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void ProgressData::clear_progress() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_ = 0;
}
inline float ProgressData::progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.progress)
  return _internal_progress();
}
inline void ProgressData::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.progress)
}
inline float ProgressData::_internal_progress() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.progress_;
}
inline void ProgressData::_internal_set_progress(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.progress_ = value;
}

// bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
inline void ProgressData::clear_has_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_status_text_ = false;
}
inline bool ProgressData::has_status_text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.has_status_text)
  return _internal_has_status_text();
}
inline void ProgressData::set_has_status_text(bool value) {
  _internal_set_has_status_text(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.has_status_text)
}
inline bool ProgressData::_internal_has_status_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_status_text_;
}
inline void ProgressData::_internal_set_has_status_text(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_status_text_ = value;
}

// string status_text = 4;
inline void ProgressData::clear_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_text_.ClearToEmpty();
}
inline const std::string& ProgressData::status_text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.calibration.ProgressData.status_text)
  return _internal_status_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProgressData::set_status_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.calibration.ProgressData.status_text)
}
inline std::string* ProgressData::mutable_status_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.calibration.ProgressData.status_text)
  return _s;
}
inline const std::string& ProgressData::_internal_status_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_text_.Get();
}
inline void ProgressData::_internal_set_status_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_text_.Set(value, GetArena());
}
inline std::string* ProgressData::_internal_mutable_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_text_.Mutable( GetArena());
}
inline std::string* ProgressData::release_status_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.calibration.ProgressData.status_text)
  return _impl_.status_text_.Release();
}
inline void ProgressData::set_allocated_status_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_text_.IsDefault()) {
    _impl_.status_text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.calibration.ProgressData.status_text)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::calibration::CalibrationResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::calibration::CalibrationResult_Result>() {
  return ::mavsdk::rpc::calibration::CalibrationResult_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // calibration_2fcalibration_2eproto_2epb_2eh
