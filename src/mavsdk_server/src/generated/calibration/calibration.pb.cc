// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: calibration/calibration.proto
// Protobuf C++ Version: 5.29.1

#include "calibration/calibration.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mavsdk {
namespace rpc {
namespace calibration {
              template <typename>
PROTOBUF_CONSTEXPR SubscribeCalibrateMagnetometerRequest::SubscribeCalibrateMagnetometerRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeCalibrateMagnetometerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCalibrateMagnetometerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCalibrateMagnetometerRequestDefaultTypeInternal() {}
  union {
    SubscribeCalibrateMagnetometerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCalibrateMagnetometerRequestDefaultTypeInternal _SubscribeCalibrateMagnetometerRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SubscribeCalibrateLevelHorizonRequest::SubscribeCalibrateLevelHorizonRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal() {}
  union {
    SubscribeCalibrateLevelHorizonRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCalibrateLevelHorizonRequestDefaultTypeInternal _SubscribeCalibrateLevelHorizonRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SubscribeCalibrateGyroRequest::SubscribeCalibrateGyroRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeCalibrateGyroRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCalibrateGyroRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCalibrateGyroRequestDefaultTypeInternal() {}
  union {
    SubscribeCalibrateGyroRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCalibrateGyroRequestDefaultTypeInternal _SubscribeCalibrateGyroRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SubscribeCalibrateGimbalAccelerometerRequest::SubscribeCalibrateGimbalAccelerometerRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal() {}
  union {
    SubscribeCalibrateGimbalAccelerometerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal _SubscribeCalibrateGimbalAccelerometerRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SubscribeCalibrateAccelerometerRequest::SubscribeCalibrateAccelerometerRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SubscribeCalibrateAccelerometerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeCalibrateAccelerometerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeCalibrateAccelerometerRequestDefaultTypeInternal() {}
  union {
    SubscribeCalibrateAccelerometerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeCalibrateAccelerometerRequestDefaultTypeInternal _SubscribeCalibrateAccelerometerRequest_default_instance_;

inline constexpr ProgressData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        progress_{0},
        has_progress_{false},
        has_status_text_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ProgressData::ProgressData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ProgressDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgressDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgressDataDefaultTypeInternal() {}
  union {
    ProgressData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgressDataDefaultTypeInternal _ProgressData_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR CancelRequest::CancelRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CancelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelRequestDefaultTypeInternal() {}
  union {
    CancelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;

inline constexpr CalibrationResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{static_cast< ::mavsdk::rpc::calibration::CalibrationResult_Result >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CalibrationResult::CalibrationResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CalibrationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrationResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrationResultDefaultTypeInternal() {}
  union {
    CalibrationResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrationResultDefaultTypeInternal _CalibrationResult_default_instance_;

inline constexpr CancelResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CancelResponse::CancelResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CancelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelResponseDefaultTypeInternal() {}
  union {
    CancelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;

inline constexpr CalibrateMagnetometerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_result_{nullptr},
        progress_data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CalibrateMagnetometerResponse::CalibrateMagnetometerResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CalibrateMagnetometerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrateMagnetometerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrateMagnetometerResponseDefaultTypeInternal() {}
  union {
    CalibrateMagnetometerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrateMagnetometerResponseDefaultTypeInternal _CalibrateMagnetometerResponse_default_instance_;

inline constexpr CalibrateLevelHorizonResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_result_{nullptr},
        progress_data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CalibrateLevelHorizonResponse::CalibrateLevelHorizonResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CalibrateLevelHorizonResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrateLevelHorizonResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrateLevelHorizonResponseDefaultTypeInternal() {}
  union {
    CalibrateLevelHorizonResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrateLevelHorizonResponseDefaultTypeInternal _CalibrateLevelHorizonResponse_default_instance_;

inline constexpr CalibrateGyroResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_result_{nullptr},
        progress_data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CalibrateGyroResponse::CalibrateGyroResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CalibrateGyroResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrateGyroResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrateGyroResponseDefaultTypeInternal() {}
  union {
    CalibrateGyroResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrateGyroResponseDefaultTypeInternal _CalibrateGyroResponse_default_instance_;

inline constexpr CalibrateGimbalAccelerometerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_result_{nullptr},
        progress_data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CalibrateGimbalAccelerometerResponse::CalibrateGimbalAccelerometerResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CalibrateGimbalAccelerometerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrateGimbalAccelerometerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrateGimbalAccelerometerResponseDefaultTypeInternal() {}
  union {
    CalibrateGimbalAccelerometerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrateGimbalAccelerometerResponseDefaultTypeInternal _CalibrateGimbalAccelerometerResponse_default_instance_;

inline constexpr CalibrateAccelerometerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calibration_result_{nullptr},
        progress_data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CalibrateAccelerometerResponse::CalibrateAccelerometerResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CalibrateAccelerometerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalibrateAccelerometerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalibrateAccelerometerResponseDefaultTypeInternal() {}
  union {
    CalibrateAccelerometerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalibrateAccelerometerResponseDefaultTypeInternal _CalibrateAccelerometerResponse_default_instance_;
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_calibration_2fcalibration_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_calibration_2fcalibration_2eproto = nullptr;
const ::uint32_t
    TableStruct_calibration_2fcalibration_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, _impl_.calibration_result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, _impl_.progress_data_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, _impl_.calibration_result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, _impl_.progress_data_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, _impl_.calibration_result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, _impl_.progress_data_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateLevelHorizonRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse, _impl_.calibration_result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse, _impl_.progress_data_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, _impl_.calibration_result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, _impl_.progress_data_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CancelRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CancelResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CancelResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CancelResponse, _impl_.calibration_result_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrationResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrationResult, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrationResult, _impl_.result_str_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, _impl_.has_progress_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, _impl_.progress_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, _impl_.has_status_text_),
        PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, _impl_.status_text_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest)},
        {8, 18, -1, sizeof(::mavsdk::rpc::calibration::CalibrateGyroResponse)},
        {20, -1, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest)},
        {28, 38, -1, sizeof(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse)},
        {40, -1, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest)},
        {48, 58, -1, sizeof(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse)},
        {60, -1, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateLevelHorizonRequest)},
        {68, 78, -1, sizeof(::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse)},
        {80, -1, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest)},
        {88, 98, -1, sizeof(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse)},
        {100, -1, -1, sizeof(::mavsdk::rpc::calibration::CancelRequest)},
        {108, 117, -1, sizeof(::mavsdk::rpc::calibration::CancelResponse)},
        {118, -1, -1, sizeof(::mavsdk::rpc::calibration::CalibrationResult)},
        {128, -1, -1, sizeof(::mavsdk::rpc::calibration::ProgressData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::mavsdk::rpc::calibration::_SubscribeCalibrateGyroRequest_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CalibrateGyroResponse_default_instance_._instance,
    &::mavsdk::rpc::calibration::_SubscribeCalibrateAccelerometerRequest_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CalibrateAccelerometerResponse_default_instance_._instance,
    &::mavsdk::rpc::calibration::_SubscribeCalibrateMagnetometerRequest_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CalibrateMagnetometerResponse_default_instance_._instance,
    &::mavsdk::rpc::calibration::_SubscribeCalibrateLevelHorizonRequest_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CalibrateLevelHorizonResponse_default_instance_._instance,
    &::mavsdk::rpc::calibration::_SubscribeCalibrateGimbalAccelerometerRequest_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CalibrateGimbalAccelerometerResponse_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CancelRequest_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CancelResponse_default_instance_._instance,
    &::mavsdk::rpc::calibration::_CalibrationResult_default_instance_._instance,
    &::mavsdk::rpc::calibration::_ProgressData_default_instance_._instance,
};
const char descriptor_table_protodef_calibration_2fcalibration_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\035calibration/calibration.proto\022\026mavsdk."
    "rpc.calibration\032\024mavsdk_options.proto\"\037\n"
    "\035SubscribeCalibrateGyroRequest\"\233\001\n\025Calib"
    "rateGyroResponse\022E\n\022calibration_result\030\001"
    " \001(\0132).mavsdk.rpc.calibration.Calibratio"
    "nResult\022;\n\rprogress_data\030\002 \001(\0132$.mavsdk."
    "rpc.calibration.ProgressData\"(\n&Subscrib"
    "eCalibrateAccelerometerRequest\"\244\001\n\036Calib"
    "rateAccelerometerResponse\022E\n\022calibration"
    "_result\030\001 \001(\0132).mavsdk.rpc.calibration.C"
    "alibrationResult\022;\n\rprogress_data\030\002 \001(\0132"
    "$.mavsdk.rpc.calibration.ProgressData\"\'\n"
    "%SubscribeCalibrateMagnetometerRequest\"\243"
    "\001\n\035CalibrateMagnetometerResponse\022E\n\022cali"
    "bration_result\030\001 \001(\0132).mavsdk.rpc.calibr"
    "ation.CalibrationResult\022;\n\rprogress_data"
    "\030\002 \001(\0132$.mavsdk.rpc.calibration.Progress"
    "Data\"\'\n%SubscribeCalibrateLevelHorizonRe"
    "quest\"\243\001\n\035CalibrateLevelHorizonResponse\022"
    "E\n\022calibration_result\030\001 \001(\0132).mavsdk.rpc"
    ".calibration.CalibrationResult\022;\n\rprogre"
    "ss_data\030\002 \001(\0132$.mavsdk.rpc.calibration.P"
    "rogressData\".\n,SubscribeCalibrateGimbalA"
    "ccelerometerRequest\"\252\001\n$CalibrateGimbalA"
    "ccelerometerResponse\022E\n\022calibration_resu"
    "lt\030\001 \001(\0132).mavsdk.rpc.calibration.Calibr"
    "ationResult\022;\n\rprogress_data\030\002 \001(\0132$.mav"
    "sdk.rpc.calibration.ProgressData\"\017\n\rCanc"
    "elRequest\"W\n\016CancelResponse\022E\n\022calibrati"
    "on_result\030\001 \001(\0132).mavsdk.rpc.calibration"
    ".CalibrationResult\"\372\002\n\021CalibrationResult"
    "\022@\n\006result\030\001 \001(\01620.mavsdk.rpc.calibratio"
    "n.CalibrationResult.Result\022\022\n\nresult_str"
    "\030\002 \001(\t\"\216\002\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022\n"
    "\016RESULT_SUCCESS\020\001\022\017\n\013RESULT_NEXT\020\002\022\021\n\rRE"
    "SULT_FAILED\020\003\022\024\n\020RESULT_NO_SYSTEM\020\004\022\033\n\027R"
    "ESULT_CONNECTION_ERROR\020\005\022\017\n\013RESULT_BUSY\020"
    "\006\022\031\n\025RESULT_COMMAND_DENIED\020\007\022\022\n\016RESULT_T"
    "IMEOUT\020\010\022\024\n\020RESULT_CANCELLED\020\t\022\027\n\023RESULT"
    "_FAILED_ARMED\020\n\022\026\n\022RESULT_UNSUPPORTED\020\013\""
    "\203\001\n\014ProgressData\022\037\n\014has_progress\030\001 \001(\010B\t"
    "\202\265\030\005false\022\031\n\010progress\030\002 \001(\002B\007\202\265\030\003NaN\022\"\n\017"
    "has_status_text\030\003 \001(\010B\t\202\265\030\005false\022\023\n\013stat"
    "us_text\030\004 \001(\t2\254\007\n\022CalibrationService\022\212\001\n"
    "\026SubscribeCalibrateGyro\0225.mavsdk.rpc.cal"
    "ibration.SubscribeCalibrateGyroRequest\032-"
    ".mavsdk.rpc.calibration.CalibrateGyroRes"
    "ponse\"\010\200\265\030\000\210\265\030\0010\001\022\245\001\n\037SubscribeCalibrate"
    "Accelerometer\022>.mavsdk.rpc.calibration.S"
    "ubscribeCalibrateAccelerometerRequest\0326."
    "mavsdk.rpc.calibration.CalibrateAccelero"
    "meterResponse\"\010\200\265\030\000\210\265\030\0010\001\022\242\001\n\036SubscribeC"
    "alibrateMagnetometer\022=.mavsdk.rpc.calibr"
    "ation.SubscribeCalibrateMagnetometerRequ"
    "est\0325.mavsdk.rpc.calibration.CalibrateMa"
    "gnetometerResponse\"\010\200\265\030\000\210\265\030\0010\001\022\242\001\n\036Subsc"
    "ribeCalibrateLevelHorizon\022=.mavsdk.rpc.c"
    "alibration.SubscribeCalibrateLevelHorizo"
    "nRequest\0325.mavsdk.rpc.calibration.Calibr"
    "ateLevelHorizonResponse\"\010\200\265\030\000\210\265\030\0010\001\022\267\001\n%"
    "SubscribeCalibrateGimbalAccelerometer\022D."
    "mavsdk.rpc.calibration.SubscribeCalibrat"
    "eGimbalAccelerometerRequest\032<.mavsdk.rpc"
    ".calibration.CalibrateGimbalAcceleromete"
    "rResponse\"\010\200\265\030\000\210\265\030\0010\001\022]\n\006Cancel\022%.mavsdk"
    ".rpc.calibration.CancelRequest\032&.mavsdk."
    "rpc.calibration.CancelResponse\"\004\200\265\030\001B)\n\025"
    "io.mavsdk.calibrationB\020CalibrationProtob"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_calibration_2fcalibration_2eproto_deps[1] =
    {
        &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::absl::once_flag descriptor_table_calibration_2fcalibration_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_calibration_2fcalibration_2eproto = {
    false,
    false,
    2727,
    descriptor_table_protodef_calibration_2fcalibration_2eproto,
    "calibration/calibration.proto",
    &descriptor_table_calibration_2fcalibration_2eproto_once,
    descriptor_table_calibration_2fcalibration_2eproto_deps,
    1,
    14,
    schemas,
    file_default_instances,
    TableStruct_calibration_2fcalibration_2eproto::offsets,
    file_level_enum_descriptors_calibration_2fcalibration_2eproto,
    file_level_service_descriptors_calibration_2fcalibration_2eproto,
};
namespace mavsdk {
namespace rpc {
namespace calibration {
const ::google::protobuf::EnumDescriptor* CalibrationResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_calibration_2fcalibration_2eproto);
  return file_level_enum_descriptors_calibration_2fcalibration_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CalibrationResult_Result_internal_data_[] = {
    786432u, 0u, };
bool CalibrationResult_Result_IsValid(int value) {
  return 0 <= value && value <= 11;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CalibrationResult_Result CalibrationResult::RESULT_UNKNOWN;
constexpr CalibrationResult_Result CalibrationResult::RESULT_SUCCESS;
constexpr CalibrationResult_Result CalibrationResult::RESULT_NEXT;
constexpr CalibrationResult_Result CalibrationResult::RESULT_FAILED;
constexpr CalibrationResult_Result CalibrationResult::RESULT_NO_SYSTEM;
constexpr CalibrationResult_Result CalibrationResult::RESULT_CONNECTION_ERROR;
constexpr CalibrationResult_Result CalibrationResult::RESULT_BUSY;
constexpr CalibrationResult_Result CalibrationResult::RESULT_COMMAND_DENIED;
constexpr CalibrationResult_Result CalibrationResult::RESULT_TIMEOUT;
constexpr CalibrationResult_Result CalibrationResult::RESULT_CANCELLED;
constexpr CalibrationResult_Result CalibrationResult::RESULT_FAILED_ARMED;
constexpr CalibrationResult_Result CalibrationResult::RESULT_UNSUPPORTED;
constexpr CalibrationResult_Result CalibrationResult::Result_MIN;
constexpr CalibrationResult_Result CalibrationResult::Result_MAX;
constexpr int CalibrationResult::Result_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SubscribeCalibrateGyroRequest::_Internal {
 public:
};

SubscribeCalibrateGyroRequest::SubscribeCalibrateGyroRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
}
SubscribeCalibrateGyroRequest::SubscribeCalibrateGyroRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCalibrateGyroRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeCalibrateGyroRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
}

inline void* SubscribeCalibrateGyroRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeCalibrateGyroRequest(arena);
}
constexpr auto SubscribeCalibrateGyroRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeCalibrateGyroRequest),
                                            alignof(SubscribeCalibrateGyroRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeCalibrateGyroRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeCalibrateGyroRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeCalibrateGyroRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeCalibrateGyroRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeCalibrateGyroRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeCalibrateGyroRequest>(), &SubscribeCalibrateGyroRequest::ByteSizeLong,
            &SubscribeCalibrateGyroRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeCalibrateGyroRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeCalibrateGyroRequest::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeCalibrateGyroRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeCalibrateGyroRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeCalibrateGyroRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CalibrateGyroResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CalibrateGyroResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_._has_bits_);
};

CalibrateGyroResponse::CalibrateGyroResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CalibrateGyroResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateGyroResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CalibrateGyroResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CalibrateGyroResponse::CalibrateGyroResponse(
    ::google::protobuf::Arena* arena,
    const CalibrateGyroResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CalibrateGyroResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.calibration_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(
                              arena, *from._impl_.calibration_result_)
                        : nullptr;
  _impl_.progress_data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(
                              arena, *from._impl_.progress_data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateGyroResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateGyroResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalibrateGyroResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, calibration_result_),
           0,
           offsetof(Impl_, progress_data_) -
               offsetof(Impl_, calibration_result_) +
               sizeof(Impl_::progress_data_));
}
CalibrateGyroResponse::~CalibrateGyroResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateGyroResponse)
  SharedDtor(*this);
}
inline void CalibrateGyroResponse::SharedDtor(MessageLite& self) {
  CalibrateGyroResponse& this_ = static_cast<CalibrateGyroResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.calibration_result_;
  delete this_._impl_.progress_data_;
  this_._impl_.~Impl_();
}

inline void* CalibrateGyroResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CalibrateGyroResponse(arena);
}
constexpr auto CalibrateGyroResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CalibrateGyroResponse),
                                            alignof(CalibrateGyroResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CalibrateGyroResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CalibrateGyroResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CalibrateGyroResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CalibrateGyroResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CalibrateGyroResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CalibrateGyroResponse>(), &CalibrateGyroResponse::ByteSizeLong,
            &CalibrateGyroResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_._cached_size_),
        false,
    },
    &CalibrateGyroResponse::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CalibrateGyroResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CalibrateGyroResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrateGyroResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_.progress_data_)}},
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_.calibration_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_.calibration_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_.progress_data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::ProgressData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CalibrateGyroResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.calibration_result_ != nullptr);
      _impl_.calibration_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.progress_data_ != nullptr);
      _impl_.progress_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CalibrateGyroResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CalibrateGyroResponse& this_ = static_cast<const CalibrateGyroResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CalibrateGyroResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CalibrateGyroResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.calibration_result_, this_._impl_.calibration_result_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.progress_data_, this_._impl_.progress_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateGyroResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CalibrateGyroResponse::ByteSizeLong(const MessageLite& base) {
          const CalibrateGyroResponse& this_ = static_cast<const CalibrateGyroResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CalibrateGyroResponse::ByteSizeLong() const {
          const CalibrateGyroResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.calibration_result_);
            }
            // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.progress_data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CalibrateGyroResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CalibrateGyroResponse*>(&to_msg);
  auto& from = static_cast<const CalibrateGyroResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.calibration_result_ != nullptr);
      if (_this->_impl_.calibration_result_ == nullptr) {
        _this->_impl_.calibration_result_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(arena, *from._impl_.calibration_result_);
      } else {
        _this->_impl_.calibration_result_->MergeFrom(*from._impl_.calibration_result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.progress_data_ != nullptr);
      if (_this->_impl_.progress_data_ == nullptr) {
        _this->_impl_.progress_data_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(arena, *from._impl_.progress_data_);
      } else {
        _this->_impl_.progress_data_->MergeFrom(*from._impl_.progress_data_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrateGyroResponse::CopyFrom(const CalibrateGyroResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CalibrateGyroResponse::InternalSwap(CalibrateGyroResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_.progress_data_)
      + sizeof(CalibrateGyroResponse::_impl_.progress_data_)
      - PROTOBUF_FIELD_OFFSET(CalibrateGyroResponse, _impl_.calibration_result_)>(
          reinterpret_cast<char*>(&_impl_.calibration_result_),
          reinterpret_cast<char*>(&other->_impl_.calibration_result_));
}

::google::protobuf::Metadata CalibrateGyroResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribeCalibrateAccelerometerRequest::_Internal {
 public:
};

SubscribeCalibrateAccelerometerRequest::SubscribeCalibrateAccelerometerRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
}
SubscribeCalibrateAccelerometerRequest::SubscribeCalibrateAccelerometerRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCalibrateAccelerometerRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeCalibrateAccelerometerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
}

inline void* SubscribeCalibrateAccelerometerRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeCalibrateAccelerometerRequest(arena);
}
constexpr auto SubscribeCalibrateAccelerometerRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeCalibrateAccelerometerRequest),
                                            alignof(SubscribeCalibrateAccelerometerRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeCalibrateAccelerometerRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeCalibrateAccelerometerRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeCalibrateAccelerometerRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeCalibrateAccelerometerRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeCalibrateAccelerometerRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeCalibrateAccelerometerRequest>(), &SubscribeCalibrateAccelerometerRequest::ByteSizeLong,
            &SubscribeCalibrateAccelerometerRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeCalibrateAccelerometerRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeCalibrateAccelerometerRequest::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeCalibrateAccelerometerRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeCalibrateAccelerometerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeCalibrateAccelerometerRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CalibrateAccelerometerResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CalibrateAccelerometerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_._has_bits_);
};

CalibrateAccelerometerResponse::CalibrateAccelerometerResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateAccelerometerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CalibrateAccelerometerResponse::CalibrateAccelerometerResponse(
    ::google::protobuf::Arena* arena,
    const CalibrateAccelerometerResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CalibrateAccelerometerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.calibration_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(
                              arena, *from._impl_.calibration_result_)
                        : nullptr;
  _impl_.progress_data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(
                              arena, *from._impl_.progress_data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateAccelerometerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalibrateAccelerometerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, calibration_result_),
           0,
           offsetof(Impl_, progress_data_) -
               offsetof(Impl_, calibration_result_) +
               sizeof(Impl_::progress_data_));
}
CalibrateAccelerometerResponse::~CalibrateAccelerometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  SharedDtor(*this);
}
inline void CalibrateAccelerometerResponse::SharedDtor(MessageLite& self) {
  CalibrateAccelerometerResponse& this_ = static_cast<CalibrateAccelerometerResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.calibration_result_;
  delete this_._impl_.progress_data_;
  this_._impl_.~Impl_();
}

inline void* CalibrateAccelerometerResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CalibrateAccelerometerResponse(arena);
}
constexpr auto CalibrateAccelerometerResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CalibrateAccelerometerResponse),
                                            alignof(CalibrateAccelerometerResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CalibrateAccelerometerResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CalibrateAccelerometerResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CalibrateAccelerometerResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CalibrateAccelerometerResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CalibrateAccelerometerResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CalibrateAccelerometerResponse>(), &CalibrateAccelerometerResponse::ByteSizeLong,
            &CalibrateAccelerometerResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_._cached_size_),
        false,
    },
    &CalibrateAccelerometerResponse::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CalibrateAccelerometerResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CalibrateAccelerometerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrateAccelerometerResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_.progress_data_)}},
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_.calibration_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_.calibration_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_.progress_data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::ProgressData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CalibrateAccelerometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.calibration_result_ != nullptr);
      _impl_.calibration_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.progress_data_ != nullptr);
      _impl_.progress_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CalibrateAccelerometerResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CalibrateAccelerometerResponse& this_ = static_cast<const CalibrateAccelerometerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CalibrateAccelerometerResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CalibrateAccelerometerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.calibration_result_, this_._impl_.calibration_result_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.progress_data_, this_._impl_.progress_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CalibrateAccelerometerResponse::ByteSizeLong(const MessageLite& base) {
          const CalibrateAccelerometerResponse& this_ = static_cast<const CalibrateAccelerometerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CalibrateAccelerometerResponse::ByteSizeLong() const {
          const CalibrateAccelerometerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.calibration_result_);
            }
            // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.progress_data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CalibrateAccelerometerResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CalibrateAccelerometerResponse*>(&to_msg);
  auto& from = static_cast<const CalibrateAccelerometerResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.calibration_result_ != nullptr);
      if (_this->_impl_.calibration_result_ == nullptr) {
        _this->_impl_.calibration_result_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(arena, *from._impl_.calibration_result_);
      } else {
        _this->_impl_.calibration_result_->MergeFrom(*from._impl_.calibration_result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.progress_data_ != nullptr);
      if (_this->_impl_.progress_data_ == nullptr) {
        _this->_impl_.progress_data_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(arena, *from._impl_.progress_data_);
      } else {
        _this->_impl_.progress_data_->MergeFrom(*from._impl_.progress_data_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrateAccelerometerResponse::CopyFrom(const CalibrateAccelerometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CalibrateAccelerometerResponse::InternalSwap(CalibrateAccelerometerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_.progress_data_)
      + sizeof(CalibrateAccelerometerResponse::_impl_.progress_data_)
      - PROTOBUF_FIELD_OFFSET(CalibrateAccelerometerResponse, _impl_.calibration_result_)>(
          reinterpret_cast<char*>(&_impl_.calibration_result_),
          reinterpret_cast<char*>(&other->_impl_.calibration_result_));
}

::google::protobuf::Metadata CalibrateAccelerometerResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribeCalibrateMagnetometerRequest::_Internal {
 public:
};

SubscribeCalibrateMagnetometerRequest::SubscribeCalibrateMagnetometerRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
}
SubscribeCalibrateMagnetometerRequest::SubscribeCalibrateMagnetometerRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCalibrateMagnetometerRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeCalibrateMagnetometerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
}

inline void* SubscribeCalibrateMagnetometerRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeCalibrateMagnetometerRequest(arena);
}
constexpr auto SubscribeCalibrateMagnetometerRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeCalibrateMagnetometerRequest),
                                            alignof(SubscribeCalibrateMagnetometerRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeCalibrateMagnetometerRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeCalibrateMagnetometerRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeCalibrateMagnetometerRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeCalibrateMagnetometerRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeCalibrateMagnetometerRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeCalibrateMagnetometerRequest>(), &SubscribeCalibrateMagnetometerRequest::ByteSizeLong,
            &SubscribeCalibrateMagnetometerRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeCalibrateMagnetometerRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeCalibrateMagnetometerRequest::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeCalibrateMagnetometerRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeCalibrateMagnetometerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeCalibrateMagnetometerRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CalibrateMagnetometerResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CalibrateMagnetometerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_._has_bits_);
};

CalibrateMagnetometerResponse::CalibrateMagnetometerResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateMagnetometerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CalibrateMagnetometerResponse::CalibrateMagnetometerResponse(
    ::google::protobuf::Arena* arena,
    const CalibrateMagnetometerResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CalibrateMagnetometerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.calibration_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(
                              arena, *from._impl_.calibration_result_)
                        : nullptr;
  _impl_.progress_data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(
                              arena, *from._impl_.progress_data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateMagnetometerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalibrateMagnetometerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, calibration_result_),
           0,
           offsetof(Impl_, progress_data_) -
               offsetof(Impl_, calibration_result_) +
               sizeof(Impl_::progress_data_));
}
CalibrateMagnetometerResponse::~CalibrateMagnetometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  SharedDtor(*this);
}
inline void CalibrateMagnetometerResponse::SharedDtor(MessageLite& self) {
  CalibrateMagnetometerResponse& this_ = static_cast<CalibrateMagnetometerResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.calibration_result_;
  delete this_._impl_.progress_data_;
  this_._impl_.~Impl_();
}

inline void* CalibrateMagnetometerResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CalibrateMagnetometerResponse(arena);
}
constexpr auto CalibrateMagnetometerResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CalibrateMagnetometerResponse),
                                            alignof(CalibrateMagnetometerResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CalibrateMagnetometerResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CalibrateMagnetometerResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CalibrateMagnetometerResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CalibrateMagnetometerResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CalibrateMagnetometerResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CalibrateMagnetometerResponse>(), &CalibrateMagnetometerResponse::ByteSizeLong,
            &CalibrateMagnetometerResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_._cached_size_),
        false,
    },
    &CalibrateMagnetometerResponse::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CalibrateMagnetometerResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CalibrateMagnetometerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrateMagnetometerResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_.progress_data_)}},
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_.calibration_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_.calibration_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_.progress_data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::ProgressData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CalibrateMagnetometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.calibration_result_ != nullptr);
      _impl_.calibration_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.progress_data_ != nullptr);
      _impl_.progress_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CalibrateMagnetometerResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CalibrateMagnetometerResponse& this_ = static_cast<const CalibrateMagnetometerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CalibrateMagnetometerResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CalibrateMagnetometerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.calibration_result_, this_._impl_.calibration_result_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.progress_data_, this_._impl_.progress_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CalibrateMagnetometerResponse::ByteSizeLong(const MessageLite& base) {
          const CalibrateMagnetometerResponse& this_ = static_cast<const CalibrateMagnetometerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CalibrateMagnetometerResponse::ByteSizeLong() const {
          const CalibrateMagnetometerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.calibration_result_);
            }
            // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.progress_data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CalibrateMagnetometerResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CalibrateMagnetometerResponse*>(&to_msg);
  auto& from = static_cast<const CalibrateMagnetometerResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.calibration_result_ != nullptr);
      if (_this->_impl_.calibration_result_ == nullptr) {
        _this->_impl_.calibration_result_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(arena, *from._impl_.calibration_result_);
      } else {
        _this->_impl_.calibration_result_->MergeFrom(*from._impl_.calibration_result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.progress_data_ != nullptr);
      if (_this->_impl_.progress_data_ == nullptr) {
        _this->_impl_.progress_data_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(arena, *from._impl_.progress_data_);
      } else {
        _this->_impl_.progress_data_->MergeFrom(*from._impl_.progress_data_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrateMagnetometerResponse::CopyFrom(const CalibrateMagnetometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CalibrateMagnetometerResponse::InternalSwap(CalibrateMagnetometerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_.progress_data_)
      + sizeof(CalibrateMagnetometerResponse::_impl_.progress_data_)
      - PROTOBUF_FIELD_OFFSET(CalibrateMagnetometerResponse, _impl_.calibration_result_)>(
          reinterpret_cast<char*>(&_impl_.calibration_result_),
          reinterpret_cast<char*>(&other->_impl_.calibration_result_));
}

::google::protobuf::Metadata CalibrateMagnetometerResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribeCalibrateLevelHorizonRequest::_Internal {
 public:
};

SubscribeCalibrateLevelHorizonRequest::SubscribeCalibrateLevelHorizonRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest)
}
SubscribeCalibrateLevelHorizonRequest::SubscribeCalibrateLevelHorizonRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCalibrateLevelHorizonRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeCalibrateLevelHorizonRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest)
}

inline void* SubscribeCalibrateLevelHorizonRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeCalibrateLevelHorizonRequest(arena);
}
constexpr auto SubscribeCalibrateLevelHorizonRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeCalibrateLevelHorizonRequest),
                                            alignof(SubscribeCalibrateLevelHorizonRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeCalibrateLevelHorizonRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeCalibrateLevelHorizonRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeCalibrateLevelHorizonRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeCalibrateLevelHorizonRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeCalibrateLevelHorizonRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeCalibrateLevelHorizonRequest>(), &SubscribeCalibrateLevelHorizonRequest::ByteSizeLong,
            &SubscribeCalibrateLevelHorizonRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeCalibrateLevelHorizonRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeCalibrateLevelHorizonRequest::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeCalibrateLevelHorizonRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeCalibrateLevelHorizonRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::SubscribeCalibrateLevelHorizonRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeCalibrateLevelHorizonRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CalibrateLevelHorizonResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CalibrateLevelHorizonResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_._has_bits_);
};

CalibrateLevelHorizonResponse::CalibrateLevelHorizonResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateLevelHorizonResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CalibrateLevelHorizonResponse::CalibrateLevelHorizonResponse(
    ::google::protobuf::Arena* arena,
    const CalibrateLevelHorizonResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CalibrateLevelHorizonResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.calibration_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(
                              arena, *from._impl_.calibration_result_)
                        : nullptr;
  _impl_.progress_data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(
                              arena, *from._impl_.progress_data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateLevelHorizonResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalibrateLevelHorizonResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, calibration_result_),
           0,
           offsetof(Impl_, progress_data_) -
               offsetof(Impl_, calibration_result_) +
               sizeof(Impl_::progress_data_));
}
CalibrateLevelHorizonResponse::~CalibrateLevelHorizonResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
  SharedDtor(*this);
}
inline void CalibrateLevelHorizonResponse::SharedDtor(MessageLite& self) {
  CalibrateLevelHorizonResponse& this_ = static_cast<CalibrateLevelHorizonResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.calibration_result_;
  delete this_._impl_.progress_data_;
  this_._impl_.~Impl_();
}

inline void* CalibrateLevelHorizonResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CalibrateLevelHorizonResponse(arena);
}
constexpr auto CalibrateLevelHorizonResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CalibrateLevelHorizonResponse),
                                            alignof(CalibrateLevelHorizonResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CalibrateLevelHorizonResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CalibrateLevelHorizonResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CalibrateLevelHorizonResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CalibrateLevelHorizonResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CalibrateLevelHorizonResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CalibrateLevelHorizonResponse>(), &CalibrateLevelHorizonResponse::ByteSizeLong,
            &CalibrateLevelHorizonResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_._cached_size_),
        false,
    },
    &CalibrateLevelHorizonResponse::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CalibrateLevelHorizonResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CalibrateLevelHorizonResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrateLevelHorizonResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_.progress_data_)}},
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_.calibration_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_.calibration_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_.progress_data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::ProgressData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CalibrateLevelHorizonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.calibration_result_ != nullptr);
      _impl_.calibration_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.progress_data_ != nullptr);
      _impl_.progress_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CalibrateLevelHorizonResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CalibrateLevelHorizonResponse& this_ = static_cast<const CalibrateLevelHorizonResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CalibrateLevelHorizonResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CalibrateLevelHorizonResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.calibration_result_, this_._impl_.calibration_result_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.progress_data_, this_._impl_.progress_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CalibrateLevelHorizonResponse::ByteSizeLong(const MessageLite& base) {
          const CalibrateLevelHorizonResponse& this_ = static_cast<const CalibrateLevelHorizonResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CalibrateLevelHorizonResponse::ByteSizeLong() const {
          const CalibrateLevelHorizonResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.calibration_result_);
            }
            // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.progress_data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CalibrateLevelHorizonResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CalibrateLevelHorizonResponse*>(&to_msg);
  auto& from = static_cast<const CalibrateLevelHorizonResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.calibration_result_ != nullptr);
      if (_this->_impl_.calibration_result_ == nullptr) {
        _this->_impl_.calibration_result_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(arena, *from._impl_.calibration_result_);
      } else {
        _this->_impl_.calibration_result_->MergeFrom(*from._impl_.calibration_result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.progress_data_ != nullptr);
      if (_this->_impl_.progress_data_ == nullptr) {
        _this->_impl_.progress_data_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(arena, *from._impl_.progress_data_);
      } else {
        _this->_impl_.progress_data_->MergeFrom(*from._impl_.progress_data_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrateLevelHorizonResponse::CopyFrom(const CalibrateLevelHorizonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateLevelHorizonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CalibrateLevelHorizonResponse::InternalSwap(CalibrateLevelHorizonResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_.progress_data_)
      + sizeof(CalibrateLevelHorizonResponse::_impl_.progress_data_)
      - PROTOBUF_FIELD_OFFSET(CalibrateLevelHorizonResponse, _impl_.calibration_result_)>(
          reinterpret_cast<char*>(&_impl_.calibration_result_),
          reinterpret_cast<char*>(&other->_impl_.calibration_result_));
}

::google::protobuf::Metadata CalibrateLevelHorizonResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribeCalibrateGimbalAccelerometerRequest::_Internal {
 public:
};

SubscribeCalibrateGimbalAccelerometerRequest::SubscribeCalibrateGimbalAccelerometerRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
}
SubscribeCalibrateGimbalAccelerometerRequest::SubscribeCalibrateGimbalAccelerometerRequest(
    ::google::protobuf::Arena* arena,
    const SubscribeCalibrateGimbalAccelerometerRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribeCalibrateGimbalAccelerometerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
}

inline void* SubscribeCalibrateGimbalAccelerometerRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscribeCalibrateGimbalAccelerometerRequest(arena);
}
constexpr auto SubscribeCalibrateGimbalAccelerometerRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribeCalibrateGimbalAccelerometerRequest),
                                            alignof(SubscribeCalibrateGimbalAccelerometerRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscribeCalibrateGimbalAccelerometerRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscribeCalibrateGimbalAccelerometerRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscribeCalibrateGimbalAccelerometerRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SubscribeCalibrateGimbalAccelerometerRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscribeCalibrateGimbalAccelerometerRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SubscribeCalibrateGimbalAccelerometerRequest>(), &SubscribeCalibrateGimbalAccelerometerRequest::ByteSizeLong,
            &SubscribeCalibrateGimbalAccelerometerRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscribeCalibrateGimbalAccelerometerRequest, _impl_._cached_size_),
        false,
    },
    &SubscribeCalibrateGimbalAccelerometerRequest::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscribeCalibrateGimbalAccelerometerRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SubscribeCalibrateGimbalAccelerometerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SubscribeCalibrateGimbalAccelerometerRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CalibrateGimbalAccelerometerResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CalibrateGimbalAccelerometerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_._has_bits_);
};

CalibrateGimbalAccelerometerResponse::CalibrateGimbalAccelerometerResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateGimbalAccelerometerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CalibrateGimbalAccelerometerResponse::CalibrateGimbalAccelerometerResponse(
    ::google::protobuf::Arena* arena,
    const CalibrateGimbalAccelerometerResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CalibrateGimbalAccelerometerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.calibration_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(
                              arena, *from._impl_.calibration_result_)
                        : nullptr;
  _impl_.progress_data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(
                              arena, *from._impl_.progress_data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
}
inline PROTOBUF_NDEBUG_INLINE CalibrateGimbalAccelerometerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CalibrateGimbalAccelerometerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, calibration_result_),
           0,
           offsetof(Impl_, progress_data_) -
               offsetof(Impl_, calibration_result_) +
               sizeof(Impl_::progress_data_));
}
CalibrateGimbalAccelerometerResponse::~CalibrateGimbalAccelerometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  SharedDtor(*this);
}
inline void CalibrateGimbalAccelerometerResponse::SharedDtor(MessageLite& self) {
  CalibrateGimbalAccelerometerResponse& this_ = static_cast<CalibrateGimbalAccelerometerResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.calibration_result_;
  delete this_._impl_.progress_data_;
  this_._impl_.~Impl_();
}

inline void* CalibrateGimbalAccelerometerResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CalibrateGimbalAccelerometerResponse(arena);
}
constexpr auto CalibrateGimbalAccelerometerResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CalibrateGimbalAccelerometerResponse),
                                            alignof(CalibrateGimbalAccelerometerResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CalibrateGimbalAccelerometerResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CalibrateGimbalAccelerometerResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CalibrateGimbalAccelerometerResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CalibrateGimbalAccelerometerResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CalibrateGimbalAccelerometerResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CalibrateGimbalAccelerometerResponse>(), &CalibrateGimbalAccelerometerResponse::ByteSizeLong,
            &CalibrateGimbalAccelerometerResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_._cached_size_),
        false,
    },
    &CalibrateGimbalAccelerometerResponse::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CalibrateGimbalAccelerometerResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> CalibrateGimbalAccelerometerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_.progress_data_)}},
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_.calibration_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_.calibration_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
    {PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_.progress_data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>()},
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::ProgressData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CalibrateGimbalAccelerometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.calibration_result_ != nullptr);
      _impl_.calibration_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.progress_data_ != nullptr);
      _impl_.progress_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CalibrateGimbalAccelerometerResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CalibrateGimbalAccelerometerResponse& this_ = static_cast<const CalibrateGimbalAccelerometerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CalibrateGimbalAccelerometerResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CalibrateGimbalAccelerometerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.calibration_result_, this_._impl_.calibration_result_->GetCachedSize(), target,
                stream);
          }

          // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.progress_data_, this_._impl_.progress_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CalibrateGimbalAccelerometerResponse::ByteSizeLong(const MessageLite& base) {
          const CalibrateGimbalAccelerometerResponse& this_ = static_cast<const CalibrateGimbalAccelerometerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CalibrateGimbalAccelerometerResponse::ByteSizeLong() const {
          const CalibrateGimbalAccelerometerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.calibration_result_);
            }
            // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.progress_data_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CalibrateGimbalAccelerometerResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CalibrateGimbalAccelerometerResponse*>(&to_msg);
  auto& from = static_cast<const CalibrateGimbalAccelerometerResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.calibration_result_ != nullptr);
      if (_this->_impl_.calibration_result_ == nullptr) {
        _this->_impl_.calibration_result_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(arena, *from._impl_.calibration_result_);
      } else {
        _this->_impl_.calibration_result_->MergeFrom(*from._impl_.calibration_result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.progress_data_ != nullptr);
      if (_this->_impl_.progress_data_ == nullptr) {
        _this->_impl_.progress_data_ =
            ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::ProgressData>(arena, *from._impl_.progress_data_);
      } else {
        _this->_impl_.progress_data_->MergeFrom(*from._impl_.progress_data_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrateGimbalAccelerometerResponse::CopyFrom(const CalibrateGimbalAccelerometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CalibrateGimbalAccelerometerResponse::InternalSwap(CalibrateGimbalAccelerometerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_.progress_data_)
      + sizeof(CalibrateGimbalAccelerometerResponse::_impl_.progress_data_)
      - PROTOBUF_FIELD_OFFSET(CalibrateGimbalAccelerometerResponse, _impl_.calibration_result_)>(
          reinterpret_cast<char*>(&_impl_.calibration_result_),
          reinterpret_cast<char*>(&other->_impl_.calibration_result_));
}

::google::protobuf::Metadata CalibrateGimbalAccelerometerResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CancelRequest::_Internal {
 public:
};

CancelRequest::CancelRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CancelRequest)
}
CancelRequest::CancelRequest(
    ::google::protobuf::Arena* arena,
    const CancelRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CancelRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CancelRequest)
}

inline void* CancelRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CancelRequest(arena);
}
constexpr auto CancelRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CancelRequest),
                                            alignof(CancelRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CancelRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CancelRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CancelRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<CancelRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CancelRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<CancelRequest>(), &CancelRequest::ByteSizeLong,
            &CancelRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CancelRequest, _impl_._cached_size_),
        false,
    },
    &CancelRequest::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CancelRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> CancelRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CancelRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata CancelRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CancelResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CancelResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CancelResponse, _impl_._has_bits_);
};

CancelResponse::CancelResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CancelResponse)
}
inline PROTOBUF_NDEBUG_INLINE CancelResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CancelResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CancelResponse::CancelResponse(
    ::google::protobuf::Arena* arena,
    const CancelResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CancelResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.calibration_result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(
                              arena, *from._impl_.calibration_result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CancelResponse)
}
inline PROTOBUF_NDEBUG_INLINE CancelResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CancelResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.calibration_result_ = {};
}
CancelResponse::~CancelResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CancelResponse)
  SharedDtor(*this);
}
inline void CancelResponse::SharedDtor(MessageLite& self) {
  CancelResponse& this_ = static_cast<CancelResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.calibration_result_;
  this_._impl_.~Impl_();
}

inline void* CancelResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CancelResponse(arena);
}
constexpr auto CancelResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CancelResponse),
                                            alignof(CancelResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CancelResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CancelResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CancelResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CancelResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CancelResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CancelResponse>(), &CancelResponse::ByteSizeLong,
            &CancelResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CancelResponse, _impl_._cached_size_),
        false,
    },
    &CancelResponse::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CancelResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CancelResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CancelResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CancelResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CancelResponse, _impl_.calibration_result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
    {PROTOBUF_FIELD_OFFSET(CancelResponse, _impl_.calibration_result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CancelResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.calibration_result_ != nullptr);
    _impl_.calibration_result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CancelResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CancelResponse& this_ = static_cast<const CancelResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CancelResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CancelResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CancelResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.calibration_result_, this_._impl_.calibration_result_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CancelResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CancelResponse::ByteSizeLong(const MessageLite& base) {
          const CancelResponse& this_ = static_cast<const CancelResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CancelResponse::ByteSizeLong() const {
          const CancelResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CancelResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.calibration_result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CancelResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CancelResponse*>(&to_msg);
  auto& from = static_cast<const CancelResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CancelResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.calibration_result_ != nullptr);
    if (_this->_impl_.calibration_result_ == nullptr) {
      _this->_impl_.calibration_result_ =
          ::google::protobuf::Message::CopyConstruct<::mavsdk::rpc::calibration::CalibrationResult>(arena, *from._impl_.calibration_result_);
    } else {
      _this->_impl_.calibration_result_->MergeFrom(*from._impl_.calibration_result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CancelResponse::CopyFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CancelResponse::InternalSwap(CancelResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.calibration_result_, other->_impl_.calibration_result_);
}

::google::protobuf::Metadata CancelResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CalibrationResult::_Internal {
 public:
};

CalibrationResult::CalibrationResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.CalibrationResult)
}
inline PROTOBUF_NDEBUG_INLINE CalibrationResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::CalibrationResult& from_msg)
      : result_str_(arena, from.result_str_),
        _cached_size_{0} {}

CalibrationResult::CalibrationResult(
    ::google::protobuf::Arena* arena,
    const CalibrationResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CalibrationResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.result_ = from._impl_.result_;

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrationResult)
}
inline PROTOBUF_NDEBUG_INLINE CalibrationResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : result_str_(arena),
        _cached_size_{0} {}

inline void CalibrationResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
CalibrationResult::~CalibrationResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrationResult)
  SharedDtor(*this);
}
inline void CalibrationResult::SharedDtor(MessageLite& self) {
  CalibrationResult& this_ = static_cast<CalibrationResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.result_str_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CalibrationResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CalibrationResult(arena);
}
constexpr auto CalibrationResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CalibrationResult),
                                            alignof(CalibrationResult));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CalibrationResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CalibrationResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CalibrationResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CalibrationResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CalibrationResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CalibrationResult>(), &CalibrationResult::ByteSizeLong,
            &CalibrationResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CalibrationResult, _impl_._cached_size_),
        false,
    },
    &CalibrationResult::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CalibrationResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2> CalibrationResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::CalibrationResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string result_str = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CalibrationResult, _impl_.result_str_)}},
    // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CalibrationResult, _impl_.result_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CalibrationResult, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(CalibrationResult, _impl_.result_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string result_str = 2;
    {PROTOBUF_FIELD_OFFSET(CalibrationResult, _impl_.result_str_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\0\12\0\0\0\0\0"
    "mavsdk.rpc.calibration.CalibrationResult"
    "result_str"
  }},
};

PROTOBUF_NOINLINE void CalibrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrationResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_str_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CalibrationResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CalibrationResult& this_ = static_cast<const CalibrationResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CalibrationResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CalibrationResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrationResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
          if (this_._internal_result() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_result(), target);
          }

          // string result_str = 2;
          if (!this_._internal_result_str().empty()) {
            const std::string& _s = this_._internal_result_str();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.calibration.CalibrationResult.result_str");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrationResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CalibrationResult::ByteSizeLong(const MessageLite& base) {
          const CalibrationResult& this_ = static_cast<const CalibrationResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CalibrationResult::ByteSizeLong() const {
          const CalibrationResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrationResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string result_str = 2;
            if (!this_._internal_result_str().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_result_str());
            }
            // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
            if (this_._internal_result() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_result());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CalibrationResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CalibrationResult*>(&to_msg);
  auto& from = static_cast<const CalibrationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrationResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _this->_internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _this->_impl_.result_ = from._impl_.result_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CalibrationResult::CopyFrom(const CalibrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CalibrationResult::InternalSwap(CalibrationResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.result_str_, &other->_impl_.result_str_, arena);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata CalibrationResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProgressData::_Internal {
 public:
};

ProgressData::ProgressData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.calibration.ProgressData)
}
inline PROTOBUF_NDEBUG_INLINE ProgressData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mavsdk::rpc::calibration::ProgressData& from_msg)
      : status_text_(arena, from.status_text_),
        _cached_size_{0} {}

ProgressData::ProgressData(
    ::google::protobuf::Arena* arena,
    const ProgressData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ProgressData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, progress_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, progress_),
           offsetof(Impl_, has_status_text_) -
               offsetof(Impl_, progress_) +
               sizeof(Impl_::has_status_text_));

  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.ProgressData)
}
inline PROTOBUF_NDEBUG_INLINE ProgressData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : status_text_(arena),
        _cached_size_{0} {}

inline void ProgressData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, progress_),
           0,
           offsetof(Impl_, has_status_text_) -
               offsetof(Impl_, progress_) +
               sizeof(Impl_::has_status_text_));
}
ProgressData::~ProgressData() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.ProgressData)
  SharedDtor(*this);
}
inline void ProgressData::SharedDtor(MessageLite& self) {
  ProgressData& this_ = static_cast<ProgressData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.status_text_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ProgressData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ProgressData(arena);
}
constexpr auto ProgressData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ProgressData),
                                            alignof(ProgressData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ProgressData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ProgressData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ProgressData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ProgressData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ProgressData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ProgressData>(), &ProgressData::ByteSizeLong,
            &ProgressData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ProgressData, _impl_._cached_size_),
        false,
    },
    &ProgressData::kDescriptorMethods,
    &descriptor_table_calibration_2fcalibration_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ProgressData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 55, 2> ProgressData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mavsdk::rpc::calibration::ProgressData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string status_text = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.status_text_)}},
    // bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ProgressData, _impl_.has_progress_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.has_progress_)}},
    // float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.progress_)}},
    // bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ProgressData, _impl_.has_status_text_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.has_status_text_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.has_progress_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
    {PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.progress_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
    {PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.has_status_text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string status_text = 4;
    {PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.status_text_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\43\0\0\0\13\0\0\0"
    "mavsdk.rpc.calibration.ProgressData"
    "status_text"
  }},
};

PROTOBUF_NOINLINE void ProgressData::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.ProgressData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_text_.ClearToEmpty();
  ::memset(&_impl_.progress_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_status_text_) -
      reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.has_status_text_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ProgressData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ProgressData& this_ = static_cast<const ProgressData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ProgressData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ProgressData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.ProgressData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
          if (this_._internal_has_progress() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_has_progress(), target);
          }

          // float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_progress()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_progress(), target);
          }

          // bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
          if (this_._internal_has_status_text() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_has_status_text(), target);
          }

          // string status_text = 4;
          if (!this_._internal_status_text().empty()) {
            const std::string& _s = this_._internal_status_text();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mavsdk.rpc.calibration.ProgressData.status_text");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.ProgressData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ProgressData::ByteSizeLong(const MessageLite& base) {
          const ProgressData& this_ = static_cast<const ProgressData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ProgressData::ByteSizeLong() const {
          const ProgressData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.ProgressData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string status_text = 4;
            if (!this_._internal_status_text().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status_text());
            }
            // float progress = 2 [(.mavsdk.options.default_value) = "NaN"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_progress()) != 0) {
              total_size += 5;
            }
            // bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];
            if (this_._internal_has_progress() != 0) {
              total_size += 2;
            }
            // bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];
            if (this_._internal_has_status_text() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ProgressData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProgressData*>(&to_msg);
  auto& from = static_cast<const ProgressData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.ProgressData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_text().empty()) {
    _this->_internal_set_status_text(from._internal_status_text());
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_progress()) != 0) {
    _this->_impl_.progress_ = from._impl_.progress_;
  }
  if (from._internal_has_progress() != 0) {
    _this->_impl_.has_progress_ = from._impl_.has_progress_;
  }
  if (from._internal_has_status_text() != 0) {
    _this->_impl_.has_status_text_ = from._impl_.has_status_text_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProgressData::CopyFrom(const ProgressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.ProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ProgressData::InternalSwap(ProgressData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_text_, &other->_impl_.status_text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.has_status_text_)
      + sizeof(ProgressData::_impl_.has_status_text_)
      - PROTOBUF_FIELD_OFFSET(ProgressData, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::google::protobuf::Metadata ProgressData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_calibration_2fcalibration_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
