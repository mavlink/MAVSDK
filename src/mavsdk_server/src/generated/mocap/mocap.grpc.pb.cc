// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mocap/mocap.proto

#include "mocap/mocap.pb.h"
#include "mocap/mocap.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace mocap {

static const char* MocapService_method_names[] = {
  "/mavsdk.rpc.mocap.MocapService/SetVisionPositionEstimate",
  "/mavsdk.rpc.mocap.MocapService/SetVisionSpeedEstimate",
  "/mavsdk.rpc.mocap.MocapService/SetAttitudePositionMocap",
  "/mavsdk.rpc.mocap.MocapService/SetOdometry",
};

std::unique_ptr< MocapService::Stub> MocapService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MocapService::Stub> stub(new MocapService::Stub(channel, options));
  return stub;
}

MocapService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetVisionPositionEstimate_(MocapService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVisionSpeedEstimate_(MocapService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAttitudePositionMocap_(MocapService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOdometry_(MocapService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MocapService::Stub::SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVisionPositionEstimate_, context, request, response);
}

void MocapService::Stub::async::SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisionPositionEstimate_, context, request, response, std::move(f));
}

void MocapService::Stub::async::SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisionPositionEstimate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* MocapService::Stub::PrepareAsyncSetVisionPositionEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVisionPositionEstimate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* MocapService::Stub::AsyncSetVisionPositionEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVisionPositionEstimateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MocapService::Stub::SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVisionSpeedEstimate_, context, request, response);
}

void MocapService::Stub::async::SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisionSpeedEstimate_, context, request, response, std::move(f));
}

void MocapService::Stub::async::SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisionSpeedEstimate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* MocapService::Stub::PrepareAsyncSetVisionSpeedEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVisionSpeedEstimate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* MocapService::Stub::AsyncSetVisionSpeedEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVisionSpeedEstimateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MocapService::Stub::SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAttitudePositionMocap_, context, request, response);
}

void MocapService::Stub::async::SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAttitudePositionMocap_, context, request, response, std::move(f));
}

void MocapService::Stub::async::SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAttitudePositionMocap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* MocapService::Stub::PrepareAsyncSetAttitudePositionMocapRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAttitudePositionMocap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* MocapService::Stub::AsyncSetAttitudePositionMocapRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAttitudePositionMocapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MocapService::Stub::SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::mavsdk::rpc::mocap::SetOdometryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOdometry_, context, request, response);
}

void MocapService::Stub::async::SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOdometry_, context, request, response, std::move(f));
}

void MocapService::Stub::async::SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOdometry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>* MocapService::Stub::PrepareAsyncSetOdometryRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::mocap::SetOdometryResponse, ::mavsdk::rpc::mocap::SetOdometryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOdometry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>* MocapService::Stub::AsyncSetOdometryRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOdometryRaw(context, request, cq);
  result->StartCall();
  return result;
}

MocapService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MocapService::Service, ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MocapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* req,
             ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* resp) {
               return service->SetVisionPositionEstimate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MocapService::Service, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MocapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* req,
             ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* resp) {
               return service->SetVisionSpeedEstimate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MocapService::Service, ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MocapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* req,
             ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* resp) {
               return service->SetAttitudePositionMocap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MocapService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MocapService::Service, ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MocapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::mocap::SetOdometryRequest* req,
             ::mavsdk::rpc::mocap::SetOdometryResponse* resp) {
               return service->SetOdometry(ctx, req, resp);
             }, this)));
}

MocapService::Service::~Service() {
}

::grpc::Status MocapService::Service::SetVisionPositionEstimate(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MocapService::Service::SetVisionSpeedEstimate(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MocapService::Service::SetAttitudePositionMocap(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MocapService::Service::SetOdometry(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace mocap

