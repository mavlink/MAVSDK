// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mocap/mocap.proto
#ifndef GRPC_mocap_2fmocap_2eproto__INCLUDED
#define GRPC_mocap_2fmocap_2eproto__INCLUDED

#include "mocap/mocap.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace mocap {

//
// Allows interfacing a vehicle with a motion capture system in
// order to allow navigation without global positioning sources available
// (e.g. indoors, or when flying under a bridge. etc.).
class MocapService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.mocap.MocapService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Send Global position/attitude estimate from a vision source.
    virtual ::grpc::Status SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>> AsyncSetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>>(AsyncSetVisionPositionEstimateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>> PrepareAsyncSetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>>(PrepareAsyncSetVisionPositionEstimateRaw(context, request, cq));
    }
    // Send Global speed estimate from a vision source.
    virtual ::grpc::Status SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>> AsyncSetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>>(AsyncSetVisionSpeedEstimateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>> PrepareAsyncSetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>>(PrepareAsyncSetVisionSpeedEstimateRaw(context, request, cq));
    }
    // Send motion capture attitude and position.
    virtual ::grpc::Status SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>> AsyncSetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>>(AsyncSetAttitudePositionMocapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>> PrepareAsyncSetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>>(PrepareAsyncSetAttitudePositionMocapRaw(context, request, cq));
    }
    // Send odometry information with an external interface.
    virtual ::grpc::Status SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::mavsdk::rpc::mocap::SetOdometryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetOdometryResponse>> AsyncSetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetOdometryResponse>>(AsyncSetOdometryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetOdometryResponse>> PrepareAsyncSetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetOdometryResponse>>(PrepareAsyncSetOdometryRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Send Global position/attitude estimate from a vision source.
      virtual void SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Send Global speed estimate from a vision source.
      virtual void SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Send motion capture attitude and position.
      virtual void SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Send odometry information with an external interface.
      virtual void SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* AsyncSetVisionPositionEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* PrepareAsyncSetVisionPositionEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* AsyncSetVisionSpeedEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* PrepareAsyncSetVisionSpeedEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* AsyncSetAttitudePositionMocapRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* PrepareAsyncSetAttitudePositionMocapRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetOdometryResponse>* AsyncSetOdometryRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mocap::SetOdometryResponse>* PrepareAsyncSetOdometryRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>> AsyncSetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>>(AsyncSetVisionPositionEstimateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>> PrepareAsyncSetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>>(PrepareAsyncSetVisionPositionEstimateRaw(context, request, cq));
    }
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>> AsyncSetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>>(AsyncSetVisionSpeedEstimateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>> PrepareAsyncSetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>>(PrepareAsyncSetVisionSpeedEstimateRaw(context, request, cq));
    }
    ::grpc::Status SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>> AsyncSetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>>(AsyncSetAttitudePositionMocapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>> PrepareAsyncSetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>>(PrepareAsyncSetAttitudePositionMocapRaw(context, request, cq));
    }
    ::grpc::Status SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::mavsdk::rpc::mocap::SetOdometryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>> AsyncSetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>>(AsyncSetOdometryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>> PrepareAsyncSetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>>(PrepareAsyncSetOdometryRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response, std::function<void(::grpc::Status)>) override;
      void SetVisionPositionEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response, std::function<void(::grpc::Status)>) override;
      void SetVisionSpeedEstimate(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAttitudePositionMocap(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response, std::function<void(::grpc::Status)>) override;
      void SetOdometry(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* AsyncSetVisionPositionEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* PrepareAsyncSetVisionPositionEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* AsyncSetVisionSpeedEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* PrepareAsyncSetVisionSpeedEstimateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* AsyncSetAttitudePositionMocapRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* PrepareAsyncSetAttitudePositionMocapRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>* AsyncSetOdometryRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mocap::SetOdometryResponse>* PrepareAsyncSetOdometryRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetVisionPositionEstimate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetVisionSpeedEstimate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAttitudePositionMocap_;
    const ::grpc::internal::RpcMethod rpcmethod_SetOdometry_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Send Global position/attitude estimate from a vision source.
    virtual ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response);
    // Send Global speed estimate from a vision source.
    virtual ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response);
    // Send motion capture attitude and position.
    virtual ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response);
    // Send odometry information with an external interface.
    virtual ::grpc::Status SetOdometry(::grpc::ServerContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetVisionPositionEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetVisionPositionEstimate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetVisionPositionEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVisionPositionEstimate(::grpc::ServerContext* context, ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetVisionSpeedEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetVisionSpeedEstimate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetVisionSpeedEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVisionSpeedEstimate(::grpc::ServerContext* context, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAttitudePositionMocap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAttitudePositionMocap() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetAttitudePositionMocap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAttitudePositionMocap(::grpc::ServerContext* context, ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetOdometry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetOdometry() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetOdometry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOdometry(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOdometry(::grpc::ServerContext* context, ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::mocap::SetOdometryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetVisionPositionEstimate<WithAsyncMethod_SetVisionSpeedEstimate<WithAsyncMethod_SetAttitudePositionMocap<WithAsyncMethod_SetOdometry<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetVisionPositionEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetVisionPositionEstimate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* response) { return this->SetVisionPositionEstimate(context, request, response); }));}
    void SetMessageAllocatorFor_SetVisionPositionEstimate(
        ::grpc::MessageAllocator< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetVisionPositionEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetVisionPositionEstimate(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetVisionSpeedEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetVisionSpeedEstimate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* request, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* response) { return this->SetVisionSpeedEstimate(context, request, response); }));}
    void SetMessageAllocatorFor_SetVisionSpeedEstimate(
        ::grpc::MessageAllocator< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetVisionSpeedEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetVisionSpeedEstimate(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAttitudePositionMocap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAttitudePositionMocap() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* request, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* response) { return this->SetAttitudePositionMocap(context, request, response); }));}
    void SetMessageAllocatorFor_SetAttitudePositionMocap(
        ::grpc::MessageAllocator< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAttitudePositionMocap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAttitudePositionMocap(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetOdometry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetOdometry() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mocap::SetOdometryRequest* request, ::mavsdk::rpc::mocap::SetOdometryResponse* response) { return this->SetOdometry(context, request, response); }));}
    void SetMessageAllocatorFor_SetOdometry(
        ::grpc::MessageAllocator< ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetOdometry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOdometry(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetOdometry(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetVisionPositionEstimate<WithCallbackMethod_SetVisionSpeedEstimate<WithCallbackMethod_SetAttitudePositionMocap<WithCallbackMethod_SetOdometry<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetVisionPositionEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetVisionPositionEstimate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetVisionPositionEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetVisionSpeedEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetVisionSpeedEstimate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetVisionSpeedEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAttitudePositionMocap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAttitudePositionMocap() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetAttitudePositionMocap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetOdometry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetOdometry() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetOdometry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOdometry(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetVisionPositionEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetVisionPositionEstimate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetVisionPositionEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVisionPositionEstimate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetVisionSpeedEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetVisionSpeedEstimate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetVisionSpeedEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVisionSpeedEstimate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAttitudePositionMocap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAttitudePositionMocap() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetAttitudePositionMocap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAttitudePositionMocap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetOdometry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetOdometry() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetOdometry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOdometry(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOdometry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetVisionPositionEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetVisionPositionEstimate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetVisionPositionEstimate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetVisionPositionEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetVisionPositionEstimate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetVisionSpeedEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetVisionSpeedEstimate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetVisionSpeedEstimate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetVisionSpeedEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetVisionSpeedEstimate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAttitudePositionMocap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAttitudePositionMocap() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAttitudePositionMocap(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAttitudePositionMocap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAttitudePositionMocap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetOdometry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetOdometry() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetOdometry(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetOdometry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOdometry(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetOdometry(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetVisionPositionEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetVisionPositionEstimate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* streamer) {
                       return this->StreamedSetVisionPositionEstimate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetVisionPositionEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetVisionPositionEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetVisionPositionEstimate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::mocap::SetVisionPositionEstimateRequest,::mavsdk::rpc::mocap::SetVisionPositionEstimateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetVisionSpeedEstimate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetVisionSpeedEstimate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* streamer) {
                       return this->StreamedSetVisionSpeedEstimate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetVisionSpeedEstimate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetVisionSpeedEstimate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest* /*request*/, ::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetVisionSpeedEstimate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::mocap::SetVisionSpeedEstimateRequest,::mavsdk::rpc::mocap::SetVisionSpeedEstimateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAttitudePositionMocap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAttitudePositionMocap() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* streamer) {
                       return this->StreamedSetAttitudePositionMocap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAttitudePositionMocap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAttitudePositionMocap(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest* /*request*/, ::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAttitudePositionMocap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::mocap::SetAttitudePositionMocapRequest,::mavsdk::rpc::mocap::SetAttitudePositionMocapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetOdometry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetOdometry() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::mocap::SetOdometryRequest, ::mavsdk::rpc::mocap::SetOdometryResponse>* streamer) {
                       return this->StreamedSetOdometry(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetOdometry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetOdometry(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mocap::SetOdometryRequest* /*request*/, ::mavsdk::rpc::mocap::SetOdometryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetOdometry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::mocap::SetOdometryRequest,::mavsdk::rpc::mocap::SetOdometryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetVisionPositionEstimate<WithStreamedUnaryMethod_SetVisionSpeedEstimate<WithStreamedUnaryMethod_SetAttitudePositionMocap<WithStreamedUnaryMethod_SetOdometry<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetVisionPositionEstimate<WithStreamedUnaryMethod_SetVisionSpeedEstimate<WithStreamedUnaryMethod_SetAttitudePositionMocap<WithStreamedUnaryMethod_SetOdometry<Service > > > > StreamedService;
};

}  // namespace mocap
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_mocap_2fmocap_2eproto__INCLUDED
