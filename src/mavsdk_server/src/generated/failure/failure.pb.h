// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: failure/failure.proto
// Protobuf C++ Version: 5.29.1

#ifndef failure_2ffailure_2eproto_2epb_2eh
#define failure_2ffailure_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_failure_2ffailure_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_failure_2ffailure_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_failure_2ffailure_2eproto;
namespace mavsdk {
namespace rpc {
namespace failure {
class FailureResult;
struct FailureResultDefaultTypeInternal;
extern FailureResultDefaultTypeInternal _FailureResult_default_instance_;
class InjectRequest;
struct InjectRequestDefaultTypeInternal;
extern InjectRequestDefaultTypeInternal _InjectRequest_default_instance_;
class InjectResponse;
struct InjectResponseDefaultTypeInternal;
extern InjectResponseDefaultTypeInternal _InjectResponse_default_instance_;
}  // namespace failure
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace failure {
enum FailureResult_Result : int {
  FailureResult_Result_RESULT_UNKNOWN = 0,
  FailureResult_Result_RESULT_SUCCESS = 1,
  FailureResult_Result_RESULT_NO_SYSTEM = 2,
  FailureResult_Result_RESULT_CONNECTION_ERROR = 3,
  FailureResult_Result_RESULT_UNSUPPORTED = 4,
  FailureResult_Result_RESULT_DENIED = 5,
  FailureResult_Result_RESULT_DISABLED = 6,
  FailureResult_Result_RESULT_TIMEOUT = 7,
  FailureResult_Result_FailureResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FailureResult_Result_FailureResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FailureResult_Result_IsValid(int value);
extern const uint32_t FailureResult_Result_internal_data_[];
constexpr FailureResult_Result FailureResult_Result_Result_MIN = static_cast<FailureResult_Result>(0);
constexpr FailureResult_Result FailureResult_Result_Result_MAX = static_cast<FailureResult_Result>(7);
constexpr int FailureResult_Result_Result_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
FailureResult_Result_descriptor();
template <typename T>
const std::string& FailureResult_Result_Name(T value) {
  static_assert(std::is_same<T, FailureResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return FailureResult_Result_Name(static_cast<FailureResult_Result>(value));
}
template <>
inline const std::string& FailureResult_Result_Name(FailureResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FailureResult_Result_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool FailureResult_Result_Parse(absl::string_view name, FailureResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FailureResult_Result>(
      FailureResult_Result_descriptor(), name, value);
}
enum FailureUnit : int {
  FAILURE_UNIT_SENSOR_GYRO = 0,
  FAILURE_UNIT_SENSOR_ACCEL = 1,
  FAILURE_UNIT_SENSOR_MAG = 2,
  FAILURE_UNIT_SENSOR_BARO = 3,
  FAILURE_UNIT_SENSOR_GPS = 4,
  FAILURE_UNIT_SENSOR_OPTICAL_FLOW = 5,
  FAILURE_UNIT_SENSOR_VIO = 6,
  FAILURE_UNIT_SENSOR_DISTANCE_SENSOR = 7,
  FAILURE_UNIT_SENSOR_AIRSPEED = 8,
  FAILURE_UNIT_SYSTEM_BATTERY = 100,
  FAILURE_UNIT_SYSTEM_MOTOR = 101,
  FAILURE_UNIT_SYSTEM_SERVO = 102,
  FAILURE_UNIT_SYSTEM_AVOIDANCE = 103,
  FAILURE_UNIT_SYSTEM_RC_SIGNAL = 104,
  FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL = 105,
  FailureUnit_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FailureUnit_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FailureUnit_IsValid(int value);
extern const uint32_t FailureUnit_internal_data_[];
constexpr FailureUnit FailureUnit_MIN = static_cast<FailureUnit>(0);
constexpr FailureUnit FailureUnit_MAX = static_cast<FailureUnit>(105);
constexpr int FailureUnit_ARRAYSIZE = 105 + 1;
const ::google::protobuf::EnumDescriptor*
FailureUnit_descriptor();
template <typename T>
const std::string& FailureUnit_Name(T value) {
  static_assert(std::is_same<T, FailureUnit>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FailureUnit_Name().");
  return ::google::protobuf::internal::NameOfEnum(FailureUnit_descriptor(), value);
}
inline bool FailureUnit_Parse(absl::string_view name, FailureUnit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FailureUnit>(
      FailureUnit_descriptor(), name, value);
}
enum FailureType : int {
  FAILURE_TYPE_OK = 0,
  FAILURE_TYPE_OFF = 1,
  FAILURE_TYPE_STUCK = 2,
  FAILURE_TYPE_GARBAGE = 3,
  FAILURE_TYPE_WRONG = 4,
  FAILURE_TYPE_SLOW = 5,
  FAILURE_TYPE_DELAYED = 6,
  FAILURE_TYPE_INTERMITTENT = 7,
  FailureType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FailureType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FailureType_IsValid(int value);
extern const uint32_t FailureType_internal_data_[];
constexpr FailureType FailureType_MIN = static_cast<FailureType>(0);
constexpr FailureType FailureType_MAX = static_cast<FailureType>(7);
constexpr int FailureType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
FailureType_descriptor();
template <typename T>
const std::string& FailureType_Name(T value) {
  static_assert(std::is_same<T, FailureType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FailureType_Name().");
  return FailureType_Name(static_cast<FailureType>(value));
}
template <>
inline const std::string& FailureType_Name(FailureType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FailureType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool FailureType_Parse(absl::string_view name, FailureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FailureType>(
      FailureType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class InjectRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.failure.InjectRequest) */ {
 public:
  inline InjectRequest() : InjectRequest(nullptr) {}
  ~InjectRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InjectRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InjectRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InjectRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline InjectRequest(const InjectRequest& from) : InjectRequest(nullptr, from) {}
  inline InjectRequest(InjectRequest&& from) noexcept
      : InjectRequest(nullptr, std::move(from)) {}
  inline InjectRequest& operator=(const InjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectRequest& operator=(InjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InjectRequest* internal_default_instance() {
    return reinterpret_cast<const InjectRequest*>(
        &_InjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(InjectRequest& a, InjectRequest& b) { a.Swap(&b); }
  inline void Swap(InjectRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InjectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InjectRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InjectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InjectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InjectRequest& from) { InjectRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InjectRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.failure.InjectRequest"; }

 protected:
  explicit InjectRequest(::google::protobuf::Arena* arena);
  InjectRequest(::google::protobuf::Arena* arena, const InjectRequest& from);
  InjectRequest(::google::protobuf::Arena* arena, InjectRequest&& from) noexcept
      : InjectRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFailureUnitFieldNumber = 1,
    kFailureTypeFieldNumber = 2,
    kInstanceFieldNumber = 3,
  };
  // .mavsdk.rpc.failure.FailureUnit failure_unit = 1;
  void clear_failure_unit() ;
  ::mavsdk::rpc::failure::FailureUnit failure_unit() const;
  void set_failure_unit(::mavsdk::rpc::failure::FailureUnit value);

  private:
  ::mavsdk::rpc::failure::FailureUnit _internal_failure_unit() const;
  void _internal_set_failure_unit(::mavsdk::rpc::failure::FailureUnit value);

  public:
  // .mavsdk.rpc.failure.FailureType failure_type = 2;
  void clear_failure_type() ;
  ::mavsdk::rpc::failure::FailureType failure_type() const;
  void set_failure_type(::mavsdk::rpc::failure::FailureType value);

  private:
  ::mavsdk::rpc::failure::FailureType _internal_failure_type() const;
  void _internal_set_failure_type(::mavsdk::rpc::failure::FailureType value);

  public:
  // int32 instance = 3;
  void clear_instance() ;
  ::int32_t instance() const;
  void set_instance(::int32_t value);

  private:
  ::int32_t _internal_instance() const;
  void _internal_set_instance(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.failure.InjectRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InjectRequest& from_msg);
    int failure_unit_;
    int failure_type_;
    ::int32_t instance_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_failure_2ffailure_2eproto;
};
// -------------------------------------------------------------------

class FailureResult final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.failure.FailureResult) */ {
 public:
  inline FailureResult() : FailureResult(nullptr) {}
  ~FailureResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FailureResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FailureResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FailureResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline FailureResult(const FailureResult& from) : FailureResult(nullptr, from) {}
  inline FailureResult(FailureResult&& from) noexcept
      : FailureResult(nullptr, std::move(from)) {}
  inline FailureResult& operator=(const FailureResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FailureResult& operator=(FailureResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FailureResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const FailureResult* internal_default_instance() {
    return reinterpret_cast<const FailureResult*>(
        &_FailureResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FailureResult& a, FailureResult& b) { a.Swap(&b); }
  inline void Swap(FailureResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FailureResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FailureResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FailureResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FailureResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FailureResult& from) { FailureResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FailureResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.failure.FailureResult"; }

 protected:
  explicit FailureResult(::google::protobuf::Arena* arena);
  FailureResult(::google::protobuf::Arena* arena, const FailureResult& from);
  FailureResult(::google::protobuf::Arena* arena, FailureResult&& from) noexcept
      : FailureResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Result = FailureResult_Result;
  static constexpr Result RESULT_UNKNOWN = FailureResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = FailureResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM = FailureResult_Result_RESULT_NO_SYSTEM;
  static constexpr Result RESULT_CONNECTION_ERROR = FailureResult_Result_RESULT_CONNECTION_ERROR;
  static constexpr Result RESULT_UNSUPPORTED = FailureResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_DENIED = FailureResult_Result_RESULT_DENIED;
  static constexpr Result RESULT_DISABLED = FailureResult_Result_RESULT_DISABLED;
  static constexpr Result RESULT_TIMEOUT = FailureResult_Result_RESULT_TIMEOUT;
  static inline bool Result_IsValid(int value) {
    return FailureResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = FailureResult_Result_Result_MIN;
  static constexpr Result Result_MAX = FailureResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = FailureResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return FailureResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return FailureResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return FailureResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.failure.FailureResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::failure::FailureResult_Result result() const;
  void set_result(::mavsdk::rpc::failure::FailureResult_Result value);

  private:
  ::mavsdk::rpc::failure::FailureResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::failure::FailureResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.failure.FailureResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FailureResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_failure_2ffailure_2eproto;
};
// -------------------------------------------------------------------

class InjectResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mavsdk.rpc.failure.InjectResponse) */ {
 public:
  inline InjectResponse() : InjectResponse(nullptr) {}
  ~InjectResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InjectResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InjectResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InjectResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline InjectResponse(const InjectResponse& from) : InjectResponse(nullptr, from) {}
  inline InjectResponse(InjectResponse&& from) noexcept
      : InjectResponse(nullptr, std::move(from)) {}
  inline InjectResponse& operator=(const InjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InjectResponse& operator=(InjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InjectResponse* internal_default_instance() {
    return reinterpret_cast<const InjectResponse*>(
        &_InjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(InjectResponse& a, InjectResponse& b) { a.Swap(&b); }
  inline void Swap(InjectResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InjectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InjectResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InjectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InjectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InjectResponse& from) { InjectResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InjectResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mavsdk.rpc.failure.InjectResponse"; }

 protected:
  explicit InjectResponse(::google::protobuf::Arena* arena);
  InjectResponse(::google::protobuf::Arena* arena, const InjectResponse& from);
  InjectResponse(::google::protobuf::Arena* arena, InjectResponse&& from) noexcept
      : InjectResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFailureResultFieldNumber = 1,
  };
  // .mavsdk.rpc.failure.FailureResult failure_result = 1;
  bool has_failure_result() const;
  void clear_failure_result() ;
  const ::mavsdk::rpc::failure::FailureResult& failure_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::failure::FailureResult* release_failure_result();
  ::mavsdk::rpc::failure::FailureResult* mutable_failure_result();
  void set_allocated_failure_result(::mavsdk::rpc::failure::FailureResult* value);
  void unsafe_arena_set_allocated_failure_result(::mavsdk::rpc::failure::FailureResult* value);
  ::mavsdk::rpc::failure::FailureResult* unsafe_arena_release_failure_result();

  private:
  const ::mavsdk::rpc::failure::FailureResult& _internal_failure_result() const;
  ::mavsdk::rpc::failure::FailureResult* _internal_mutable_failure_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.failure.InjectResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InjectResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::failure::FailureResult* failure_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_failure_2ffailure_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InjectRequest

// .mavsdk.rpc.failure.FailureUnit failure_unit = 1;
inline void InjectRequest::clear_failure_unit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_unit_ = 0;
}
inline ::mavsdk::rpc::failure::FailureUnit InjectRequest::failure_unit() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.failure.InjectRequest.failure_unit)
  return _internal_failure_unit();
}
inline void InjectRequest::set_failure_unit(::mavsdk::rpc::failure::FailureUnit value) {
  _internal_set_failure_unit(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.failure.InjectRequest.failure_unit)
}
inline ::mavsdk::rpc::failure::FailureUnit InjectRequest::_internal_failure_unit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::failure::FailureUnit>(_impl_.failure_unit_);
}
inline void InjectRequest::_internal_set_failure_unit(::mavsdk::rpc::failure::FailureUnit value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_unit_ = value;
}

// .mavsdk.rpc.failure.FailureType failure_type = 2;
inline void InjectRequest::clear_failure_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_type_ = 0;
}
inline ::mavsdk::rpc::failure::FailureType InjectRequest::failure_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.failure.InjectRequest.failure_type)
  return _internal_failure_type();
}
inline void InjectRequest::set_failure_type(::mavsdk::rpc::failure::FailureType value) {
  _internal_set_failure_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.failure.InjectRequest.failure_type)
}
inline ::mavsdk::rpc::failure::FailureType InjectRequest::_internal_failure_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::failure::FailureType>(_impl_.failure_type_);
}
inline void InjectRequest::_internal_set_failure_type(::mavsdk::rpc::failure::FailureType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_type_ = value;
}

// int32 instance = 3;
inline void InjectRequest::clear_instance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instance_ = 0;
}
inline ::int32_t InjectRequest::instance() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.failure.InjectRequest.instance)
  return _internal_instance();
}
inline void InjectRequest::set_instance(::int32_t value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.failure.InjectRequest.instance)
}
inline ::int32_t InjectRequest::_internal_instance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instance_;
}
inline void InjectRequest::_internal_set_instance(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instance_ = value;
}

// -------------------------------------------------------------------

// InjectResponse

// .mavsdk.rpc.failure.FailureResult failure_result = 1;
inline bool InjectResponse::has_failure_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.failure_result_ != nullptr);
  return value;
}
inline void InjectResponse::clear_failure_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.failure_result_ != nullptr) _impl_.failure_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::failure::FailureResult& InjectResponse::_internal_failure_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mavsdk::rpc::failure::FailureResult* p = _impl_.failure_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::failure::FailureResult&>(::mavsdk::rpc::failure::_FailureResult_default_instance_);
}
inline const ::mavsdk::rpc::failure::FailureResult& InjectResponse::failure_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.failure.InjectResponse.failure_result)
  return _internal_failure_result();
}
inline void InjectResponse::unsafe_arena_set_allocated_failure_result(::mavsdk::rpc::failure::FailureResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.failure_result_);
  }
  _impl_.failure_result_ = reinterpret_cast<::mavsdk::rpc::failure::FailureResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.failure.InjectResponse.failure_result)
}
inline ::mavsdk::rpc::failure::FailureResult* InjectResponse::release_failure_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::failure::FailureResult* released = _impl_.failure_result_;
  _impl_.failure_result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mavsdk::rpc::failure::FailureResult* InjectResponse::unsafe_arena_release_failure_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.failure.InjectResponse.failure_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::failure::FailureResult* temp = _impl_.failure_result_;
  _impl_.failure_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::failure::FailureResult* InjectResponse::_internal_mutable_failure_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.failure_result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mavsdk::rpc::failure::FailureResult>(GetArena());
    _impl_.failure_result_ = reinterpret_cast<::mavsdk::rpc::failure::FailureResult*>(p);
  }
  return _impl_.failure_result_;
}
inline ::mavsdk::rpc::failure::FailureResult* InjectResponse::mutable_failure_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mavsdk::rpc::failure::FailureResult* _msg = _internal_mutable_failure_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.failure.InjectResponse.failure_result)
  return _msg;
}
inline void InjectResponse::set_allocated_failure_result(::mavsdk::rpc::failure::FailureResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.failure_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.failure_result_ = reinterpret_cast<::mavsdk::rpc::failure::FailureResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.failure.InjectResponse.failure_result)
}

// -------------------------------------------------------------------

// FailureResult

// .mavsdk.rpc.failure.FailureResult.Result result = 1;
inline void FailureResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::failure::FailureResult_Result FailureResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.failure.FailureResult.result)
  return _internal_result();
}
inline void FailureResult::set_result(::mavsdk::rpc::failure::FailureResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.failure.FailureResult.result)
}
inline ::mavsdk::rpc::failure::FailureResult_Result FailureResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mavsdk::rpc::failure::FailureResult_Result>(_impl_.result_);
}
inline void FailureResult::_internal_set_result(::mavsdk::rpc::failure::FailureResult_Result value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string result_str = 2;
inline void FailureResult::clear_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& FailureResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.failure.FailureResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FailureResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.failure.FailureResult.result_str)
}
inline std::string* FailureResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.failure.FailureResult.result_str)
  return _s;
}
inline const std::string& FailureResult::_internal_result_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_str_.Get();
}
inline void FailureResult::_internal_set_result_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* FailureResult::_internal_mutable_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* FailureResult::release_result_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.failure.FailureResult.result_str)
  return _impl_.result_str_.Release();
}
inline void FailureResult::set_allocated_result_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_str_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_str_.IsDefault()) {
    _impl_.result_str_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.failure.FailureResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace failure
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::failure::FailureResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::failure::FailureResult_Result>() {
  return ::mavsdk::rpc::failure::FailureResult_Result_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::failure::FailureUnit> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::failure::FailureUnit>() {
  return ::mavsdk::rpc::failure::FailureUnit_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::failure::FailureType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::failure::FailureType>() {
  return ::mavsdk::rpc::failure::FailureType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // failure_2ffailure_2eproto_2epb_2eh
