// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mavlink_direct/mavlink_direct.proto
#ifndef GRPC_mavlink_5fdirect_2fmavlink_5fdirect_2eproto__INCLUDED
#define GRPC_mavlink_5fdirect_2fmavlink_5fdirect_2eproto__INCLUDED

#include "mavlink_direct/mavlink_direct.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace mavlink_direct {

// Enable direct MAVLink communication using libmav.
class MavlinkDirectService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.mavlink_direct.MavlinkDirectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Send a MAVLink message directly to the system.
    //
    // This allows sending any MAVLink message with full control over the message content.
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    //
    // Subscribe to incoming MAVLink messages.
    //
    // This provides direct access to incoming MAVLink messages. Use an empty string
    // in message_name to subscribe to all messages, or specify a message name
    // (e.g., "HEARTBEAT") to filter for specific message types.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>> SubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>>(SubscribeMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>> AsyncSubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>>(AsyncSubscribeMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>> PrepareAsyncSubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>>(PrepareAsyncSubscribeMessageRaw(context, request, cq));
    }
    //
    // Load custom MAVLink message definitions from XML.
    //
    // This allows loading custom MAVLink message definitions at runtime,
    // extending the available message types beyond the built-in definitions.
    virtual ::grpc::Status LoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>> AsyncLoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>>(AsyncLoadCustomXmlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>> PrepareAsyncLoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>>(PrepareAsyncLoadCustomXmlRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Send a MAVLink message directly to the system.
      //
      // This allows sending any MAVLink message with full control over the message content.
      virtual void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Subscribe to incoming MAVLink messages.
      //
      // This provides direct access to incoming MAVLink messages. Use an empty string
      // in message_name to subscribe to all messages, or specify a message name
      // (e.g., "HEARTBEAT") to filter for specific message types.
      virtual void SubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mavlink_direct::MessageResponse>* reactor) = 0;
      //
      // Load custom MAVLink message definitions from XML.
      //
      // This allows loading custom MAVLink message definitions at runtime,
      // extending the available message types beyond the built-in definitions.
      virtual void LoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>* SubscribeMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>* AsyncSubscribeMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::mavlink_direct::MessageResponse>* PrepareAsyncSubscribeMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* AsyncLoadCustomXmlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* PrepareAsyncLoadCustomXmlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>> SubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>>(SubscribeMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>> AsyncSubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>>(AsyncSubscribeMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>> PrepareAsyncSubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>>(PrepareAsyncSubscribeMessageRaw(context, request, cq));
    }
    ::grpc::Status LoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>> AsyncLoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>>(AsyncLoadCustomXmlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>> PrepareAsyncLoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>>(PrepareAsyncLoadCustomXmlRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::mavlink_direct::MessageResponse>* reactor) override;
      void LoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response, std::function<void(::grpc::Status)>) override;
      void LoadCustomXml(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>* SubscribeMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>* AsyncSubscribeMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::mavlink_direct::MessageResponse>* PrepareAsyncSubscribeMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* AsyncLoadCustomXmlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* PrepareAsyncLoadCustomXmlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadCustomXml_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Send a MAVLink message directly to the system.
    //
    // This allows sending any MAVLink message with full control over the message content.
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response);
    //
    // Subscribe to incoming MAVLink messages.
    //
    // This provides direct access to incoming MAVLink messages. Use an empty string
    // in message_name to subscribe to all messages, or specify a message name
    // (e.g., "HEARTBEAT") to filter for specific message types.
    virtual ::grpc::Status SubscribeMessage(::grpc::ServerContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* writer);
    //
    // Load custom MAVLink message definitions from XML.
    //
    // This allows loading custom MAVLink message definitions at runtime,
    // extending the available message types beyond the built-in definitions.
    virtual ::grpc::Status LoadCustomXml(::grpc::ServerContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeMessage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubscribeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessage(::grpc::ServerContext* context, ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadCustomXml : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadCustomXml() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LoadCustomXml() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCustomXml(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadCustomXml(::grpc::ServerContext* context, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_SubscribeMessage<WithAsyncMethod_LoadCustomXml<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mavlink_direct::SendMessageRequest, ::mavsdk::rpc::mavlink_direct::SendMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* request, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::mavsdk::rpc::mavlink_direct::SendMessageRequest, ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mavlink_direct::SendMessageRequest, ::mavsdk::rpc::mavlink_direct::SendMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeMessage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest, ::mavsdk::rpc::mavlink_direct::MessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* request) { return this->SubscribeMessage(context, request); }));
    }
    ~WithCallbackMethod_SubscribeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mavsdk::rpc::mavlink_direct::MessageResponse>* SubscribeMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadCustomXml : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadCustomXml() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* request, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* response) { return this->LoadCustomXml(context, request, response); }));}
    void SetMessageAllocatorFor_LoadCustomXml(
        ::grpc::MessageAllocator< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadCustomXml() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCustomXml(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadCustomXml(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendMessage<WithCallbackMethod_SubscribeMessage<WithCallbackMethod_LoadCustomXml<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeMessage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubscribeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadCustomXml : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadCustomXml() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LoadCustomXml() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCustomXml(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeMessage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubscribeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadCustomXml : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadCustomXml() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LoadCustomXml() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCustomXml(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadCustomXml(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeMessage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeMessage(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadCustomXml : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadCustomXml() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadCustomXml(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadCustomXml() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadCustomXml(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadCustomXml(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::mavlink_direct::SendMessageRequest, ::mavsdk::rpc::mavlink_direct::SendMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::mavlink_direct::SendMessageRequest, ::mavsdk::rpc::mavlink_direct::SendMessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SendMessageRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::mavlink_direct::SendMessageRequest,::mavsdk::rpc::mavlink_direct::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadCustomXml : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadCustomXml() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* streamer) {
                       return this->StreamedLoadCustomXml(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadCustomXml() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadCustomXml(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest* /*request*/, ::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadCustomXml(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::mavlink_direct::LoadCustomXmlRequest,::mavsdk::rpc::mavlink_direct::LoadCustomXmlResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_LoadCustomXml<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeMessage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest, ::mavsdk::rpc::mavlink_direct::MessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest, ::mavsdk::rpc::mavlink_direct::MessageResponse>* streamer) {
                       return this->StreamedSubscribeMessage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest* /*request*/, ::grpc::ServerWriter< ::mavsdk::rpc::mavlink_direct::MessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::mavlink_direct::SubscribeMessageRequest,::mavsdk::rpc::mavlink_direct::MessageResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessage<WithSplitStreamingMethod_SubscribeMessage<WithStreamedUnaryMethod_LoadCustomXml<Service > > > StreamedService;
};

}  // namespace mavlink_direct
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_mavlink_5fdirect_2fmavlink_5fdirect_2eproto__INCLUDED
