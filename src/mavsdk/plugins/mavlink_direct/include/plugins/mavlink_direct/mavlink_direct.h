// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/mavlink_direct/mavlink_direct.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {

class System;
class MavlinkDirectImpl;

/**
 * @brief Enable direct MAVLink communication using libmav.
 */
class MavlinkDirect : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto mavlink_direct = MavlinkDirect(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit MavlinkDirect(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto mavlink_direct = MavlinkDirect(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit MavlinkDirect(std::shared_ptr<System> system); // new

    /**
     * @brief Destructor (internal use only).
     */
    ~MavlinkDirect() override;

    /**
     * @brief A complete MAVLink message with all header information and fields
     */
    struct MavlinkMessage {
        std::string message_name{}; /**< @brief MAVLink message name (e.g., "HEARTBEAT",
                                       "GLOBAL_POSITION_INT") */
        uint32_t system_id{}; /**< @brief System ID of the sender (for received messages) */
        uint32_t component_id{}; /**< @brief Component ID of the sender (for received messages) */
        uint32_t target_system_id{}; /**< @brief Target system ID (for sending, 0 for broadcast) */
        uint32_t
            target_component_id{}; /**< @brief Target component ID (for sending, 0 for broadcast) */
        std::string fields_json{}; /**< @brief All message fields as single JSON object */
    };

    /**
     * @brief Equal operator to compare two `MavlinkDirect::MavlinkMessage` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const MavlinkDirect::MavlinkMessage& lhs, const MavlinkDirect::MavlinkMessage& rhs);

    /**
     * @brief Stream operator to print information about a `MavlinkDirect::MavlinkMessage`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, MavlinkDirect::MavlinkMessage const& mavlink_message);

    /**
     * @brief Possible results returned for action requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Request succeeded. */
        Error, /**< @brief Error. */
        InvalidMessage, /**< @brief Invalid MAVLink message. */
        InvalidField, /**< @brief Invalid field name or value. */
        ConnectionError, /**< @brief Connection error. */
        NoSystem, /**< @brief No system connected. */
        Timeout, /**< @brief Request timed out. */
    };

    /**
     * @brief Stream operator to print information about a `MavlinkDirect::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, MavlinkDirect::Result const& result);

    /**
     * @brief Callback type for asynchronous MavlinkDirect calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Send a MAVLink message directly to the system.
     *
     * This allows sending any MAVLink message with full control over the message content.
     *
     * This function is blocking.
     *

     * @return Result of request.

     */
    Result send_message(MavlinkMessage message) const;

    /**
     * @brief Callback type for subscribe_message.
     */
    using MessageCallback = std::function<void(MavlinkMessage)>;

    /**
     * @brief Handle type for subscribe_message.
     */
    using MessageHandle = Handle<MavlinkMessage>;

    /**
     * @brief Subscribe to incoming MAVLink messages.
     *
     * This provides direct access to incoming MAVLink messages. Use an empty string
     * in message_name to subscribe to all messages, or specify a message name
     * (e.g., "HEARTBEAT") to filter for specific message types.
     */
    MessageHandle subscribe_message(std::string message_name, const MessageCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_message
     */
    void unsubscribe_message(MessageHandle handle);

    /**
     * @brief Load custom MAVLink message definitions from XML.
     *
     * This allows loading custom MAVLink message definitions at runtime,
     * extending the available message types beyond the built-in definitions.
     *
     * This function is blocking.
     *

     * @return Result of request.

     */
    Result load_custom_xml(std::string xml_content) const;

    /**
     * @brief Copy constructor.
     */
    MavlinkDirect(const MavlinkDirect& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const MavlinkDirect& operator=(const MavlinkDirect&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<MavlinkDirectImpl> _impl;
};

} // namespace mavsdk